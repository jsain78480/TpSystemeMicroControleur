
STM32L021K4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b18  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08002bd8  08002bd8  00012bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d2c  08002d2c  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08002d2c  08002d2c  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d2c  08002d2c  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d2c  08002d2c  00012d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d30  08002d30  00012d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08002d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  20000054  08002d88  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000350  20000400  08002d88  00020400  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006b96  00000000  00000000  000200bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e7a  00000000  00000000  00026c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a0  00000000  00000000  00028ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000063b  00000000  00000000  00029370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000329a  00000000  00000000  000299ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007f9f  00000000  00000000  0002cc45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00046584  00000000  00000000  00034be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000020f4  00000000  00000000  0007b168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0007d25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000054 	.word	0x20000054
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002bc0 	.word	0x08002bc0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000058 	.word	0x20000058
 8000104:	08002bc0 	.word	0x08002bc0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	69db      	ldr	r3, [r3, #28]
 8000240:	2280      	movs	r2, #128	; 0x80
 8000242:	4013      	ands	r3, r2
 8000244:	2b80      	cmp	r3, #128	; 0x80
 8000246:	d101      	bne.n	800024c <LL_USART_IsActiveFlag_TXE+0x18>
 8000248:	2301      	movs	r3, #1
 800024a:	e000      	b.n	800024e <LL_USART_IsActiveFlag_TXE+0x1a>
 800024c:	2300      	movs	r3, #0
}
 800024e:	0018      	movs	r0, r3
 8000250:	46bd      	mov	sp, r7
 8000252:	b002      	add	sp, #8
 8000254:	bd80      	pop	{r7, pc}

08000256 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000256:	b580      	push	{r7, lr}
 8000258:	b082      	sub	sp, #8
 800025a:	af00      	add	r7, sp, #0
 800025c:	6078      	str	r0, [r7, #4]
 800025e:	000a      	movs	r2, r1
 8000260:	1cfb      	adds	r3, r7, #3
 8000262:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 8000264:	1cfb      	adds	r3, r7, #3
 8000266:	781a      	ldrb	r2, [r3, #0]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800026c:	46c0      	nop			; (mov r8, r8)
 800026e:	46bd      	mov	sp, r7
 8000270:	b002      	add	sp, #8
 8000272:	bd80      	pop	{r7, pc}

08000274 <SerialTransmit>:

#include "Serial.h"
#include "main.h"

//Transmission sur l'UART
uint8_t SerialTransmit(char * pData, uint16_t Size){
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	000a      	movs	r2, r1
 800027e:	1cbb      	adds	r3, r7, #2
 8000280:	801a      	strh	r2, [r3, #0]
	for (uint8_t i=0;i<Size;i++){
 8000282:	230f      	movs	r3, #15
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	2200      	movs	r2, #0
 8000288:	701a      	strb	r2, [r3, #0]
 800028a:	e017      	b.n	80002bc <SerialTransmit+0x48>
		LL_USART_TransmitData8(USART2, pData[i]);
 800028c:	230f      	movs	r3, #15
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	18d3      	adds	r3, r2, r3
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	4a0f      	ldr	r2, [pc, #60]	; (80002d8 <SerialTransmit+0x64>)
 800029a:	0019      	movs	r1, r3
 800029c:	0010      	movs	r0, r2
 800029e:	f7ff ffda 	bl	8000256 <LL_USART_TransmitData8>
		while(LL_USART_IsActiveFlag_TXE(USART2)==0);
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <SerialTransmit+0x64>)
 80002a6:	0018      	movs	r0, r3
 80002a8:	f7ff ffc4 	bl	8000234 <LL_USART_IsActiveFlag_TXE>
 80002ac:	1e03      	subs	r3, r0, #0
 80002ae:	d0f9      	beq.n	80002a4 <SerialTransmit+0x30>
	for (uint8_t i=0;i<Size;i++){
 80002b0:	210f      	movs	r1, #15
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	781a      	ldrb	r2, [r3, #0]
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	3201      	adds	r2, #1
 80002ba:	701a      	strb	r2, [r3, #0]
 80002bc:	230f      	movs	r3, #15
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	b29b      	uxth	r3, r3
 80002c4:	1cba      	adds	r2, r7, #2
 80002c6:	8812      	ldrh	r2, [r2, #0]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d8df      	bhi.n	800028c <SerialTransmit+0x18>
	}
	return 0;
 80002cc:	2300      	movs	r3, #0
}
 80002ce:	0018      	movs	r0, r3
 80002d0:	46bd      	mov	sp, r7
 80002d2:	b004      	add	sp, #16
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	46c0      	nop			; (mov r8, r8)
 80002d8:	40004400 	.word	0x40004400

080002dc <shHelp>:

#include "Shell.h"
#include <stdio.h>


int shHelp(hShell_t * hShell, int argc, char ** argv) {
 80002dc:	b5b0      	push	{r4, r5, r7, lr}
 80002de:	b088      	sub	sp, #32
 80002e0:	af02      	add	r7, sp, #8
 80002e2:	60f8      	str	r0, [r7, #12]
 80002e4:	60b9      	str	r1, [r7, #8]
 80002e6:	607a      	str	r2, [r7, #4]
	int i;

	uint16_t size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "\r\nThe following commands are available:\r\n");
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	4a29      	ldr	r2, [pc, #164]	; (8000390 <shHelp+0xb4>)
 80002ec:	4694      	mov	ip, r2
 80002ee:	4463      	add	r3, ip
 80002f0:	4a28      	ldr	r2, [pc, #160]	; (8000394 <shHelp+0xb8>)
 80002f2:	212a      	movs	r1, #42	; 0x2a
 80002f4:	0018      	movs	r0, r3
 80002f6:	f001 ffa9 	bl	800224c <sniprintf>
 80002fa:	0002      	movs	r2, r0
 80002fc:	2112      	movs	r1, #18
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 8000302:	68fa      	ldr	r2, [r7, #12]
 8000304:	238e      	movs	r3, #142	; 0x8e
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	58d3      	ldr	r3, [r2, r3]
 800030a:	68fa      	ldr	r2, [r7, #12]
 800030c:	4820      	ldr	r0, [pc, #128]	; (8000390 <shHelp+0xb4>)
 800030e:	1810      	adds	r0, r2, r0
 8000310:	187a      	adds	r2, r7, r1
 8000312:	8812      	ldrh	r2, [r2, #0]
 8000314:	0011      	movs	r1, r2
 8000316:	4798      	blx	r3

	for(i = 0 ; i < hShell->funcListSize ; i++) {
 8000318:	2300      	movs	r3, #0
 800031a:	617b      	str	r3, [r7, #20]
 800031c:	e02c      	b.n	8000378 <shHelp+0x9c>
		uint16_t size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "\t%c - %s\r\n", hShell->funcList[i].c, hShell->funcList[i].description);
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	4d1b      	ldr	r5, [pc, #108]	; (8000390 <shHelp+0xb4>)
 8000322:	1958      	adds	r0, r3, r5
 8000324:	68f9      	ldr	r1, [r7, #12]
 8000326:	697a      	ldr	r2, [r7, #20]
 8000328:	0013      	movs	r3, r2
 800032a:	005b      	lsls	r3, r3, #1
 800032c:	189b      	adds	r3, r3, r2
 800032e:	009b      	lsls	r3, r3, #2
 8000330:	18cb      	adds	r3, r1, r3
 8000332:	3304      	adds	r3, #4
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	001c      	movs	r4, r3
 8000338:	68f9      	ldr	r1, [r7, #12]
 800033a:	697a      	ldr	r2, [r7, #20]
 800033c:	0013      	movs	r3, r2
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	189b      	adds	r3, r3, r2
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	18cb      	adds	r3, r1, r3
 8000346:	330c      	adds	r3, #12
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a13      	ldr	r2, [pc, #76]	; (8000398 <shHelp+0xbc>)
 800034c:	9300      	str	r3, [sp, #0]
 800034e:	0023      	movs	r3, r4
 8000350:	212a      	movs	r1, #42	; 0x2a
 8000352:	f001 ff7b 	bl	800224c <sniprintf>
 8000356:	0002      	movs	r2, r0
 8000358:	2110      	movs	r1, #16
 800035a:	187b      	adds	r3, r7, r1
 800035c:	801a      	strh	r2, [r3, #0]
		hShell->transmitCb(hShell->printBuffer, size);
 800035e:	68fa      	ldr	r2, [r7, #12]
 8000360:	238e      	movs	r3, #142	; 0x8e
 8000362:	009b      	lsls	r3, r3, #2
 8000364:	58d3      	ldr	r3, [r2, r3]
 8000366:	68fa      	ldr	r2, [r7, #12]
 8000368:	1950      	adds	r0, r2, r5
 800036a:	187a      	adds	r2, r7, r1
 800036c:	8812      	ldrh	r2, [r2, #0]
 800036e:	0011      	movs	r1, r2
 8000370:	4798      	blx	r3
	for(i = 0 ; i < hShell->funcListSize ; i++) {
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	3301      	adds	r3, #1
 8000376:	617b      	str	r3, [r7, #20]
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	001a      	movs	r2, r3
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	4293      	cmp	r3, r2
 8000382:	dbcc      	blt.n	800031e <shHelp+0x42>
	}

	return 0;
 8000384:	2300      	movs	r3, #0
}
 8000386:	0018      	movs	r0, r3
 8000388:	46bd      	mov	sp, r7
 800038a:	b006      	add	sp, #24
 800038c:	bdb0      	pop	{r4, r5, r7, pc}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	0000020e 	.word	0x0000020e
 8000394:	08002bd8 	.word	0x08002bd8
 8000398:	08002c04 	.word	0x08002c04

0800039c <isChar>:

uint8_t isChar(char c) {
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	0002      	movs	r2, r0
 80003a4:	1dfb      	adds	r3, r7, #7
 80003a6:	701a      	strb	r2, [r3, #0]
	if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || (c == '+') || (c == '-')) {
 80003a8:	1dfb      	adds	r3, r7, #7
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b40      	cmp	r3, #64	; 0x40
 80003ae:	d903      	bls.n	80003b8 <isChar+0x1c>
 80003b0:	1dfb      	adds	r3, r7, #7
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2b5a      	cmp	r3, #90	; 0x5a
 80003b6:	d917      	bls.n	80003e8 <isChar+0x4c>
 80003b8:	1dfb      	adds	r3, r7, #7
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2b60      	cmp	r3, #96	; 0x60
 80003be:	d903      	bls.n	80003c8 <isChar+0x2c>
 80003c0:	1dfb      	adds	r3, r7, #7
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2b7a      	cmp	r3, #122	; 0x7a
 80003c6:	d90f      	bls.n	80003e8 <isChar+0x4c>
 80003c8:	1dfb      	adds	r3, r7, #7
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b2f      	cmp	r3, #47	; 0x2f
 80003ce:	d903      	bls.n	80003d8 <isChar+0x3c>
 80003d0:	1dfb      	adds	r3, r7, #7
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2b39      	cmp	r3, #57	; 0x39
 80003d6:	d907      	bls.n	80003e8 <isChar+0x4c>
 80003d8:	1dfb      	adds	r3, r7, #7
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b2b      	cmp	r3, #43	; 0x2b
 80003de:	d003      	beq.n	80003e8 <isChar+0x4c>
 80003e0:	1dfb      	adds	r3, r7, #7
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b2d      	cmp	r3, #45	; 0x2d
 80003e6:	d101      	bne.n	80003ec <isChar+0x50>
		return 1;
 80003e8:	2301      	movs	r3, #1
 80003ea:	e000      	b.n	80003ee <isChar+0x52>
	}
	else {
		return 0;
 80003ec:	2300      	movs	r3, #0
	}
}
 80003ee:	0018      	movs	r0, r3
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b002      	add	sp, #8
 80003f4:	bd80      	pop	{r7, pc}
	...

080003f8 <ShellInit>:
 *
 * @param hShell      Shell handle
 * @param transmitCb  Function to be called when character has to be called
 * @retval Status (0 if successful)
 */
uint8_t ShellInit(hShell_t * hShell, ShellTransmitCb_t transmitCb) {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
	if (hShell == NULL) {
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d101      	bne.n	800040c <ShellInit+0x14>
		return 255;
 8000408:	23ff      	movs	r3, #255	; 0xff
 800040a:	e037      	b.n	800047c <ShellInit+0x84>
	}

	hShell->funcListSize = 0;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2200      	movs	r2, #0
 8000410:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb = transmitCb;
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	238e      	movs	r3, #142	; 0x8e
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	6839      	ldr	r1, [r7, #0]
 800041a:	50d1      	str	r1, [r2, r3]
	hShell->cmdLinePosition = 0;
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	238f      	movs	r3, #143	; 0x8f
 8000420:	009b      	lsls	r3, r3, #2
 8000422:	2100      	movs	r1, #0
 8000424:	52d1      	strh	r1, [r2, r3]
	hShell->arrowPending = 0;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a16      	ldr	r2, [pc, #88]	; (8000484 <ShellInit+0x8c>)
 800042a:	2100      	movs	r1, #0
 800042c:	5499      	strb	r1, [r3, r2]

	uint16_t size = snprintf(hShell->printBuffer, _PRINT_BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.4 =====\r\n");
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a15      	ldr	r2, [pc, #84]	; (8000488 <ShellInit+0x90>)
 8000432:	4694      	mov	ip, r2
 8000434:	4463      	add	r3, ip
 8000436:	4a15      	ldr	r2, [pc, #84]	; (800048c <ShellInit+0x94>)
 8000438:	212a      	movs	r1, #42	; 0x2a
 800043a:	0018      	movs	r0, r3
 800043c:	f001 ff06 	bl	800224c <sniprintf>
 8000440:	0002      	movs	r2, r0
 8000442:	210e      	movs	r1, #14
 8000444:	187b      	adds	r3, r7, r1
 8000446:	801a      	strh	r2, [r3, #0]
	hShell->transmitCb(hShell->printBuffer, size);
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	238e      	movs	r3, #142	; 0x8e
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	58d3      	ldr	r3, [r2, r3]
 8000450:	687a      	ldr	r2, [r7, #4]
 8000452:	480d      	ldr	r0, [pc, #52]	; (8000488 <ShellInit+0x90>)
 8000454:	1810      	adds	r0, r2, r0
 8000456:	187a      	adds	r2, r7, r1
 8000458:	8812      	ldrh	r2, [r2, #0]
 800045a:	0011      	movs	r1, r2
 800045c:	4798      	blx	r3

	ShellAdd(hShell, 'h', shHelp, "Displays this help message");
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <ShellInit+0x98>)
 8000460:	4a0c      	ldr	r2, [pc, #48]	; (8000494 <ShellInit+0x9c>)
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	2168      	movs	r1, #104	; 0x68
 8000466:	f000 f819 	bl	800049c <ShellAdd>

	hShell->transmitCb("\r\n> ", 4);
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	238e      	movs	r3, #142	; 0x8e
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	58d3      	ldr	r3, [r2, r3]
 8000472:	4a09      	ldr	r2, [pc, #36]	; (8000498 <ShellInit+0xa0>)
 8000474:	2104      	movs	r1, #4
 8000476:	0010      	movs	r0, r2
 8000478:	4798      	blx	r3

	return 0;
 800047a:	2300      	movs	r3, #0
}
 800047c:	0018      	movs	r0, r3
 800047e:	46bd      	mov	sp, r7
 8000480:	b004      	add	sp, #16
 8000482:	bd80      	pop	{r7, pc}
 8000484:	0000023e 	.word	0x0000023e
 8000488:	0000020e 	.word	0x0000020e
 800048c:	08002c10 	.word	0x08002c10
 8000490:	08002c38 	.word	0x08002c38
 8000494:	080002dd 	.word	0x080002dd
 8000498:	08002c54 	.word	0x08002c54

0800049c <ShellAdd>:

uint8_t ShellAdd(hShell_t * hShell, char c, ShellFuncPtr_t pFunc, char * description) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	607a      	str	r2, [r7, #4]
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	200b      	movs	r0, #11
 80004aa:	183b      	adds	r3, r7, r0
 80004ac:	1c0a      	adds	r2, r1, #0
 80004ae:	701a      	strb	r2, [r3, #0]
	if (!isChar(c)) {
 80004b0:	183b      	adds	r3, r7, r0
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	0018      	movs	r0, r3
 80004b6:	f7ff ff71 	bl	800039c <isChar>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d101      	bne.n	80004c2 <ShellAdd+0x26>
		return 255;
 80004be:	23ff      	movs	r3, #255	; 0xff
 80004c0:	e032      	b.n	8000528 <ShellAdd+0x8c>
	}

	if (hShell->funcListSize < _SHELL_FUNC_LIST_MAX_SIZE) {
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	881b      	ldrh	r3, [r3, #0]
 80004c6:	2b27      	cmp	r3, #39	; 0x27
 80004c8:	d82d      	bhi.n	8000526 <ShellAdd+0x8a>
		hShell->funcList[hShell->funcListSize].c = c;
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	881b      	ldrh	r3, [r3, #0]
 80004ce:	0019      	movs	r1, r3
 80004d0:	68fa      	ldr	r2, [r7, #12]
 80004d2:	000b      	movs	r3, r1
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	185b      	adds	r3, r3, r1
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	18d3      	adds	r3, r2, r3
 80004dc:	3304      	adds	r3, #4
 80004de:	220b      	movs	r2, #11
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	7812      	ldrb	r2, [r2, #0]
 80004e4:	701a      	strb	r2, [r3, #0]
		hShell->funcList[hShell->funcListSize].func = pFunc;
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	881b      	ldrh	r3, [r3, #0]
 80004ea:	0019      	movs	r1, r3
 80004ec:	68fa      	ldr	r2, [r7, #12]
 80004ee:	000b      	movs	r3, r1
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	185b      	adds	r3, r3, r1
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	18d3      	adds	r3, r2, r3
 80004f8:	3308      	adds	r3, #8
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	601a      	str	r2, [r3, #0]
		hShell->funcList[hShell->funcListSize].description = description;
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	881b      	ldrh	r3, [r3, #0]
 8000502:	0019      	movs	r1, r3
 8000504:	68fa      	ldr	r2, [r7, #12]
 8000506:	000b      	movs	r3, r1
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	185b      	adds	r3, r3, r1
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	18d3      	adds	r3, r2, r3
 8000510:	330c      	adds	r3, #12
 8000512:	683a      	ldr	r2, [r7, #0]
 8000514:	601a      	str	r2, [r3, #0]
		hShell->funcListSize++;
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	3301      	adds	r3, #1
 800051c:	b29a      	uxth	r2, r3
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	801a      	strh	r2, [r3, #0]
		return 0;
 8000522:	2300      	movs	r3, #0
 8000524:	e000      	b.n	8000528 <ShellAdd+0x8c>
	}

	return 255;
 8000526:	23ff      	movs	r3, #255	; 0xff
}
 8000528:	0018      	movs	r0, r3
 800052a:	46bd      	mov	sp, r7
 800052c:	b004      	add	sp, #16
 800052e:	bd80      	pop	{r7, pc}

08000530 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2201      	movs	r2, #1
 800053e:	431a      	orrs	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	601a      	str	r2, [r3, #0]
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b002      	add	sp, #8
 800054a:	bd80      	pop	{r7, pc}

0800054c <LL_TIM_EnableUpdateEvent>:
  * @rmtoll CR1          UDIS          LL_TIM_EnableUpdateEvent
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableUpdateEvent(TIM_TypeDef *TIMx)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_UDIS);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2202      	movs	r2, #2
 800055a:	4393      	bics	r3, r2
 800055c:	001a      	movs	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	601a      	str	r2, [r3, #0]
}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	b002      	add	sp, #8
 8000568:	bd80      	pop	{r7, pc}

0800056a <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	68db      	ldr	r3, [r3, #12]
 8000576:	2201      	movs	r2, #1
 8000578:	431a      	orrs	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	60da      	str	r2, [r3, #12]
}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	b002      	add	sp, #8
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <TimeBaseStartIT>:

#include "Timebase.h"
#include "main.h"

// Initialise le timer
void TimeBaseStartIT(){
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	LL_TIM_EnableUpdateEvent(TIM21);
 800058c:	4b07      	ldr	r3, [pc, #28]	; (80005ac <TimeBaseStartIT+0x24>)
 800058e:	0018      	movs	r0, r3
 8000590:	f7ff ffdc 	bl	800054c <LL_TIM_EnableUpdateEvent>
	LL_TIM_EnableIT_UPDATE(TIM21);
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <TimeBaseStartIT+0x24>)
 8000596:	0018      	movs	r0, r3
 8000598:	f7ff ffe7 	bl	800056a <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM21);
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <TimeBaseStartIT+0x24>)
 800059e:	0018      	movs	r0, r3
 80005a0:	f7ff ffc6 	bl	8000530 <LL_TIM_EnableCounter>
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	40010800 	.word	0x40010800

080005b0 <LL_ADC_SetCommonFrequencyMode>:
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_HIGH
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonFrequencyMode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonFrequencyMode)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a05      	ldr	r2, [pc, #20]	; (80005d4 <LL_ADC_SetCommonFrequencyMode+0x24>)
 80005c0:	401a      	ands	r2, r3
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	431a      	orrs	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	601a      	str	r2, [r3, #0]
}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b002      	add	sp, #8
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	fdffffff 	.word	0xfdffffff

080005d8 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	2207      	movs	r2, #7
 80005e8:	4393      	bics	r3, r2
 80005ea:	001a      	movs	r2, r3
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	431a      	orrs	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	615a      	str	r2, [r3, #20]
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b002      	add	sp, #8
 80005fa:	bd80      	pop	{r7, pc}

080005fc <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	2204      	movs	r2, #4
 800060c:	4393      	bics	r3, r2
 800060e:	001a      	movs	r2, r3
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	431a      	orrs	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	60da      	str	r2, [r3, #12]
}
 8000618:	46c0      	nop			; (mov r8, r8)
 800061a:	46bd      	mov	sp, r7
 800061c:	b002      	add	sp, #8
 800061e:	bd80      	pop	{r7, pc}

08000620 <LL_ADC_REG_SetSequencerChAdd>:
  *
  *         (1) On STM32L0, parameter not available on all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	035b      	lsls	r3, r3, #13
 8000632:	0b5b      	lsrs	r3, r3, #13
 8000634:	431a      	orrs	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b002      	add	sp, #8
 8000640:	bd80      	pop	{r7, pc}

08000642 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b082      	sub	sp, #8
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	691b      	ldr	r3, [r3, #16]
 8000650:	2201      	movs	r2, #1
 8000652:	4393      	bics	r3, r2
 8000654:	001a      	movs	r2, r3
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	431a      	orrs	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	611a      	str	r2, [r3, #16]
}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b002      	add	sp, #8
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	4a05      	ldr	r2, [pc, #20]	; (800068c <LL_ADC_EnableInternalRegulator+0x24>)
 8000676:	4013      	ands	r3, r2
 8000678:	2280      	movs	r2, #128	; 0x80
 800067a:	0552      	lsls	r2, r2, #21
 800067c:	431a      	orrs	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b002      	add	sp, #8
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	6fffffe8 	.word	0x6fffffe8

08000690 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	2204      	movs	r2, #4
 800069e:	4393      	bics	r3, r2
 80006a0:	001a      	movs	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	605a      	str	r2, [r3, #4]
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b002      	add	sp, #8
 80006ac:	bd80      	pop	{r7, pc}

080006ae <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSEQIE        LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	2208      	movs	r2, #8
 80006bc:	4393      	bics	r3, r2
 80006be:	001a      	movs	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	605a      	str	r2, [r3, #4]
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b002      	add	sp, #8
 80006ca:	bd80      	pop	{r7, pc}

080006cc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <LL_APB2_GRP1_EnableClock+0x28>)
 80006d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <LL_APB2_GRP1_EnableClock+0x28>)
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	430a      	orrs	r2, r1
 80006de:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <LL_APB2_GRP1_EnableClock+0x28>)
 80006e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	4013      	ands	r3, r2
 80006e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ea:	68fb      	ldr	r3, [r7, #12]
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b004      	add	sp, #16
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40021000 	.word	0x40021000

080006f8 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <LL_IOP_GRP1_EnableClock+0x28>)
 8000702:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <LL_IOP_GRP1_EnableClock+0x28>)
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	430a      	orrs	r2, r1
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <LL_IOP_GRP1_EnableClock+0x28>)
 800070e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	4013      	ands	r3, r2
 8000714:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000716:	68fb      	ldr	r3, [r7, #12]
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b004      	add	sp, #16
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000

08000724 <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 8000724:	b5b0      	push	{r4, r5, r7, lr}
 8000726:	b090      	sub	sp, #64	; 0x40
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800072a:	2428      	movs	r4, #40	; 0x28
 800072c:	193b      	adds	r3, r7, r4
 800072e:	0018      	movs	r0, r3
 8000730:	2314      	movs	r3, #20
 8000732:	001a      	movs	r2, r3
 8000734:	2100      	movs	r1, #0
 8000736:	f001 fdbd 	bl	80022b4 <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800073a:	2518      	movs	r5, #24
 800073c:	197b      	adds	r3, r7, r5
 800073e:	0018      	movs	r0, r3
 8000740:	2310      	movs	r3, #16
 8000742:	001a      	movs	r2, r3
 8000744:	2100      	movs	r1, #0
 8000746:	f001 fdb5 	bl	80022b4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	003b      	movs	r3, r7
 800074c:	0018      	movs	r0, r3
 800074e:	2318      	movs	r3, #24
 8000750:	001a      	movs	r2, r3
 8000752:	2100      	movs	r1, #0
 8000754:	f001 fdae 	bl	80022b4 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	0018      	movs	r0, r3
 800075e:	f7ff ffb5 	bl	80006cc <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff ffc8 	bl	80006f8 <LL_IOP_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PA1   ------> ADC_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000768:	003b      	movs	r3, r7
 800076a:	2202      	movs	r2, #2
 800076c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800076e:	003b      	movs	r3, r7
 8000770:	2203      	movs	r2, #3
 8000772:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000774:	003b      	movs	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	003a      	movs	r2, r7
 800077c:	23a0      	movs	r3, #160	; 0xa0
 800077e:	05db      	lsls	r3, r3, #23
 8000780:	0011      	movs	r1, r2
 8000782:	0018      	movs	r0, r3
 8000784:	f001 f845 	bl	8001812 <LL_GPIO_Init>

  /* USER CODE END ADC_Init 1 */

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_1);
 8000788:	4a36      	ldr	r2, [pc, #216]	; (8000864 <MX_ADC_Init+0x140>)
 800078a:	4b37      	ldr	r3, [pc, #220]	; (8000868 <MX_ADC_Init+0x144>)
 800078c:	0011      	movs	r1, r2
 800078e:	0018      	movs	r0, r3
 8000790:	f7ff ff46 	bl	8000620 <LL_ADC_REG_SetSequencerChAdd>

  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000794:	0021      	movs	r1, r4
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	4a2c      	ldr	r2, [pc, #176]	; (8000868 <MX_ADC_Init+0x144>)
 80007b8:	0019      	movs	r1, r3
 80007ba:	0010      	movs	r0, r2
 80007bc:	f000 ff3e 	bl	800163c <LL_ADC_REG_Init>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80007c0:	4b29      	ldr	r3, [pc, #164]	; (8000868 <MX_ADC_Init+0x144>)
 80007c2:	2100      	movs	r1, #0
 80007c4:	0018      	movs	r0, r3
 80007c6:	f7ff ff07 	bl	80005d8 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 80007ca:	4b27      	ldr	r3, [pc, #156]	; (8000868 <MX_ADC_Init+0x144>)
 80007cc:	2100      	movs	r1, #0
 80007ce:	0018      	movs	r0, r3
 80007d0:	f7ff ff37 	bl	8000642 <LL_ADC_SetOverSamplingScope>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 80007d4:	4b24      	ldr	r3, [pc, #144]	; (8000868 <MX_ADC_Init+0x144>)
 80007d6:	2100      	movs	r1, #0
 80007d8:	0018      	movs	r0, r3
 80007da:	f7ff ff0f 	bl	80005fc <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_HIGH);
 80007de:	4b23      	ldr	r3, [pc, #140]	; (800086c <MX_ADC_Init+0x148>)
 80007e0:	2100      	movs	r1, #0
 80007e2:	0018      	movs	r0, r3
 80007e4:	f7ff fee4 	bl	80005b0 <LL_ADC_SetCommonFrequencyMode>
  LL_ADC_DisableIT_EOC(ADC1);
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_ADC_Init+0x144>)
 80007ea:	0018      	movs	r0, r3
 80007ec:	f7ff ff50 	bl	8000690 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_ADC_Init+0x144>)
 80007f2:	0018      	movs	r0, r3
 80007f4:	f7ff ff5b 	bl	80006ae <LL_ADC_DisableIT_EOS>
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV1;
 80007f8:	197b      	adds	r3, r7, r5
 80007fa:	22c0      	movs	r2, #192	; 0xc0
 80007fc:	0612      	lsls	r2, r2, #24
 80007fe:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000800:	197b      	adds	r3, r7, r5
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000806:	197b      	adds	r3, r7, r5
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800080c:	197b      	adds	r3, r7, r5
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000812:	197b      	adds	r3, r7, r5
 8000814:	4a14      	ldr	r2, [pc, #80]	; (8000868 <MX_ADC_Init+0x144>)
 8000816:	0019      	movs	r1, r3
 8000818:	0010      	movs	r0, r2
 800081a:	f000 fed9 	bl	80015d0 <LL_ADC_Init>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_ADC_Init+0x144>)
 8000820:	0018      	movs	r0, r3
 8000822:	f7ff ff21 	bl	8000668 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_ADC_Init+0x14c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4912      	ldr	r1, [pc, #72]	; (8000874 <MX_ADC_Init+0x150>)
 800082c:	0018      	movs	r0, r3
 800082e:	f7ff fc75 	bl	800011c <__udivsi3>
 8000832:	0003      	movs	r3, r0
 8000834:	001a      	movs	r2, r3
 8000836:	0013      	movs	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	189b      	adds	r3, r3, r2
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	210a      	movs	r1, #10
 8000840:	0018      	movs	r0, r3
 8000842:	f7ff fc6b 	bl	800011c <__udivsi3>
 8000846:	0003      	movs	r3, r0
 8000848:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 800084a:	e002      	b.n	8000852 <MX_ADC_Init+0x12e>
  {
    wait_loop_index--;
 800084c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800084e:	3b01      	subs	r3, #1
 8000850:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8000852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1f9      	bne.n	800084c <MX_ADC_Init+0x128>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b010      	add	sp, #64	; 0x40
 8000860:	bdb0      	pop	{r4, r5, r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	04000002 	.word	0x04000002
 8000868:	40012400 	.word	0x40012400
 800086c:	40012708 	.word	0x40012708
 8000870:	20000000 	.word	0x20000000
 8000874:	00030d40 	.word	0x00030d40

08000878 <LL_IOP_GRP1_EnableClock>:
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <LL_IOP_GRP1_EnableClock+0x28>)
 8000882:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <LL_IOP_GRP1_EnableClock+0x28>)
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	430a      	orrs	r2, r1
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <LL_IOP_GRP1_EnableClock+0x28>)
 800088e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	4013      	ands	r3, r2
 8000894:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000896:	68fb      	ldr	r3, [r7, #12]
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	b004      	add	sp, #16
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40021000 	.word	0x40021000

080008a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	003b      	movs	r3, r7
 80008ac:	0018      	movs	r0, r3
 80008ae:	2318      	movs	r3, #24
 80008b0:	001a      	movs	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	f001 fcfe 	bl	80022b4 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80008b8:	2001      	movs	r0, #1
 80008ba:	f7ff ffdd 	bl	8000878 <LL_IOP_GRP1_EnableClock>

  /**/
  GPIO_InitStruct.Pin = DAC_nLDAC_Pin;
 80008be:	003b      	movs	r3, r7
 80008c0:	2208      	movs	r2, #8
 80008c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80008c4:	003b      	movs	r3, r7
 80008c6:	2203      	movs	r2, #3
 80008c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008ca:	003b      	movs	r3, r7
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DAC_nLDAC_GPIO_Port, &GPIO_InitStruct);
 80008d0:	003a      	movs	r2, r7
 80008d2:	23a0      	movs	r3, #160	; 0xa0
 80008d4:	05db      	lsls	r3, r3, #23
 80008d6:	0011      	movs	r1, r2
 80008d8:	0018      	movs	r0, r3
 80008da:	f000 ff9a 	bl	8001812 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DAC_nCS_Pin;
 80008de:	003b      	movs	r3, r7
 80008e0:	2210      	movs	r2, #16
 80008e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80008e4:	003b      	movs	r3, r7
 80008e6:	2203      	movs	r2, #3
 80008e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008ea:	003b      	movs	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DAC_nCS_GPIO_Port, &GPIO_InitStruct);
 80008f0:	003a      	movs	r2, r7
 80008f2:	23a0      	movs	r3, #160	; 0xa0
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	0011      	movs	r1, r2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f000 ff8a 	bl	8001812 <LL_GPIO_Init>

}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b006      	add	sp, #24
 8000904:	bd80      	pop	{r7, pc}

08000906 <LL_TIM_EnableCounter>:
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2201      	movs	r2, #1
 8000914:	431a      	orrs	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	601a      	str	r2, [r3, #0]
}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b002      	add	sp, #8
 8000920:	bd80      	pop	{r7, pc}

08000922 <LL_TIM_CC_EnableChannel>:
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
 800092a:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6a1a      	ldr	r2, [r3, #32]
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	431a      	orrs	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	621a      	str	r2, [r3, #32]
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b002      	add	sp, #8
 800093e:	bd80      	pop	{r7, pc}

08000940 <LL_TIM_OC_SetCompareCH1>:
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	683a      	ldr	r2, [r7, #0]
 800094e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	b002      	add	sp, #8
 8000956:	bd80      	pop	{r7, pc}

08000958 <LedStart>:
// Initialisation des données de la structure
Led_t ledStatus = { 0 , 0 };
int it_led = 0;

// Fonction pour démarrer le timer
void LedStart(void){
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM2);
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	05db      	lsls	r3, r3, #23
 8000960:	0018      	movs	r0, r3
 8000962:	f7ff ffd0 	bl	8000906 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000966:	2380      	movs	r3, #128	; 0x80
 8000968:	05db      	lsls	r3, r3, #23
 800096a:	2101      	movs	r1, #1
 800096c:	0018      	movs	r0, r3
 800096e:	f7ff ffd8 	bl	8000922 <LL_TIM_CC_EnableChannel>
}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <LedSetValue>:

// Configure le rapport cyclique
void LedSetValue(uint8_t val){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	0002      	movs	r2, r0
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	701a      	strb	r2, [r3, #0]
	LL_TIM_OC_SetCompareCH1(TIM2, val);
 8000984:	1dfb      	adds	r3, r7, #7
 8000986:	781a      	ldrb	r2, [r3, #0]
 8000988:	2380      	movs	r3, #128	; 0x80
 800098a:	05db      	lsls	r3, r3, #23
 800098c:	0011      	movs	r1, r2
 800098e:	0018      	movs	r0, r3
 8000990:	f7ff ffd6 	bl	8000940 <LL_TIM_OC_SetCompareCH1>
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b002      	add	sp, #8
 800099a:	bd80      	pop	{r7, pc}

0800099c <LedPulse>:

// Gere l'intensité
void LedPulse(void){
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	//augmentation d'intensité led
	if (ledStatus.updown == 0) {
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <LedPulse+0x54>)
 80009a2:	785b      	ldrb	r3, [r3, #1]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d106      	bne.n	80009b6 <LedPulse+0x1a>
		ledStatus.luminosite++;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <LedPulse+0x54>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	3301      	adds	r3, #1
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <LedPulse+0x54>)
 80009b2:	701a      	strb	r2, [r3, #0]
 80009b4:	e005      	b.n	80009c2 <LedPulse+0x26>
	}
	// Diminution de l'intensité
	else {
		ledStatus.luminosite--;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <LedPulse+0x54>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <LedPulse+0x54>)
 80009c0:	701a      	strb	r2, [r3, #0]
	}

	// En mode décrémente
	if (ledStatus.luminosite == 255){
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <LedPulse+0x54>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2bff      	cmp	r3, #255	; 0xff
 80009c8:	d102      	bne.n	80009d0 <LedPulse+0x34>
		ledStatus.updown = 1;
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <LedPulse+0x54>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	705a      	strb	r2, [r3, #1]
	}

	// En mode incrémente
	if (ledStatus.luminosite == 0){
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <LedPulse+0x54>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d102      	bne.n	80009de <LedPulse+0x42>
		ledStatus.updown = 0;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <LedPulse+0x54>)
 80009da:	2200      	movs	r2, #0
 80009dc:	705a      	strb	r2, [r3, #1]
	}
	LedSetValue(ledStatus.luminosite);
 80009de:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <LedPulse+0x54>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	0018      	movs	r0, r3
 80009e4:	f7ff ffc8 	bl	8000978 <LedSetValue>
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	20000070 	.word	0x20000070

080009f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f4:	b590      	push	{r4, r7, lr}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	0002      	movs	r2, r0
 80009fc:	6039      	str	r1, [r7, #0]
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b7f      	cmp	r3, #127	; 0x7f
 8000a08:	d828      	bhi.n	8000a5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a0a:	4a2f      	ldr	r2, [pc, #188]	; (8000ac8 <__NVIC_SetPriority+0xd4>)
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b25b      	sxtb	r3, r3
 8000a12:	089b      	lsrs	r3, r3, #2
 8000a14:	33c0      	adds	r3, #192	; 0xc0
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	589b      	ldr	r3, [r3, r2]
 8000a1a:	1dfa      	adds	r2, r7, #7
 8000a1c:	7812      	ldrb	r2, [r2, #0]
 8000a1e:	0011      	movs	r1, r2
 8000a20:	2203      	movs	r2, #3
 8000a22:	400a      	ands	r2, r1
 8000a24:	00d2      	lsls	r2, r2, #3
 8000a26:	21ff      	movs	r1, #255	; 0xff
 8000a28:	4091      	lsls	r1, r2
 8000a2a:	000a      	movs	r2, r1
 8000a2c:	43d2      	mvns	r2, r2
 8000a2e:	401a      	ands	r2, r3
 8000a30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	019b      	lsls	r3, r3, #6
 8000a36:	22ff      	movs	r2, #255	; 0xff
 8000a38:	401a      	ands	r2, r3
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	0018      	movs	r0, r3
 8000a40:	2303      	movs	r3, #3
 8000a42:	4003      	ands	r3, r0
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a48:	481f      	ldr	r0, [pc, #124]	; (8000ac8 <__NVIC_SetPriority+0xd4>)
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	b25b      	sxtb	r3, r3
 8000a50:	089b      	lsrs	r3, r3, #2
 8000a52:	430a      	orrs	r2, r1
 8000a54:	33c0      	adds	r3, #192	; 0xc0
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a5a:	e031      	b.n	8000ac0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a5c:	4a1b      	ldr	r2, [pc, #108]	; (8000acc <__NVIC_SetPriority+0xd8>)
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	0019      	movs	r1, r3
 8000a64:	230f      	movs	r3, #15
 8000a66:	400b      	ands	r3, r1
 8000a68:	3b08      	subs	r3, #8
 8000a6a:	089b      	lsrs	r3, r3, #2
 8000a6c:	3306      	adds	r3, #6
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	18d3      	adds	r3, r2, r3
 8000a72:	3304      	adds	r3, #4
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	1dfa      	adds	r2, r7, #7
 8000a78:	7812      	ldrb	r2, [r2, #0]
 8000a7a:	0011      	movs	r1, r2
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	400a      	ands	r2, r1
 8000a80:	00d2      	lsls	r2, r2, #3
 8000a82:	21ff      	movs	r1, #255	; 0xff
 8000a84:	4091      	lsls	r1, r2
 8000a86:	000a      	movs	r2, r1
 8000a88:	43d2      	mvns	r2, r2
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	019b      	lsls	r3, r3, #6
 8000a92:	22ff      	movs	r2, #255	; 0xff
 8000a94:	401a      	ands	r2, r3
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	4003      	ands	r3, r0
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa4:	4809      	ldr	r0, [pc, #36]	; (8000acc <__NVIC_SetPriority+0xd8>)
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	001c      	movs	r4, r3
 8000aac:	230f      	movs	r3, #15
 8000aae:	4023      	ands	r3, r4
 8000ab0:	3b08      	subs	r3, #8
 8000ab2:	089b      	lsrs	r3, r3, #2
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	3306      	adds	r3, #6
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	18c3      	adds	r3, r0, r3
 8000abc:	3304      	adds	r3, #4
 8000abe:	601a      	str	r2, [r3, #0]
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b003      	add	sp, #12
 8000ac6:	bd90      	pop	{r4, r7, pc}
 8000ac8:	e000e100 	.word	0xe000e100
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <LL_RCC_HSI_Enable+0x18>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <LL_RCC_HSI_Enable+0x18>)
 8000ada:	2101      	movs	r1, #1
 8000adc:	430a      	orrs	r2, r1
 8000ade:	601a      	str	r2, [r3, #0]
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	40021000 	.word	0x40021000

08000aec <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <LL_RCC_HSI_IsReady+0x1c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2204      	movs	r2, #4
 8000af6:	4013      	ands	r3, r2
 8000af8:	2b04      	cmp	r3, #4
 8000afa:	d101      	bne.n	8000b00 <LL_RCC_HSI_IsReady+0x14>
 8000afc:	2301      	movs	r3, #1
 8000afe:	e000      	b.n	8000b02 <LL_RCC_HSI_IsReady+0x16>
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	0018      	movs	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40021000 	.word	0x40021000

08000b0c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	0019      	movs	r1, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	021a      	lsls	r2, r3, #8
 8000b22:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000b24:	430a      	orrs	r2, r1
 8000b26:	605a      	str	r2, [r3, #4]
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40021000 	.word	0x40021000
 8000b34:	ffffe0ff 	.word	0xffffe0ff

08000b38 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <LL_RCC_SetSysClkSource+0x24>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	2203      	movs	r2, #3
 8000b46:	4393      	bics	r3, r2
 8000b48:	0019      	movs	r1, r3
 8000b4a:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <LL_RCC_SetSysClkSource+0x24>)
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	60da      	str	r2, [r3, #12]
}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b002      	add	sp, #8
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	40021000 	.word	0x40021000

08000b60 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <LL_RCC_GetSysClkSource+0x14>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	220c      	movs	r2, #12
 8000b6a:	4013      	ands	r3, r2
}
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	40021000 	.word	0x40021000

08000b78 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <LL_RCC_SetAHBPrescaler+0x24>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	22f0      	movs	r2, #240	; 0xf0
 8000b86:	4393      	bics	r3, r2
 8000b88:	0019      	movs	r1, r3
 8000b8a:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <LL_RCC_SetAHBPrescaler+0x24>)
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	60da      	str	r2, [r3, #12]
}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b002      	add	sp, #8
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <LL_RCC_SetAPB1Prescaler+0x28>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	0019      	movs	r1, r3
 8000bb2:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	60da      	str	r2, [r3, #12]
}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b002      	add	sp, #8
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	fffff8ff 	.word	0xfffff8ff

08000bcc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <LL_RCC_SetAPB2Prescaler+0x28>)
 8000bda:	4013      	ands	r3, r2
 8000bdc:	0019      	movs	r1, r3
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	430a      	orrs	r2, r1
 8000be4:	60da      	str	r2, [r3, #12]
}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b002      	add	sp, #8
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	ffffc7ff 	.word	0xffffc7ff

08000bf8 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	0c12      	lsrs	r2, r2, #16
 8000c08:	43d2      	mvns	r2, r2
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	0011      	movs	r1, r2
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	041b      	lsls	r3, r3, #16
 8000c12:	0c1a      	lsrs	r2, r3, #16
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000c16:	430a      	orrs	r2, r1
 8000c18:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b002      	add	sp, #8
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	40021000 	.word	0x40021000

08000c28 <LL_APB1_GRP1_EnableClock>:
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <LL_APB1_GRP1_EnableClock+0x28>)
 8000c32:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <LL_APB1_GRP1_EnableClock+0x28>)
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <LL_APB1_GRP1_EnableClock+0x28>)
 8000c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	4013      	ands	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c46:	68fb      	ldr	r3, [r7, #12]
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b004      	add	sp, #16
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40021000 	.word	0x40021000

08000c54 <LL_APB2_GRP1_EnableClock>:
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <LL_APB2_GRP1_EnableClock+0x28>)
 8000c5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <LL_APB2_GRP1_EnableClock+0x28>)
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	430a      	orrs	r2, r1
 8000c66:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <LL_APB2_GRP1_EnableClock+0x28>)
 8000c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	b004      	add	sp, #16
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40021000 	.word	0x40021000

08000c80 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <LL_FLASH_SetLatency+0x24>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4393      	bics	r3, r2
 8000c90:	0019      	movs	r1, r3
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <LL_FLASH_SetLatency+0x24>)
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	430a      	orrs	r2, r1
 8000c98:	601a      	str	r2, [r3, #0]
}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b002      	add	sp, #8
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	40022000 	.word	0x40022000

08000ca8 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <LL_FLASH_GetLatency+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	4013      	ands	r3, r2
}
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	40022000 	.word	0x40022000

08000cc0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a06      	ldr	r2, [pc, #24]	; (8000ce8 <LL_PWR_SetRegulVoltageScaling+0x28>)
 8000cce:	4013      	ands	r3, r2
 8000cd0:	0019      	movs	r1, r3
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	601a      	str	r2, [r3, #0]
}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b002      	add	sp, #8
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	40007000 	.word	0x40007000
 8000ce8:	ffffe7ff 	.word	0xffffe7ff

08000cec <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOSF       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <LL_PWR_IsActiveFlag_VOS+0x1c>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2210      	movs	r2, #16
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	3b10      	subs	r3, #16
 8000cfa:	425a      	negs	r2, r3
 8000cfc:	4153      	adcs	r3, r2
 8000cfe:	b2db      	uxtb	r3, r3
}
 8000d00:	0018      	movs	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	40007000 	.word	0x40007000

08000d0c <LL_USART_EnableIT_RXNE>:
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d14:	f3ef 8310 	mrs	r3, PRIMASK
 8000d18:	60bb      	str	r3, [r7, #8]
  return(result);
 8000d1a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	2301      	movs	r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f383 8810 	msr	PRIMASK, r3
}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2220      	movs	r2, #32
 8000d30:	431a      	orrs	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	f383 8810 	msr	PRIMASK, r3
}
 8000d40:	46c0      	nop			; (mov r8, r8)
}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b006      	add	sp, #24
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000d50:	2001      	movs	r0, #1
 8000d52:	f7ff ff7f 	bl	8000c54 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000d56:	2380      	movs	r3, #128	; 0x80
 8000d58:	055b      	lsls	r3, r3, #21
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f7ff ff64 	bl	8000c28 <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, 3);
 8000d60:	2301      	movs	r3, #1
 8000d62:	425b      	negs	r3, r3
 8000d64:	2103      	movs	r1, #3
 8000d66:	0018      	movs	r0, r3
 8000d68:	f7ff fe44 	bl	80009f4 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6c:	f000 f820 	bl	8000db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d70:	f7ff fd98 	bl	80008a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d74:	f000 fb62 	bl	800143c <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000d78:	f7ff fcd4 	bl	8000724 <MX_ADC_Init>
  MX_TIM2_Init();
 8000d7c:	f000 fa47 	bl	800120e <MX_TIM2_Init>
  MX_TIM21_Init();
 8000d80:	f000 facc 	bl	800131c <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */

  LedStart();
 8000d84:	f7ff fde8 	bl	8000958 <LedStart>
  ShellInit(&hShell, &SerialTransmit);
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <main+0x58>)
 8000d8a:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <main+0x5c>)
 8000d8c:	0011      	movs	r1, r2
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f7ff fb32 	bl	80003f8 <ShellInit>
  LL_USART_EnableIT_RXNE(USART2);
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <main+0x60>)
 8000d96:	0018      	movs	r0, r3
 8000d98:	f7ff ffb8 	bl	8000d0c <LL_USART_EnableIT_RXNE>
  TimeBaseStartIT();
 8000d9c:	f7ff fbf4 	bl	8000588 <TimeBaseStartIT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <main+0x54>
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	08000275 	.word	0x08000275
 8000da8:	20000074 	.word	0x20000074
 8000dac:	40004400 	.word	0x40004400

08000db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff ff63 	bl	8000c80 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	f7ff ff74 	bl	8000ca8 <LL_FLASH_GetLatency>
 8000dc0:	1e03      	subs	r3, r0, #0
 8000dc2:	d1fb      	bne.n	8000dbc <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000dc4:	2380      	movs	r3, #128	; 0x80
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f7ff ff79 	bl	8000cc0 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	f7ff ff8c 	bl	8000cec <LL_PWR_IsActiveFlag_VOS>
 8000dd4:	1e03      	subs	r3, r0, #0
 8000dd6:	d1fb      	bne.n	8000dd0 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_HSI_Enable();
 8000dd8:	f7ff fe7a 	bl	8000ad0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	f7ff fe85 	bl	8000aec <LL_RCC_HSI_IsReady>
 8000de2:	0003      	movs	r3, r0
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d1fa      	bne.n	8000dde <SystemClock_Config+0x2e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000de8:	2010      	movs	r0, #16
 8000dea:	f7ff fe8f 	bl	8000b0c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f7ff fec2 	bl	8000b78 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000df4:	2000      	movs	r0, #0
 8000df6:	f7ff fed3 	bl	8000ba0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff fee6 	bl	8000bcc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000e00:	2001      	movs	r0, #1
 8000e02:	f7ff fe99 	bl	8000b38 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	f7ff feaa 	bl	8000b60 <LL_RCC_GetSysClkSource>
 8000e0c:	0003      	movs	r3, r0
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	d1fa      	bne.n	8000e08 <SystemClock_Config+0x58>
  {

  }

  LL_Init1msTick(16000000);
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <SystemClock_Config+0x84>)
 8000e14:	0018      	movs	r0, r3
 8000e16:	f001 f9fb 	bl	8002210 <LL_Init1msTick>

  LL_SetSystemCoreClock(16000000);
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <SystemClock_Config+0x84>)
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f001 fa07 	bl	8002230 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000e22:	23c0      	movs	r3, #192	; 0xc0
 8000e24:	031b      	lsls	r3, r3, #12
 8000e26:	0018      	movs	r0, r3
 8000e28:	f7ff fee6 	bl	8000bf8 <LL_RCC_SetUSARTClockSource>
}
 8000e2c:	46c0      	nop			; (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	00f42400 	.word	0x00f42400

08000e38 <LL_TIM_ClearFlag_UPDATE>:
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2202      	movs	r2, #2
 8000e44:	4252      	negs	r2, r2
 8000e46:	611a      	str	r2, [r3, #16]
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e54:	e7fe      	b.n	8000e54 <NMI_Handler+0x4>

08000e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <HardFault_Handler+0x4>

08000e5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e60:	46c0      	nop			; (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM21);
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <TIM21_IRQHandler+0x18>)
 8000e82:	0018      	movs	r0, r3
 8000e84:	f7ff ffd8 	bl	8000e38 <LL_TIM_ClearFlag_UPDATE>
	LedPulse();
 8000e88:	f7ff fd88 	bl	800099c <LedPulse>
  /* USER CODE END TIM21_IRQn 0 */
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	40010800 	.word	0x40010800

08000e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea0:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <_sbrk+0x5c>)
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <_sbrk+0x60>)
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <_sbrk+0x64>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <_sbrk+0x68>)
 8000eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	18d3      	adds	r3, r2, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d207      	bcs.n	8000ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec8:	f001 f9fc 	bl	80022c4 <__errno>
 8000ecc:	0003      	movs	r3, r0
 8000ece:	220c      	movs	r2, #12
 8000ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	425b      	negs	r3, r3
 8000ed6:	e009      	b.n	8000eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	18d2      	adds	r2, r2, r3
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <_sbrk+0x64>)
 8000ee8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000eea:	68fb      	ldr	r3, [r7, #12]
}
 8000eec:	0018      	movs	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b006      	add	sp, #24
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000800 	.word	0x20000800
 8000ef8:	00000350 	.word	0x00000350
 8000efc:	200002b4 	.word	0x200002b4
 8000f00:	20000400 	.word	0x20000400

08000f04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <__NVIC_EnableIRQ>:
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	0002      	movs	r2, r0
 8000f18:	1dfb      	adds	r3, r7, #7
 8000f1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f1c:	1dfb      	adds	r3, r7, #7
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b7f      	cmp	r3, #127	; 0x7f
 8000f22:	d809      	bhi.n	8000f38 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f24:	1dfb      	adds	r3, r7, #7
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	001a      	movs	r2, r3
 8000f2a:	231f      	movs	r3, #31
 8000f2c:	401a      	ands	r2, r3
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <__NVIC_EnableIRQ+0x30>)
 8000f30:	2101      	movs	r1, #1
 8000f32:	4091      	lsls	r1, r2
 8000f34:	000a      	movs	r2, r1
 8000f36:	601a      	str	r2, [r3, #0]
}
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b002      	add	sp, #8
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	e000e100 	.word	0xe000e100

08000f44 <__NVIC_SetPriority>:
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	0002      	movs	r2, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f52:	1dfb      	adds	r3, r7, #7
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b7f      	cmp	r3, #127	; 0x7f
 8000f58:	d828      	bhi.n	8000fac <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f5a:	4a2f      	ldr	r2, [pc, #188]	; (8001018 <__NVIC_SetPriority+0xd4>)
 8000f5c:	1dfb      	adds	r3, r7, #7
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b25b      	sxtb	r3, r3
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	33c0      	adds	r3, #192	; 0xc0
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	589b      	ldr	r3, [r3, r2]
 8000f6a:	1dfa      	adds	r2, r7, #7
 8000f6c:	7812      	ldrb	r2, [r2, #0]
 8000f6e:	0011      	movs	r1, r2
 8000f70:	2203      	movs	r2, #3
 8000f72:	400a      	ands	r2, r1
 8000f74:	00d2      	lsls	r2, r2, #3
 8000f76:	21ff      	movs	r1, #255	; 0xff
 8000f78:	4091      	lsls	r1, r2
 8000f7a:	000a      	movs	r2, r1
 8000f7c:	43d2      	mvns	r2, r2
 8000f7e:	401a      	ands	r2, r3
 8000f80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	019b      	lsls	r3, r3, #6
 8000f86:	22ff      	movs	r2, #255	; 0xff
 8000f88:	401a      	ands	r2, r3
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	0018      	movs	r0, r3
 8000f90:	2303      	movs	r3, #3
 8000f92:	4003      	ands	r3, r0
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f98:	481f      	ldr	r0, [pc, #124]	; (8001018 <__NVIC_SetPriority+0xd4>)
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	b25b      	sxtb	r3, r3
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	33c0      	adds	r3, #192	; 0xc0
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	501a      	str	r2, [r3, r0]
}
 8000faa:	e031      	b.n	8001010 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fac:	4a1b      	ldr	r2, [pc, #108]	; (800101c <__NVIC_SetPriority+0xd8>)
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	0019      	movs	r1, r3
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	400b      	ands	r3, r1
 8000fb8:	3b08      	subs	r3, #8
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	3306      	adds	r3, #6
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	18d3      	adds	r3, r2, r3
 8000fc2:	3304      	adds	r3, #4
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	1dfa      	adds	r2, r7, #7
 8000fc8:	7812      	ldrb	r2, [r2, #0]
 8000fca:	0011      	movs	r1, r2
 8000fcc:	2203      	movs	r2, #3
 8000fce:	400a      	ands	r2, r1
 8000fd0:	00d2      	lsls	r2, r2, #3
 8000fd2:	21ff      	movs	r1, #255	; 0xff
 8000fd4:	4091      	lsls	r1, r2
 8000fd6:	000a      	movs	r2, r1
 8000fd8:	43d2      	mvns	r2, r2
 8000fda:	401a      	ands	r2, r3
 8000fdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	019b      	lsls	r3, r3, #6
 8000fe2:	22ff      	movs	r2, #255	; 0xff
 8000fe4:	401a      	ands	r2, r3
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	0018      	movs	r0, r3
 8000fec:	2303      	movs	r3, #3
 8000fee:	4003      	ands	r3, r0
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff4:	4809      	ldr	r0, [pc, #36]	; (800101c <__NVIC_SetPriority+0xd8>)
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	001c      	movs	r4, r3
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	4023      	ands	r3, r4
 8001000:	3b08      	subs	r3, #8
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	430a      	orrs	r2, r1
 8001006:	3306      	adds	r3, #6
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	18c3      	adds	r3, r0, r3
 800100c:	3304      	adds	r3, #4
 800100e:	601a      	str	r2, [r3, #0]
}
 8001010:	46c0      	nop			; (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	b003      	add	sp, #12
 8001016:	bd90      	pop	{r4, r7, pc}
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <LL_APB1_GRP1_EnableClock>:
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001028:	4b07      	ldr	r3, [pc, #28]	; (8001048 <LL_APB1_GRP1_EnableClock+0x28>)
 800102a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <LL_APB1_GRP1_EnableClock+0x28>)
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	430a      	orrs	r2, r1
 8001032:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <LL_APB1_GRP1_EnableClock+0x28>)
 8001036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	4013      	ands	r3, r2
 800103c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	46c0      	nop			; (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	b004      	add	sp, #16
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40021000 	.word	0x40021000

0800104c <LL_APB2_GRP1_EnableClock>:
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <LL_APB2_GRP1_EnableClock+0x28>)
 8001056:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <LL_APB2_GRP1_EnableClock+0x28>)
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	430a      	orrs	r2, r1
 800105e:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <LL_APB2_GRP1_EnableClock+0x28>)
 8001062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	4013      	ands	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b004      	add	sp, #16
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40021000 	.word	0x40021000

08001078 <LL_IOP_GRP1_EnableClock>:
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <LL_IOP_GRP1_EnableClock+0x28>)
 8001082:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <LL_IOP_GRP1_EnableClock+0x28>)
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	430a      	orrs	r2, r1
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <LL_IOP_GRP1_EnableClock+0x28>)
 800108e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	4013      	ands	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b004      	add	sp, #16
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40021000 	.word	0x40021000

080010a4 <LL_TIM_DisableARRPreload>:
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	4393      	bics	r3, r2
 80010b4:	001a      	movs	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	601a      	str	r2, [r3, #0]
}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	b002      	add	sp, #8
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <LL_TIM_OC_DisableFast>:
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d00d      	beq.n	80010f0 <LL_TIM_OC_DisableFast+0x2c>
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	2b10      	cmp	r3, #16
 80010d8:	d008      	beq.n	80010ec <LL_TIM_OC_DisableFast+0x28>
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d101      	bne.n	80010e8 <LL_TIM_OC_DisableFast+0x24>
 80010e4:	2304      	movs	r3, #4
 80010e6:	e004      	b.n	80010f2 <LL_TIM_OC_DisableFast+0x2e>
 80010e8:	2306      	movs	r3, #6
 80010ea:	e002      	b.n	80010f2 <LL_TIM_OC_DisableFast+0x2e>
 80010ec:	2302      	movs	r3, #2
 80010ee:	e000      	b.n	80010f2 <LL_TIM_OC_DisableFast+0x2e>
 80010f0:	2300      	movs	r3, #0
 80010f2:	200f      	movs	r0, #15
 80010f4:	183a      	adds	r2, r7, r0
 80010f6:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3318      	adds	r3, #24
 80010fc:	0019      	movs	r1, r3
 80010fe:	183b      	adds	r3, r7, r0
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <LL_TIM_OC_DisableFast+0x68>)
 8001104:	5cd3      	ldrb	r3, [r2, r3]
 8001106:	18cb      	adds	r3, r1, r3
 8001108:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	183a      	adds	r2, r7, r0
 8001110:	7812      	ldrb	r2, [r2, #0]
 8001112:	4907      	ldr	r1, [pc, #28]	; (8001130 <LL_TIM_OC_DisableFast+0x6c>)
 8001114:	5c8a      	ldrb	r2, [r1, r2]
 8001116:	0011      	movs	r1, r2
 8001118:	2204      	movs	r2, #4
 800111a:	408a      	lsls	r2, r1
 800111c:	43d2      	mvns	r2, r2
 800111e:	401a      	ands	r2, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	601a      	str	r2, [r3, #0]
}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	b004      	add	sp, #16
 800112a:	bd80      	pop	{r7, pc}
 800112c:	08002ce8 	.word	0x08002ce8
 8001130:	08002cf0 	.word	0x08002cf0

08001134 <LL_TIM_OC_EnablePreload>:
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d00d      	beq.n	8001160 <LL_TIM_OC_EnablePreload+0x2c>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	2b10      	cmp	r3, #16
 8001148:	d008      	beq.n	800115c <LL_TIM_OC_EnablePreload+0x28>
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	429a      	cmp	r2, r3
 8001152:	d101      	bne.n	8001158 <LL_TIM_OC_EnablePreload+0x24>
 8001154:	2304      	movs	r3, #4
 8001156:	e004      	b.n	8001162 <LL_TIM_OC_EnablePreload+0x2e>
 8001158:	2306      	movs	r3, #6
 800115a:	e002      	b.n	8001162 <LL_TIM_OC_EnablePreload+0x2e>
 800115c:	2302      	movs	r3, #2
 800115e:	e000      	b.n	8001162 <LL_TIM_OC_EnablePreload+0x2e>
 8001160:	2300      	movs	r3, #0
 8001162:	200f      	movs	r0, #15
 8001164:	183a      	adds	r2, r7, r0
 8001166:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3318      	adds	r3, #24
 800116c:	0019      	movs	r1, r3
 800116e:	183b      	adds	r3, r7, r0
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	4a0a      	ldr	r2, [pc, #40]	; (800119c <LL_TIM_OC_EnablePreload+0x68>)
 8001174:	5cd3      	ldrb	r3, [r2, r3]
 8001176:	18cb      	adds	r3, r1, r3
 8001178:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	183b      	adds	r3, r7, r0
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	4907      	ldr	r1, [pc, #28]	; (80011a0 <LL_TIM_OC_EnablePreload+0x6c>)
 8001184:	5ccb      	ldrb	r3, [r1, r3]
 8001186:	0019      	movs	r1, r3
 8001188:	2308      	movs	r3, #8
 800118a:	408b      	lsls	r3, r1
 800118c:	431a      	orrs	r2, r3
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	601a      	str	r2, [r3, #0]
}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	46bd      	mov	sp, r7
 8001196:	b004      	add	sp, #16
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	08002ce8 	.word	0x08002ce8
 80011a0:	08002cf0 	.word	0x08002cf0

080011a4 <LL_TIM_SetClockSource>:
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <LL_TIM_SetClockSource+0x24>)
 80011b4:	401a      	ands	r2, r3
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	431a      	orrs	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	609a      	str	r2, [r3, #8]
}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b002      	add	sp, #8
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	ffffbff8 	.word	0xffffbff8

080011cc <LL_TIM_SetTriggerOutput>:
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2270      	movs	r2, #112	; 0x70
 80011dc:	4393      	bics	r3, r2
 80011de:	001a      	movs	r2, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	605a      	str	r2, [r3, #4]
}
 80011e8:	46c0      	nop			; (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b002      	add	sp, #8
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <LL_TIM_DisableMasterSlaveMode>:
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	2280      	movs	r2, #128	; 0x80
 80011fe:	4393      	bics	r3, r2
 8001200:	001a      	movs	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	609a      	str	r2, [r3, #8]
}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b002      	add	sp, #8
 800120c:	bd80      	pop	{r7, pc}

0800120e <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800120e:	b5b0      	push	{r4, r5, r7, lr}
 8001210:	b08e      	sub	sp, #56	; 0x38
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001214:	2428      	movs	r4, #40	; 0x28
 8001216:	193b      	adds	r3, r7, r4
 8001218:	0018      	movs	r0, r3
 800121a:	2310      	movs	r3, #16
 800121c:	001a      	movs	r2, r3
 800121e:	2100      	movs	r1, #0
 8001220:	f001 f848 	bl	80022b4 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001224:	2518      	movs	r5, #24
 8001226:	197b      	adds	r3, r7, r5
 8001228:	0018      	movs	r0, r3
 800122a:	2310      	movs	r3, #16
 800122c:	001a      	movs	r2, r3
 800122e:	2100      	movs	r1, #0
 8001230:	f001 f840 	bl	80022b4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	003b      	movs	r3, r7
 8001236:	0018      	movs	r0, r3
 8001238:	2318      	movs	r3, #24
 800123a:	001a      	movs	r2, r3
 800123c:	2100      	movs	r1, #0
 800123e:	f001 f839 	bl	80022b4 <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001242:	2001      	movs	r0, #1
 8001244:	f7ff feec 	bl	8001020 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 63;
 8001248:	193b      	adds	r3, r7, r4
 800124a:	223f      	movs	r2, #63	; 0x3f
 800124c:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800124e:	193b      	adds	r3, r7, r4
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 255;
 8001254:	193b      	adds	r3, r7, r4
 8001256:	22ff      	movs	r2, #255	; 0xff
 8001258:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800125a:	193b      	adds	r3, r7, r4
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001260:	193a      	adds	r2, r7, r4
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	05db      	lsls	r3, r3, #23
 8001266:	0011      	movs	r1, r2
 8001268:	0018      	movs	r0, r3
 800126a:	f000 fd1d 	bl	8001ca8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	05db      	lsls	r3, r3, #23
 8001272:	0018      	movs	r0, r3
 8001274:	f7ff ff16 	bl	80010a4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	05db      	lsls	r3, r3, #23
 800127c:	2100      	movs	r1, #0
 800127e:	0018      	movs	r0, r3
 8001280:	f7ff ff90 	bl	80011a4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	05db      	lsls	r3, r3, #23
 8001288:	2101      	movs	r1, #1
 800128a:	0018      	movs	r0, r3
 800128c:	f7ff ff52 	bl	8001134 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001290:	0029      	movs	r1, r5
 8001292:	187b      	adds	r3, r7, r1
 8001294:	2260      	movs	r2, #96	; 0x60
 8001296:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001298:	187b      	adds	r3, r7, r1
 800129a:	2200      	movs	r2, #0
 800129c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.CompareValue = 0;
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80012a4:	187b      	adds	r3, r7, r1
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80012aa:	187a      	adds	r2, r7, r1
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	05db      	lsls	r3, r3, #23
 80012b0:	2101      	movs	r1, #1
 80012b2:	0018      	movs	r0, r3
 80012b4:	f000 fd40 	bl	8001d38 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	05db      	lsls	r3, r3, #23
 80012bc:	2101      	movs	r1, #1
 80012be:	0018      	movs	r0, r3
 80012c0:	f7ff ff00 	bl	80010c4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	05db      	lsls	r3, r3, #23
 80012c8:	2100      	movs	r1, #0
 80012ca:	0018      	movs	r0, r3
 80012cc:	f7ff ff7e 	bl	80011cc <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	05db      	lsls	r3, r3, #23
 80012d4:	0018      	movs	r0, r3
 80012d6:	f7ff ff8b 	bl	80011f0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80012da:	2001      	movs	r0, #1
 80012dc:	f7ff fecc 	bl	8001078 <LL_IOP_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA8     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80012e0:	003b      	movs	r3, r7
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	0052      	lsls	r2, r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012e8:	003b      	movs	r3, r7
 80012ea:	2202      	movs	r2, #2
 80012ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012ee:	003b      	movs	r3, r7
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012f4:	003b      	movs	r3, r7
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012fa:	003b      	movs	r3, r7
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001300:	003b      	movs	r3, r7
 8001302:	2205      	movs	r2, #5
 8001304:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	003a      	movs	r2, r7
 8001308:	23a0      	movs	r3, #160	; 0xa0
 800130a:	05db      	lsls	r3, r3, #23
 800130c:	0011      	movs	r1, r2
 800130e:	0018      	movs	r0, r3
 8001310:	f000 fa7f 	bl	8001812 <LL_GPIO_Init>

}
 8001314:	46c0      	nop			; (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	b00e      	add	sp, #56	; 0x38
 800131a:	bdb0      	pop	{r4, r5, r7, pc}

0800131c <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001322:	003b      	movs	r3, r7
 8001324:	0018      	movs	r0, r3
 8001326:	2310      	movs	r3, #16
 8001328:	001a      	movs	r2, r3
 800132a:	2100      	movs	r1, #0
 800132c:	f000 ffc2 	bl	80022b4 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM21);
 8001330:	2004      	movs	r0, #4
 8001332:	f7ff fe8b 	bl	800104c <LL_APB2_GRP1_EnableClock>

  /* TIM21 interrupt Init */
  NVIC_SetPriority(TIM21_IRQn, 0);
 8001336:	2100      	movs	r1, #0
 8001338:	2014      	movs	r0, #20
 800133a:	f7ff fe03 	bl	8000f44 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM21_IRQn);
 800133e:	2014      	movs	r0, #20
 8001340:	f7ff fde6 	bl	8000f10 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  TIM_InitStruct.Prescaler = 63;
 8001344:	003b      	movs	r3, r7
 8001346:	223f      	movs	r2, #63	; 0x3f
 8001348:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800134a:	003b      	movs	r3, r7
 800134c:	2200      	movs	r2, #0
 800134e:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 255;
 8001350:	003b      	movs	r3, r7
 8001352:	22ff      	movs	r2, #255	; 0xff
 8001354:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001356:	003b      	movs	r3, r7
 8001358:	2200      	movs	r2, #0
 800135a:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM21, &TIM_InitStruct);
 800135c:	003b      	movs	r3, r7
 800135e:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <MX_TIM21_Init+0x78>)
 8001360:	0019      	movs	r1, r3
 8001362:	0010      	movs	r0, r2
 8001364:	f000 fca0 	bl	8001ca8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM21);
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <MX_TIM21_Init+0x78>)
 800136a:	0018      	movs	r0, r3
 800136c:	f7ff fe9a 	bl	80010a4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM21, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <MX_TIM21_Init+0x78>)
 8001372:	2100      	movs	r1, #0
 8001374:	0018      	movs	r0, r3
 8001376:	f7ff ff15 	bl	80011a4 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM21, LL_TIM_TRGO_RESET);
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_TIM21_Init+0x78>)
 800137c:	2100      	movs	r1, #0
 800137e:	0018      	movs	r0, r3
 8001380:	f7ff ff24 	bl	80011cc <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM21);
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <MX_TIM21_Init+0x78>)
 8001386:	0018      	movs	r0, r3
 8001388:	f7ff ff32 	bl	80011f0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 800138c:	46c0      	nop			; (mov r8, r8)
 800138e:	46bd      	mov	sp, r7
 8001390:	b004      	add	sp, #16
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40010800 	.word	0x40010800

08001398 <LL_APB1_GRP1_EnableClock>:
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <LL_APB1_GRP1_EnableClock+0x28>)
 80013a2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <LL_APB1_GRP1_EnableClock+0x28>)
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <LL_APB1_GRP1_EnableClock+0x28>)
 80013ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	4013      	ands	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	46c0      	nop			; (mov r8, r8)
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b004      	add	sp, #16
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40021000 	.word	0x40021000

080013c4 <LL_IOP_GRP1_EnableClock>:
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <LL_IOP_GRP1_EnableClock+0x28>)
 80013ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <LL_IOP_GRP1_EnableClock+0x28>)
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <LL_IOP_GRP1_EnableClock+0x28>)
 80013da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	4013      	ands	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013e2:	68fb      	ldr	r3, [r7, #12]
}
 80013e4:	46c0      	nop			; (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b004      	add	sp, #16
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000

080013f0 <LL_USART_Enable>:
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2201      	movs	r2, #1
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	601a      	str	r2, [r3, #0]
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	b002      	add	sp, #8
 800140a:	bd80      	pop	{r7, pc}

0800140c <LL_USART_ConfigAsyncMode>:
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <LL_USART_ConfigAsyncMode+0x2c>)
 800141a:	401a      	ands	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	222a      	movs	r2, #42	; 0x2a
 8001426:	4393      	bics	r3, r2
 8001428:	001a      	movs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	609a      	str	r2, [r3, #8]
}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	b002      	add	sp, #8
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	ffffb7ff 	.word	0xffffb7ff

0800143c <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b08f      	sub	sp, #60	; 0x3c
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001442:	241c      	movs	r4, #28
 8001444:	193b      	adds	r3, r7, r4
 8001446:	0018      	movs	r0, r3
 8001448:	231c      	movs	r3, #28
 800144a:	001a      	movs	r2, r3
 800144c:	2100      	movs	r1, #0
 800144e:	f000 ff31 	bl	80022b4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	0018      	movs	r0, r3
 8001456:	2318      	movs	r3, #24
 8001458:	001a      	movs	r2, r3
 800145a:	2100      	movs	r1, #0
 800145c:	f000 ff2a 	bl	80022b4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	029b      	lsls	r3, r3, #10
 8001464:	0018      	movs	r0, r3
 8001466:	f7ff ff97 	bl	8001398 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800146a:	2001      	movs	r0, #1
 800146c:	f7ff ffaa 	bl	80013c4 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA0-CK_IN   ------> USART2_RX
  PA2   ------> USART2_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2202      	movs	r2, #2
 800147a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2203      	movs	r2, #3
 8001480:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2200      	movs	r2, #0
 8001492:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	1d3a      	adds	r2, r7, #4
 8001496:	23a0      	movs	r3, #160	; 0xa0
 8001498:	05db      	lsls	r3, r3, #23
 800149a:	0011      	movs	r1, r2
 800149c:	0018      	movs	r0, r3
 800149e:	f000 f9b8 	bl	8001812 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2204      	movs	r2, #4
 80014a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2202      	movs	r2, #2
 80014ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2203      	movs	r2, #3
 80014b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2204      	movs	r2, #4
 80014c4:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	1d3a      	adds	r2, r7, #4
 80014c8:	23a0      	movs	r3, #160	; 0xa0
 80014ca:	05db      	lsls	r3, r3, #23
 80014cc:	0011      	movs	r1, r2
 80014ce:	0018      	movs	r0, r3
 80014d0:	f000 f99f 	bl	8001812 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80014d4:	193b      	adds	r3, r7, r4
 80014d6:	22e1      	movs	r2, #225	; 0xe1
 80014d8:	0252      	lsls	r2, r2, #9
 80014da:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80014dc:	0021      	movs	r1, r4
 80014de:	187b      	adds	r3, r7, r1
 80014e0:	2200      	movs	r2, #0
 80014e2:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80014e4:	187b      	adds	r3, r7, r1
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80014ea:	187b      	adds	r3, r7, r1
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80014f0:	187b      	adds	r3, r7, r1
 80014f2:	220c      	movs	r2, #12
 80014f4:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80014f6:	187b      	adds	r3, r7, r1
 80014f8:	2200      	movs	r2, #0
 80014fa:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8001502:	187b      	adds	r3, r7, r1
 8001504:	4a08      	ldr	r2, [pc, #32]	; (8001528 <MX_USART2_UART_Init+0xec>)
 8001506:	0019      	movs	r1, r3
 8001508:	0010      	movs	r0, r2
 800150a:	f000 fe0f 	bl	800212c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_USART2_UART_Init+0xec>)
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff ff7b 	bl	800140c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <MX_USART2_UART_Init+0xec>)
 8001518:	0018      	movs	r0, r3
 800151a:	f7ff ff69 	bl	80013f0 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	46bd      	mov	sp, r7
 8001522:	b00f      	add	sp, #60	; 0x3c
 8001524:	bd90      	pop	{r4, r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	40004400 	.word	0x40004400

0800152c <Reset_Handler>:
 800152c:	4813      	ldr	r0, [pc, #76]	; (800157c <LoopForever+0x2>)
 800152e:	4685      	mov	sp, r0
 8001530:	f7ff fce8 	bl	8000f04 <SystemInit>
 8001534:	4812      	ldr	r0, [pc, #72]	; (8001580 <LoopForever+0x6>)
 8001536:	6801      	ldr	r1, [r0, #0]
 8001538:	0e09      	lsrs	r1, r1, #24
 800153a:	4a12      	ldr	r2, [pc, #72]	; (8001584 <LoopForever+0xa>)
 800153c:	4291      	cmp	r1, r2
 800153e:	d105      	bne.n	800154c <ApplicationStart>
 8001540:	4811      	ldr	r0, [pc, #68]	; (8001588 <LoopForever+0xe>)
 8001542:	4912      	ldr	r1, [pc, #72]	; (800158c <LoopForever+0x12>)
 8001544:	6001      	str	r1, [r0, #0]
 8001546:	4812      	ldr	r0, [pc, #72]	; (8001590 <LoopForever+0x16>)
 8001548:	4912      	ldr	r1, [pc, #72]	; (8001594 <LoopForever+0x1a>)
 800154a:	6001      	str	r1, [r0, #0]

0800154c <ApplicationStart>:
 800154c:	4812      	ldr	r0, [pc, #72]	; (8001598 <LoopForever+0x1e>)
 800154e:	4913      	ldr	r1, [pc, #76]	; (800159c <LoopForever+0x22>)
 8001550:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <LoopForever+0x26>)
 8001552:	2300      	movs	r3, #0
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:
 8001556:	58d4      	ldr	r4, [r2, r3]
 8001558:	50c4      	str	r4, [r0, r3]
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:
 800155c:	18c4      	adds	r4, r0, r3
 800155e:	428c      	cmp	r4, r1
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>
 8001562:	4a10      	ldr	r2, [pc, #64]	; (80015a4 <LoopForever+0x2a>)
 8001564:	4c10      	ldr	r4, [pc, #64]	; (80015a8 <LoopForever+0x2e>)
 8001566:	2300      	movs	r3, #0
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:
 800156e:	42a2      	cmp	r2, r4
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>
 8001572:	f000 fead 	bl	80022d0 <__libc_init_array>
 8001576:	f7ff fbe9 	bl	8000d4c <main>

0800157a <LoopForever>:
 800157a:	e7fe      	b.n	800157a <LoopForever>
 800157c:	20000800 	.word	0x20000800
 8001580:	00000004 	.word	0x00000004
 8001584:	0000001f 	.word	0x0000001f
 8001588:	40021034 	.word	0x40021034
 800158c:	00000001 	.word	0x00000001
 8001590:	40010000 	.word	0x40010000
 8001594:	00000000 	.word	0x00000000
 8001598:	20000000 	.word	0x20000000
 800159c:	20000054 	.word	0x20000054
 80015a0:	08002d34 	.word	0x08002d34
 80015a4:	20000054 	.word	0x20000054
 80015a8:	20000400 	.word	0x20000400

080015ac <ADC1_COMP_IRQHandler>:
 80015ac:	e7fe      	b.n	80015ac <ADC1_COMP_IRQHandler>

080015ae <LL_ADC_IsEnabled>:
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2201      	movs	r2, #1
 80015bc:	4013      	ands	r3, r2
 80015be:	3b01      	subs	r3, #1
 80015c0:	425a      	negs	r2, r3
 80015c2:	4153      	adcs	r3, r2
 80015c4:	b2db      	uxtb	r3, r3
}
 80015c6:	0018      	movs	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b002      	add	sp, #8
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80015da:	230f      	movs	r3, #15
 80015dc:	18fb      	adds	r3, r7, r3
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0U)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	0018      	movs	r0, r3
 80015e6:	f7ff ffe2 	bl	80015ae <LL_ADC_IsEnabled>
 80015ea:	1e03      	subs	r3, r0, #0
 80015ec:	d118      	bne.n	8001620 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	4a11      	ldr	r2, [pc, #68]	; (8001638 <LL_ADC_Init+0x68>)
 80015f4:	401a      	ands	r2, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	6859      	ldr	r1, [r3, #4]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	4319      	orrs	r1, r3
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	430b      	orrs	r3, r1
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	60da      	str	r2, [r3, #12]
               ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	089a      	lsrs	r2, r3, #2
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	611a      	str	r2, [r3, #16]
 800161e:	e003      	b.n	8001628 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001620:	230f      	movs	r3, #15
 8001622:	18fb      	adds	r3, r7, r3
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001628:	230f      	movs	r3, #15
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	781b      	ldrb	r3, [r3, #0]
}
 800162e:	0018      	movs	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	b004      	add	sp, #16
 8001634:	bd80      	pop	{r7, pc}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	ffff3fc7 	.word	0xffff3fc7

0800163c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001646:	230f      	movs	r3, #15
 8001648:	18fb      	adds	r3, r7, r3
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0U)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	0018      	movs	r0, r3
 8001652:	f7ff ffac 	bl	80015ae <LL_ADC_IsEnabled>
 8001656:	1e03      	subs	r3, r0, #0
 8001658:	d115      	bne.n	8001686 <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	4a0f      	ldr	r2, [pc, #60]	; (800169c <LL_ADC_REG_Init+0x60>)
 8001660:	401a      	ands	r2, r3
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	6819      	ldr	r1, [r3, #0]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	4319      	orrs	r1, r3
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	4319      	orrs	r1, r3
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	4319      	orrs	r1, r3
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	430b      	orrs	r3, r1
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	e003      	b.n	800168e <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001686:	230f      	movs	r3, #15
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	2201      	movs	r2, #1
 800168c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800168e:	230f      	movs	r3, #15
 8001690:	18fb      	adds	r3, r7, r3
 8001692:	781b      	ldrb	r3, [r3, #0]
}
 8001694:	0018      	movs	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	b004      	add	sp, #16
 800169a:	bd80      	pop	{r7, pc}
 800169c:	fffec23c 	.word	0xfffec23c

080016a0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6819      	ldr	r1, [r3, #0]
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	435b      	muls	r3, r3
 80016b4:	001a      	movs	r2, r3
 80016b6:	0013      	movs	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	189b      	adds	r3, r3, r2
 80016bc:	43db      	mvns	r3, r3
 80016be:	400b      	ands	r3, r1
 80016c0:	001a      	movs	r2, r3
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	435b      	muls	r3, r3
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	434b      	muls	r3, r1
 80016ca:	431a      	orrs	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	601a      	str	r2, [r3, #0]
}
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b004      	add	sp, #16
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	43d2      	mvns	r2, r2
 80016ec:	401a      	ands	r2, r3
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	434b      	muls	r3, r1
 80016f4:	431a      	orrs	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	605a      	str	r2, [r3, #4]
}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b004      	add	sp, #16
 8001700:	bd80      	pop	{r7, pc}

08001702 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b084      	sub	sp, #16
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6899      	ldr	r1, [r3, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	435b      	muls	r3, r3
 8001716:	001a      	movs	r2, r3
 8001718:	0013      	movs	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	189b      	adds	r3, r3, r2
 800171e:	43db      	mvns	r3, r3
 8001720:	400b      	ands	r3, r1
 8001722:	001a      	movs	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	435b      	muls	r3, r3
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	434b      	muls	r3, r1
 800172c:	431a      	orrs	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	609a      	str	r2, [r3, #8]
}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	b004      	add	sp, #16
 8001738:	bd80      	pop	{r7, pc}

0800173a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	68d9      	ldr	r1, [r3, #12]
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	435b      	muls	r3, r3
 800174e:	001a      	movs	r2, r3
 8001750:	0013      	movs	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	189b      	adds	r3, r3, r2
 8001756:	43db      	mvns	r3, r3
 8001758:	400b      	ands	r3, r1
 800175a:	001a      	movs	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	435b      	muls	r3, r3
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	434b      	muls	r3, r1
 8001764:	431a      	orrs	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	60da      	str	r2, [r3, #12]
}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	46bd      	mov	sp, r7
 800176e:	b004      	add	sp, #16
 8001770:	bd80      	pop	{r7, pc}

08001772 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b084      	sub	sp, #16
 8001776:	af00      	add	r7, sp, #0
 8001778:	60f8      	str	r0, [r7, #12]
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6a19      	ldr	r1, [r3, #32]
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	435b      	muls	r3, r3
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	4353      	muls	r3, r2
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	435a      	muls	r2, r3
 800178e:	0013      	movs	r3, r2
 8001790:	011b      	lsls	r3, r3, #4
 8001792:	1a9b      	subs	r3, r3, r2
 8001794:	43db      	mvns	r3, r3
 8001796:	400b      	ands	r3, r1
 8001798:	001a      	movs	r2, r3
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	435b      	muls	r3, r3
 800179e:	68b9      	ldr	r1, [r7, #8]
 80017a0:	434b      	muls	r3, r1
 80017a2:	68b9      	ldr	r1, [r7, #8]
 80017a4:	434b      	muls	r3, r1
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	434b      	muls	r3, r1
 80017aa:	431a      	orrs	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 80017b0:	46c0      	nop			; (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b004      	add	sp, #16
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	0a12      	lsrs	r2, r2, #8
 80017d0:	4353      	muls	r3, r2
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	0a12      	lsrs	r2, r2, #8
 80017d6:	4353      	muls	r3, r2
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	0a12      	lsrs	r2, r2, #8
 80017dc:	435a      	muls	r2, r3
 80017de:	0013      	movs	r3, r2
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	1a9b      	subs	r3, r3, r2
 80017e4:	43db      	mvns	r3, r3
 80017e6:	400b      	ands	r3, r1
 80017e8:	001a      	movs	r2, r3
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	68b9      	ldr	r1, [r7, #8]
 80017f0:	0a09      	lsrs	r1, r1, #8
 80017f2:	434b      	muls	r3, r1
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	0a09      	lsrs	r1, r1, #8
 80017f8:	434b      	muls	r3, r1
 80017fa:	68b9      	ldr	r1, [r7, #8]
 80017fc:	0a09      	lsrs	r1, r1, #8
 80017fe:	434b      	muls	r3, r1
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	434b      	muls	r3, r1
 8001804:	431a      	orrs	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	46bd      	mov	sp, r7
 800180e:	b004      	add	sp, #16
 8001810:	bd80      	pop	{r7, pc}

08001812 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b084      	sub	sp, #16
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001824:	e048      	b.n	80018b8 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2101      	movs	r1, #1
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	4091      	lsls	r1, r2
 8001830:	000a      	movs	r2, r1
 8001832:	4013      	ands	r3, r2
 8001834:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d03a      	beq.n	80018b2 <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d003      	beq.n	800184c <LL_GPIO_Init+0x3a>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d10e      	bne.n	800186a <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	0018      	movs	r0, r3
 8001856:	f7ff ff54 	bl	8001702 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	6819      	ldr	r1, [r3, #0]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	0018      	movs	r0, r3
 8001866:	f7ff ff37 	bl	80016d8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	691a      	ldr	r2, [r3, #16]
 800186e:	68b9      	ldr	r1, [r7, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	0018      	movs	r0, r3
 8001874:	f7ff ff61 	bl	800173a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d111      	bne.n	80018a4 <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	2bff      	cmp	r3, #255	; 0xff
 8001884:	d807      	bhi.n	8001896 <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	695a      	ldr	r2, [r3, #20]
 800188a:	68b9      	ldr	r1, [r7, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	0018      	movs	r0, r3
 8001890:	f7ff ff6f 	bl	8001772 <LL_GPIO_SetAFPin_0_7>
 8001894:	e006      	b.n	80018a4 <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	68b9      	ldr	r1, [r7, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	0018      	movs	r0, r3
 80018a0:	f7ff ff8a 	bl	80017b8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	0018      	movs	r0, r3
 80018ae:	f7ff fef7 	bl	80016a0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3301      	adds	r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	40da      	lsrs	r2, r3
 80018c0:	1e13      	subs	r3, r2, #0
 80018c2:	d1b0      	bne.n	8001826 <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	0018      	movs	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b004      	add	sp, #16
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <LL_RCC_HSI_IsReady>:
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <LL_RCC_HSI_IsReady+0x1c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2204      	movs	r2, #4
 80018da:	4013      	ands	r3, r2
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d101      	bne.n	80018e4 <LL_RCC_HSI_IsReady+0x14>
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <LL_RCC_HSI_IsReady+0x16>
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	0018      	movs	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40021000 	.word	0x40021000

080018f0 <LL_RCC_LSE_IsReady>:
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 80018f4:	4b07      	ldr	r3, [pc, #28]	; (8001914 <LL_RCC_LSE_IsReady+0x24>)
 80018f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	401a      	ands	r2, r3
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	429a      	cmp	r2, r3
 8001904:	d101      	bne.n	800190a <LL_RCC_LSE_IsReady+0x1a>
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <LL_RCC_LSE_IsReady+0x1c>
 800190a:	2300      	movs	r3, #0
}
 800190c:	0018      	movs	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	40021000 	.word	0x40021000

08001918 <LL_RCC_MSI_GetRange>:
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <LL_RCC_MSI_GetRange+0x14>)
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	23e0      	movs	r3, #224	; 0xe0
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	4013      	ands	r3, r2
}
 8001926:	0018      	movs	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40021000 	.word	0x40021000

08001930 <LL_RCC_GetSysClkSource>:
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <LL_RCC_GetSysClkSource+0x14>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	220c      	movs	r2, #12
 800193a:	4013      	ands	r3, r2
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	40021000 	.word	0x40021000

08001948 <LL_RCC_GetAHBPrescaler>:
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <LL_RCC_GetAHBPrescaler+0x14>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	22f0      	movs	r2, #240	; 0xf0
 8001952:	4013      	ands	r3, r2
}
 8001954:	0018      	movs	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	40021000 	.word	0x40021000

08001960 <LL_RCC_GetAPB1Prescaler>:
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	23e0      	movs	r3, #224	; 0xe0
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4013      	ands	r3, r2
}
 800196e:	0018      	movs	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40021000 	.word	0x40021000

08001978 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <LL_RCC_GetUSARTClockSource+0x20>)
 8001982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	401a      	ands	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	041b      	lsls	r3, r3, #16
 800198c:	4313      	orrs	r3, r2
}
 800198e:	0018      	movs	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	b002      	add	sp, #8
 8001994:	bd80      	pop	{r7, pc}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	40021000 	.word	0x40021000

0800199c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <LL_RCC_PLL_GetMainSource+0x14>)
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	025b      	lsls	r3, r3, #9
 80019a8:	4013      	ands	r3, r2
}
 80019aa:	0018      	movs	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40021000 	.word	0x40021000

080019b4 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80019b8:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <LL_RCC_PLL_GetMultiplicator+0x14>)
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	23f0      	movs	r3, #240	; 0xf0
 80019be:	039b      	lsls	r3, r3, #14
 80019c0:	4013      	ands	r3, r2
}
 80019c2:	0018      	movs	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000

080019cc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <LL_RCC_PLL_GetDivider+0x14>)
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	23c0      	movs	r3, #192	; 0xc0
 80019d6:	041b      	lsls	r3, r3, #16
 80019d8:	4013      	ands	r3, r2
}
 80019da:	0018      	movs	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40021000 	.word	0x40021000

080019e4 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2210      	movs	r2, #16
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b10      	cmp	r3, #16
 80019f2:	d101      	bne.n	80019f8 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	0018      	movs	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000

08001a04 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
    }
  }
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b0c      	cmp	r3, #12
 8001a14:	d13c      	bne.n	8001a90 <LL_RCC_GetUSARTClockFreq+0x8c>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f7ff ffad 	bl	8001978 <LL_RCC_GetUSARTClockSource>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	4a1e      	ldr	r2, [pc, #120]	; (8001a9c <LL_RCC_GetUSARTClockFreq+0x98>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d01c      	beq.n	8001a60 <LL_RCC_GetUSARTClockFreq+0x5c>
 8001a26:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <LL_RCC_GetUSARTClockFreq+0x98>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d821      	bhi.n	8001a70 <LL_RCC_GetUSARTClockFreq+0x6c>
 8001a2c:	4a1c      	ldr	r2, [pc, #112]	; (8001aa0 <LL_RCC_GetUSARTClockFreq+0x9c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d003      	beq.n	8001a3a <LL_RCC_GetUSARTClockFreq+0x36>
 8001a32:	4a1c      	ldr	r2, [pc, #112]	; (8001aa4 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d005      	beq.n	8001a44 <LL_RCC_GetUSARTClockFreq+0x40>
 8001a38:	e01a      	b.n	8001a70 <LL_RCC_GetUSARTClockFreq+0x6c>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001a3a:	f000 f839 	bl	8001ab0 <RCC_GetSystemClockFreq>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	60fb      	str	r3, [r7, #12]
        break;
 8001a42:	e025      	b.n	8001a90 <LL_RCC_GetUSARTClockFreq+0x8c>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001a44:	f7ff ff44 	bl	80018d0 <LL_RCC_HSI_IsReady>
 8001a48:	1e03      	subs	r3, r0, #0
 8001a4a:	d01e      	beq.n	8001a8a <LL_RCC_GetUSARTClockFreq+0x86>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001a4c:	f7ff ffca 	bl	80019e4 <LL_RCC_IsActiveFlag_HSIDIV>
 8001a50:	1e03      	subs	r3, r0, #0
 8001a52:	d002      	beq.n	8001a5a <LL_RCC_GetUSARTClockFreq+0x56>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <LL_RCC_GetUSARTClockFreq+0xa4>)
 8001a56:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8001a58:	e017      	b.n	8001a8a <LL_RCC_GetUSARTClockFreq+0x86>
            usart_frequency = HSI_VALUE;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <LL_RCC_GetUSARTClockFreq+0xa8>)
 8001a5c:	60fb      	str	r3, [r7, #12]
        break;
 8001a5e:	e014      	b.n	8001a8a <LL_RCC_GetUSARTClockFreq+0x86>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001a60:	f7ff ff46 	bl	80018f0 <LL_RCC_LSE_IsReady>
 8001a64:	1e03      	subs	r3, r0, #0
 8001a66:	d012      	beq.n	8001a8e <LL_RCC_GetUSARTClockFreq+0x8a>
        {
          usart_frequency = LSE_VALUE;
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001a6e:	e00e      	b.n	8001a8e <LL_RCC_GetUSARTClockFreq+0x8a>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001a70:	f000 f81e 	bl	8001ab0 <RCC_GetSystemClockFreq>
 8001a74:	0003      	movs	r3, r0
 8001a76:	0018      	movs	r0, r3
 8001a78:	f000 f85e 	bl	8001b38 <RCC_GetHCLKClockFreq>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f000 f870 	bl	8001b64 <RCC_GetPCLK1ClockFreq>
 8001a84:	0003      	movs	r3, r0
 8001a86:	60fb      	str	r3, [r7, #12]
        break;
 8001a88:	e002      	b.n	8001a90 <LL_RCC_GetUSARTClockFreq+0x8c>
        break;
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	e000      	b.n	8001a90 <LL_RCC_GetUSARTClockFreq+0x8c>
        break;
 8001a8e:	46c0      	nop			; (mov r8, r8)
    }
  }
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 8001a90:	68fb      	ldr	r3, [r7, #12]
}
 8001a92:	0018      	movs	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b004      	add	sp, #16
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	000c000c 	.word	0x000c000c
 8001aa0:	000c0004 	.word	0x000c0004
 8001aa4:	000c0008 	.word	0x000c0008
 8001aa8:	003d0900 	.word	0x003d0900
 8001aac:	00f42400 	.word	0x00f42400

08001ab0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001ab6:	f7ff ff3b 	bl	8001930 <LL_RCC_GetSysClkSource>
 8001aba:	0003      	movs	r3, r0
 8001abc:	2b0c      	cmp	r3, #12
 8001abe:	d020      	beq.n	8001b02 <RCC_GetSystemClockFreq+0x52>
 8001ac0:	d824      	bhi.n	8001b0c <RCC_GetSystemClockFreq+0x5c>
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d01a      	beq.n	8001afc <RCC_GetSystemClockFreq+0x4c>
 8001ac6:	d821      	bhi.n	8001b0c <RCC_GetSystemClockFreq+0x5c>
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <RCC_GetSystemClockFreq+0x22>
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d00b      	beq.n	8001ae8 <RCC_GetSystemClockFreq+0x38>
 8001ad0:	e01c      	b.n	8001b0c <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001ad2:	f7ff ff21 	bl	8001918 <LL_RCC_MSI_GetRange>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	0b5b      	lsrs	r3, r3, #13
 8001ada:	3301      	adds	r3, #1
 8001adc:	2280      	movs	r2, #128	; 0x80
 8001ade:	0212      	lsls	r2, r2, #8
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	0013      	movs	r3, r2
 8001ae4:	607b      	str	r3, [r7, #4]
      break;
 8001ae6:	e01c      	b.n	8001b22 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001ae8:	f7ff ff7c 	bl	80019e4 <LL_RCC_IsActiveFlag_HSIDIV>
 8001aec:	1e03      	subs	r3, r0, #0
 8001aee:	d002      	beq.n	8001af6 <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <RCC_GetSystemClockFreq+0x7c>)
 8001af2:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8001af4:	e015      	b.n	8001b22 <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <RCC_GetSystemClockFreq+0x80>)
 8001af8:	607b      	str	r3, [r7, #4]
      break;
 8001afa:	e012      	b.n	8001b22 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8001afc:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <RCC_GetSystemClockFreq+0x84>)
 8001afe:	607b      	str	r3, [r7, #4]
      break;
 8001b00:	e00f      	b.n	8001b22 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001b02:	f000 f843 	bl	8001b8c <RCC_PLL_GetFreqDomain_SYS>
 8001b06:	0003      	movs	r3, r0
 8001b08:	607b      	str	r3, [r7, #4]
      break;
 8001b0a:	e00a      	b.n	8001b22 <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001b0c:	f7ff ff04 	bl	8001918 <LL_RCC_MSI_GetRange>
 8001b10:	0003      	movs	r3, r0
 8001b12:	0b5b      	lsrs	r3, r3, #13
 8001b14:	3301      	adds	r3, #1
 8001b16:	2280      	movs	r2, #128	; 0x80
 8001b18:	0212      	lsls	r2, r2, #8
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	0013      	movs	r3, r2
 8001b1e:	607b      	str	r3, [r7, #4]
      break;
 8001b20:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8001b22:	687b      	ldr	r3, [r7, #4]
}
 8001b24:	0018      	movs	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	b002      	add	sp, #8
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	003d0900 	.word	0x003d0900
 8001b30:	00f42400 	.word	0x00f42400
 8001b34:	007a1200 	.word	0x007a1200

08001b38 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001b40:	f7ff ff02 	bl	8001948 <LL_RCC_GetAHBPrescaler>
 8001b44:	0003      	movs	r3, r0
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	220f      	movs	r2, #15
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <RCC_GetHCLKClockFreq+0x28>)
 8001b4e:	5cd3      	ldrb	r3, [r2, r3]
 8001b50:	001a      	movs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	40d3      	lsrs	r3, r2
}
 8001b56:	0018      	movs	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	b002      	add	sp, #8
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	08002cc4 	.word	0x08002cc4

08001b64 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001b6c:	f7ff fef8 	bl	8001960 <LL_RCC_GetAPB1Prescaler>
 8001b70:	0003      	movs	r3, r0
 8001b72:	0a1b      	lsrs	r3, r3, #8
 8001b74:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <RCC_GetPCLK1ClockFreq+0x24>)
 8001b76:	5cd3      	ldrb	r3, [r2, r3]
 8001b78:	001a      	movs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	40d3      	lsrs	r3, r2
}
 8001b7e:	0018      	movs	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b002      	add	sp, #8
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	08002cd4 	.word	0x08002cd4

08001b8c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001b92:	f7ff ff03 	bl	800199c <LL_RCC_PLL_GetMainSource>
 8001b96:	0003      	movs	r3, r0
 8001b98:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d109      	bne.n	8001bb4 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001ba0:	f7ff ff20 	bl	80019e4 <LL_RCC_IsActiveFlag_HSIDIV>
 8001ba4:	1e03      	subs	r3, r0, #0
 8001ba6:	d002      	beq.n	8001bae <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8001ba8:	4b10      	ldr	r3, [pc, #64]	; (8001bec <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001baa:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8001bac:	e005      	b.n	8001bba <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8001bb0:	607b      	str	r3, [r7, #4]
      break;
 8001bb2:	e002      	b.n	8001bba <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8001bb6:	607b      	str	r3, [r7, #4]
      break;
 8001bb8:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8001bba:	f7ff fefb 	bl	80019b4 <LL_RCC_PLL_GetMultiplicator>
 8001bbe:	0003      	movs	r3, r0
 8001bc0:	0c9b      	lsrs	r3, r3, #18
 8001bc2:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001bc4:	5cd3      	ldrb	r3, [r2, r3]
 8001bc6:	001a      	movs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4353      	muls	r3, r2
 8001bcc:	001c      	movs	r4, r3
 8001bce:	f7ff fefd 	bl	80019cc <LL_RCC_PLL_GetDivider>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	0d9b      	lsrs	r3, r3, #22
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	0019      	movs	r1, r3
 8001bda:	0020      	movs	r0, r4
 8001bdc:	f7fe fa9e 	bl	800011c <__udivsi3>
 8001be0:	0003      	movs	r3, r0
}
 8001be2:	0018      	movs	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b003      	add	sp, #12
 8001be8:	bd90      	pop	{r4, r7, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	003d0900 	.word	0x003d0900
 8001bf0:	00f42400 	.word	0x00f42400
 8001bf4:	007a1200 	.word	0x007a1200
 8001bf8:	08002cdc 	.word	0x08002cdc

08001bfc <LL_TIM_SetPrescaler>:
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c0c:	46c0      	nop			; (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b002      	add	sp, #8
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <LL_TIM_SetAutoReload>:
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001c24:	46c0      	nop			; (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b002      	add	sp, #8
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <LL_TIM_OC_SetCompareCH1>:
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c3c:	46c0      	nop			; (mov r8, r8)
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b002      	add	sp, #8
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <LL_TIM_OC_SetCompareCH2>:
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b002      	add	sp, #8
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <LL_TIM_OC_SetCompareCH3>:
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001c6c:	46c0      	nop			; (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b002      	add	sp, #8
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <LL_TIM_OC_SetCompareCH4>:
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001c84:	46c0      	nop			; (mov r8, r8)
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b002      	add	sp, #8
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	615a      	str	r2, [r3, #20]
}
 8001ca0:	46c0      	nop			; (mov r8, r8)
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b002      	add	sp, #8
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	05db      	lsls	r3, r3, #23
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d003      	beq.n	8001cca <LL_TIM_Init+0x22>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <LL_TIM_Init+0x88>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d107      	bne.n	8001cda <LL_TIM_Init+0x32>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2270      	movs	r2, #112	; 0x70
 8001cce:	4393      	bics	r3, r2
 8001cd0:	001a      	movs	r2, r3
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	05db      	lsls	r3, r3, #23
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d003      	beq.n	8001cec <LL_TIM_Init+0x44>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <LL_TIM_Init+0x88>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d106      	bne.n	8001cfa <LL_TIM_Init+0x52>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4a11      	ldr	r2, [pc, #68]	; (8001d34 <LL_TIM_Init+0x8c>)
 8001cf0:	401a      	ands	r2, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	0011      	movs	r1, r2
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f7ff ff83 	bl	8001c14 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	001a      	movs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	0011      	movs	r1, r2
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f7ff ff6f 	bl	8001bfc <LL_TIM_SetPrescaler>
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f7ff ffb3 	bl	8001c8c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	0018      	movs	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b004      	add	sp, #16
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40010800 	.word	0x40010800
 8001d34:	fffffcff 	.word	0xfffffcff

08001d38 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001d44:	2317      	movs	r3, #23
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	015b      	lsls	r3, r3, #5
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d036      	beq.n	8001dc4 <LL_TIM_OC_Init+0x8c>
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	015b      	lsls	r3, r3, #5
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d83c      	bhi.n	8001dda <LL_TIM_OC_Init+0xa2>
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d021      	beq.n	8001dae <LL_TIM_OC_Init+0x76>
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d832      	bhi.n	8001dda <LL_TIM_OC_Init+0xa2>
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d003      	beq.n	8001d82 <LL_TIM_OC_Init+0x4a>
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b10      	cmp	r3, #16
 8001d7e:	d00b      	beq.n	8001d98 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001d80:	e02b      	b.n	8001dda <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001d82:	2317      	movs	r3, #23
 8001d84:	18fc      	adds	r4, r7, r3
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	0011      	movs	r1, r2
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f000 f82c 	bl	8001dea <OC1Config>
 8001d92:	0003      	movs	r3, r0
 8001d94:	7023      	strb	r3, [r4, #0]
      break;
 8001d96:	e021      	b.n	8001ddc <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001d98:	2317      	movs	r3, #23
 8001d9a:	18fc      	adds	r4, r7, r3
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	0011      	movs	r1, r2
 8001da2:	0018      	movs	r0, r3
 8001da4:	f000 f868 	bl	8001e78 <OC2Config>
 8001da8:	0003      	movs	r3, r0
 8001daa:	7023      	strb	r3, [r4, #0]
      break;
 8001dac:	e016      	b.n	8001ddc <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001dae:	2317      	movs	r3, #23
 8001db0:	18fc      	adds	r4, r7, r3
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	0011      	movs	r1, r2
 8001db8:	0018      	movs	r0, r3
 8001dba:	f000 f8a9 	bl	8001f10 <OC3Config>
 8001dbe:	0003      	movs	r3, r0
 8001dc0:	7023      	strb	r3, [r4, #0]
      break;
 8001dc2:	e00b      	b.n	8001ddc <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001dc4:	2317      	movs	r3, #23
 8001dc6:	18fc      	adds	r4, r7, r3
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	0011      	movs	r1, r2
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f000 f8e8 	bl	8001fa4 <OC4Config>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	7023      	strb	r3, [r4, #0]
      break;
 8001dd8:	e000      	b.n	8001ddc <LL_TIM_OC_Init+0xa4>
      break;
 8001dda:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8001ddc:	2317      	movs	r3, #23
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	781b      	ldrb	r3, [r3, #0]
}
 8001de2:	0018      	movs	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	b007      	add	sp, #28
 8001de8:	bd90      	pop	{r4, r7, pc}

08001dea <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	4393      	bics	r3, r2
 8001dfc:	001a      	movs	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2203      	movs	r2, #3
 8001e18:	4393      	bics	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2270      	movs	r2, #112	; 0x70
 8001e20:	4393      	bics	r3, r2
 8001e22:	001a      	movs	r2, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	4393      	bics	r3, r2
 8001e32:	001a      	movs	r2, r3
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4393      	bics	r3, r2
 8001e42:	001a      	movs	r2, r3
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	0011      	movs	r1, r2
 8001e60:	0018      	movs	r0, r3
 8001e62:	f7ff fee3 	bl	8001c2c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	0018      	movs	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b006      	add	sp, #24
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	2210      	movs	r2, #16
 8001e88:	4393      	bics	r3, r2
 8001e8a:	001a      	movs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4a18      	ldr	r2, [pc, #96]	; (8001f08 <OC2Config+0x90>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4a17      	ldr	r2, [pc, #92]	; (8001f0c <OC2Config+0x94>)
 8001eae:	401a      	ands	r2, r3
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	4393      	bics	r3, r2
 8001ec0:	001a      	movs	r2, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	2210      	movs	r2, #16
 8001ed0:	4393      	bics	r3, r2
 8001ed2:	001a      	movs	r2, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	4313      	orrs	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	0011      	movs	r1, r2
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f7ff fea6 	bl	8001c44 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	0018      	movs	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b006      	add	sp, #24
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	fffffcff 	.word	0xfffffcff
 8001f0c:	ffff8fff 	.word	0xffff8fff

08001f10 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	4a1f      	ldr	r2, [pc, #124]	; (8001f9c <OC3Config+0x8c>)
 8001f20:	401a      	ands	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	4393      	bics	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2270      	movs	r2, #112	; 0x70
 8001f44:	4393      	bics	r3, r2
 8001f46:	001a      	movs	r2, r3
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	4a13      	ldr	r2, [pc, #76]	; (8001fa0 <OC3Config+0x90>)
 8001f54:	401a      	ands	r2, r3
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	021b      	lsls	r3, r3, #8
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	4a0e      	ldr	r2, [pc, #56]	; (8001f9c <OC3Config+0x8c>)
 8001f64:	401a      	ands	r2, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	0011      	movs	r1, r2
 8001f84:	0018      	movs	r0, r3
 8001f86:	f7ff fe69 	bl	8001c5c <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	0018      	movs	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b006      	add	sp, #24
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	fffffeff 	.word	0xfffffeff
 8001fa0:	fffffdff 	.word	0xfffffdff

08001fa4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <OC4Config+0x8c>)
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4a19      	ldr	r2, [pc, #100]	; (8002034 <OC4Config+0x90>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4a18      	ldr	r2, [pc, #96]	; (8002038 <OC4Config+0x94>)
 8001fd8:	401a      	ands	r2, r3
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	021b      	lsls	r3, r3, #8
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	4a15      	ldr	r2, [pc, #84]	; (800203c <OC4Config+0x98>)
 8001fe8:	401a      	ands	r2, r3
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	031b      	lsls	r3, r3, #12
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	4a0e      	ldr	r2, [pc, #56]	; (8002030 <OC4Config+0x8c>)
 8001ff8:	401a      	ands	r2, r3
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	031b      	lsls	r3, r3, #12
 8002000:	4313      	orrs	r3, r2
 8002002:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	0011      	movs	r1, r2
 8002018:	0018      	movs	r0, r3
 800201a:	f7ff fe2b 	bl	8001c74 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002024:	2300      	movs	r3, #0
}
 8002026:	0018      	movs	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	b006      	add	sp, #24
 800202c:	bd80      	pop	{r7, pc}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	ffffefff 	.word	0xffffefff
 8002034:	fffffcff 	.word	0xfffffcff
 8002038:	ffff8fff 	.word	0xffff8fff
 800203c:	ffffdfff 	.word	0xffffdfff

08002040 <LL_USART_IsEnabled>:
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2201      	movs	r2, #1
 800204e:	4013      	ands	r3, r2
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <LL_USART_IsEnabled+0x18>
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <LL_USART_IsEnabled+0x1a>
 8002058:	2300      	movs	r3, #0
}
 800205a:	0018      	movs	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	b002      	add	sp, #8
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <LL_USART_SetStopBitsLength>:
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4a05      	ldr	r2, [pc, #20]	; (8002088 <LL_USART_SetStopBitsLength+0x24>)
 8002074:	401a      	ands	r2, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	605a      	str	r2, [r3, #4]
}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	46bd      	mov	sp, r7
 8002082:	b002      	add	sp, #8
 8002084:	bd80      	pop	{r7, pc}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	ffffcfff 	.word	0xffffcfff

0800208c <LL_USART_SetHWFlowCtrl>:
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <LL_USART_SetHWFlowCtrl+0x24>)
 800209c:	401a      	ands	r2, r3
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	609a      	str	r2, [r3, #8]
}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b002      	add	sp, #8
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	fffffcff 	.word	0xfffffcff

080020b4 <LL_USART_SetBaudRate>:
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d11c      	bne.n	8002106 <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	005a      	lsls	r2, r3, #1
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	085b      	lsrs	r3, r3, #1
 80020d4:	18d3      	adds	r3, r2, r3
 80020d6:	6839      	ldr	r1, [r7, #0]
 80020d8:	0018      	movs	r0, r3
 80020da:	f7fe f81f 	bl	800011c <__udivsi3>
 80020de:	0003      	movs	r3, r0
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	4a10      	ldr	r2, [pc, #64]	; (8002128 <LL_USART_SetBaudRate+0x74>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	085b      	lsrs	r3, r3, #1
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	001a      	movs	r2, r3
 80020f4:	2307      	movs	r3, #7
 80020f6:	4013      	ands	r3, r2
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	60da      	str	r2, [r3, #12]
}
 8002104:	e00c      	b.n	8002120 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	085a      	lsrs	r2, r3, #1
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	18d3      	adds	r3, r2, r3
 800210e:	6839      	ldr	r1, [r7, #0]
 8002110:	0018      	movs	r0, r3
 8002112:	f7fe f803 	bl	800011c <__udivsi3>
 8002116:	0003      	movs	r3, r0
 8002118:	b29b      	uxth	r3, r3
 800211a:	001a      	movs	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	60da      	str	r2, [r3, #12]
}
 8002120:	46c0      	nop			; (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	b006      	add	sp, #24
 8002126:	bd80      	pop	{r7, pc}
 8002128:	0000fff0 	.word	0x0000fff0

0800212c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002136:	230f      	movs	r3, #15
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	0018      	movs	r0, r3
 8002146:	f7ff ff7b 	bl	8002040 <LL_USART_IsEnabled>
 800214a:	1e03      	subs	r3, r0, #0
 800214c:	d13b      	bne.n	80021c6 <LL_USART_Init+0x9a>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a20      	ldr	r2, [pc, #128]	; (80021d4 <LL_USART_Init+0xa8>)
 8002154:	401a      	ands	r2, r3
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	6859      	ldr	r1, [r3, #4]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	4319      	orrs	r1, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	4319      	orrs	r1, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	430b      	orrs	r3, r1
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	0011      	movs	r1, r2
 800217a:	0018      	movs	r0, r3
 800217c:	f7ff ff72 	bl	8002064 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	695a      	ldr	r2, [r3, #20]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	0011      	movs	r1, r2
 8002188:	0018      	movs	r0, r3
 800218a:	f7ff ff7f 	bl	800208c <LL_USART_SetHWFlowCtrl>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
#else
    if (USARTx == USART2)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a11      	ldr	r2, [pc, #68]	; (80021d8 <LL_USART_Init+0xac>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d104      	bne.n	80021a0 <LL_USART_Init+0x74>
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002196:	200c      	movs	r0, #12
 8002198:	f7ff fc34 	bl	8001a04 <LL_RCC_GetUSARTClockFreq>
 800219c:	0003      	movs	r3, r0
 800219e:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00f      	beq.n	80021c6 <LL_USART_Init+0x9a>
        && (USART_InitStruct->BaudRate != 0U))
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00b      	beq.n	80021c6 <LL_USART_Init+0x9a>
    {
      status = SUCCESS;
 80021ae:	230f      	movs	r3, #15
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80021be:	68b9      	ldr	r1, [r7, #8]
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ff77 	bl	80020b4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80021c6:	230f      	movs	r3, #15
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	781b      	ldrb	r3, [r3, #0]
}
 80021cc:	0018      	movs	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b004      	add	sp, #16
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	efff69f3 	.word	0xefff69f3
 80021d8:	40004400 	.word	0x40004400

080021dc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80021e6:	6839      	ldr	r1, [r7, #0]
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7fd ff97 	bl	800011c <__udivsi3>
 80021ee:	0003      	movs	r3, r0
 80021f0:	001a      	movs	r2, r3
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <LL_InitTick+0x30>)
 80021f4:	3a01      	subs	r2, #1
 80021f6:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <LL_InitTick+0x30>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021fe:	4b03      	ldr	r3, [pc, #12]	; (800220c <LL_InitTick+0x30>)
 8002200:	2205      	movs	r2, #5
 8002202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002204:	46c0      	nop			; (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	b002      	add	sp, #8
 800220a:	bd80      	pop	{r7, pc}
 800220c:	e000e010 	.word	0xe000e010

08002210 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002218:	23fa      	movs	r3, #250	; 0xfa
 800221a:	009a      	lsls	r2, r3, #2
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	0011      	movs	r1, r2
 8002220:	0018      	movs	r0, r3
 8002222:	f7ff ffdb 	bl	80021dc <LL_InitTick>
}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	46bd      	mov	sp, r7
 800222a:	b002      	add	sp, #8
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002238:	4b03      	ldr	r3, [pc, #12]	; (8002248 <LL_SetSystemCoreClock+0x18>)
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	601a      	str	r2, [r3, #0]
}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	46bd      	mov	sp, r7
 8002242:	b002      	add	sp, #8
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	20000000 	.word	0x20000000

0800224c <sniprintf>:
 800224c:	b40c      	push	{r2, r3}
 800224e:	b530      	push	{r4, r5, lr}
 8002250:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <sniprintf+0x64>)
 8002252:	000c      	movs	r4, r1
 8002254:	681d      	ldr	r5, [r3, #0]
 8002256:	b09d      	sub	sp, #116	; 0x74
 8002258:	2900      	cmp	r1, #0
 800225a:	da08      	bge.n	800226e <sniprintf+0x22>
 800225c:	238b      	movs	r3, #139	; 0x8b
 800225e:	2001      	movs	r0, #1
 8002260:	602b      	str	r3, [r5, #0]
 8002262:	4240      	negs	r0, r0
 8002264:	b01d      	add	sp, #116	; 0x74
 8002266:	bc30      	pop	{r4, r5}
 8002268:	bc08      	pop	{r3}
 800226a:	b002      	add	sp, #8
 800226c:	4718      	bx	r3
 800226e:	2382      	movs	r3, #130	; 0x82
 8002270:	466a      	mov	r2, sp
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	8293      	strh	r3, [r2, #20]
 8002276:	2300      	movs	r3, #0
 8002278:	9002      	str	r0, [sp, #8]
 800227a:	9006      	str	r0, [sp, #24]
 800227c:	4299      	cmp	r1, r3
 800227e:	d000      	beq.n	8002282 <sniprintf+0x36>
 8002280:	1e4b      	subs	r3, r1, #1
 8002282:	9304      	str	r3, [sp, #16]
 8002284:	9307      	str	r3, [sp, #28]
 8002286:	2301      	movs	r3, #1
 8002288:	466a      	mov	r2, sp
 800228a:	425b      	negs	r3, r3
 800228c:	82d3      	strh	r3, [r2, #22]
 800228e:	0028      	movs	r0, r5
 8002290:	ab21      	add	r3, sp, #132	; 0x84
 8002292:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002294:	a902      	add	r1, sp, #8
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	f000 f9a0 	bl	80025dc <_svfiprintf_r>
 800229c:	1c43      	adds	r3, r0, #1
 800229e:	da01      	bge.n	80022a4 <sniprintf+0x58>
 80022a0:	238b      	movs	r3, #139	; 0x8b
 80022a2:	602b      	str	r3, [r5, #0]
 80022a4:	2c00      	cmp	r4, #0
 80022a6:	d0dd      	beq.n	8002264 <sniprintf+0x18>
 80022a8:	2200      	movs	r2, #0
 80022aa:	9b02      	ldr	r3, [sp, #8]
 80022ac:	701a      	strb	r2, [r3, #0]
 80022ae:	e7d9      	b.n	8002264 <sniprintf+0x18>
 80022b0:	20000050 	.word	0x20000050

080022b4 <memset>:
 80022b4:	0003      	movs	r3, r0
 80022b6:	1882      	adds	r2, r0, r2
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d100      	bne.n	80022be <memset+0xa>
 80022bc:	4770      	bx	lr
 80022be:	7019      	strb	r1, [r3, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	e7f9      	b.n	80022b8 <memset+0x4>

080022c4 <__errno>:
 80022c4:	4b01      	ldr	r3, [pc, #4]	; (80022cc <__errno+0x8>)
 80022c6:	6818      	ldr	r0, [r3, #0]
 80022c8:	4770      	bx	lr
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	20000050 	.word	0x20000050

080022d0 <__libc_init_array>:
 80022d0:	b570      	push	{r4, r5, r6, lr}
 80022d2:	2600      	movs	r6, #0
 80022d4:	4c0c      	ldr	r4, [pc, #48]	; (8002308 <__libc_init_array+0x38>)
 80022d6:	4d0d      	ldr	r5, [pc, #52]	; (800230c <__libc_init_array+0x3c>)
 80022d8:	1b64      	subs	r4, r4, r5
 80022da:	10a4      	asrs	r4, r4, #2
 80022dc:	42a6      	cmp	r6, r4
 80022de:	d109      	bne.n	80022f4 <__libc_init_array+0x24>
 80022e0:	2600      	movs	r6, #0
 80022e2:	f000 fc6d 	bl	8002bc0 <_init>
 80022e6:	4c0a      	ldr	r4, [pc, #40]	; (8002310 <__libc_init_array+0x40>)
 80022e8:	4d0a      	ldr	r5, [pc, #40]	; (8002314 <__libc_init_array+0x44>)
 80022ea:	1b64      	subs	r4, r4, r5
 80022ec:	10a4      	asrs	r4, r4, #2
 80022ee:	42a6      	cmp	r6, r4
 80022f0:	d105      	bne.n	80022fe <__libc_init_array+0x2e>
 80022f2:	bd70      	pop	{r4, r5, r6, pc}
 80022f4:	00b3      	lsls	r3, r6, #2
 80022f6:	58eb      	ldr	r3, [r5, r3]
 80022f8:	4798      	blx	r3
 80022fa:	3601      	adds	r6, #1
 80022fc:	e7ee      	b.n	80022dc <__libc_init_array+0xc>
 80022fe:	00b3      	lsls	r3, r6, #2
 8002300:	58eb      	ldr	r3, [r5, r3]
 8002302:	4798      	blx	r3
 8002304:	3601      	adds	r6, #1
 8002306:	e7f2      	b.n	80022ee <__libc_init_array+0x1e>
 8002308:	08002d2c 	.word	0x08002d2c
 800230c:	08002d2c 	.word	0x08002d2c
 8002310:	08002d30 	.word	0x08002d30
 8002314:	08002d2c 	.word	0x08002d2c

08002318 <__retarget_lock_acquire_recursive>:
 8002318:	4770      	bx	lr

0800231a <__retarget_lock_release_recursive>:
 800231a:	4770      	bx	lr

0800231c <_free_r>:
 800231c:	b570      	push	{r4, r5, r6, lr}
 800231e:	0005      	movs	r5, r0
 8002320:	2900      	cmp	r1, #0
 8002322:	d010      	beq.n	8002346 <_free_r+0x2a>
 8002324:	1f0c      	subs	r4, r1, #4
 8002326:	6823      	ldr	r3, [r4, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	da00      	bge.n	800232e <_free_r+0x12>
 800232c:	18e4      	adds	r4, r4, r3
 800232e:	0028      	movs	r0, r5
 8002330:	f000 f8e2 	bl	80024f8 <__malloc_lock>
 8002334:	4a1d      	ldr	r2, [pc, #116]	; (80023ac <_free_r+0x90>)
 8002336:	6813      	ldr	r3, [r2, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d105      	bne.n	8002348 <_free_r+0x2c>
 800233c:	6063      	str	r3, [r4, #4]
 800233e:	6014      	str	r4, [r2, #0]
 8002340:	0028      	movs	r0, r5
 8002342:	f000 f8e1 	bl	8002508 <__malloc_unlock>
 8002346:	bd70      	pop	{r4, r5, r6, pc}
 8002348:	42a3      	cmp	r3, r4
 800234a:	d908      	bls.n	800235e <_free_r+0x42>
 800234c:	6820      	ldr	r0, [r4, #0]
 800234e:	1821      	adds	r1, r4, r0
 8002350:	428b      	cmp	r3, r1
 8002352:	d1f3      	bne.n	800233c <_free_r+0x20>
 8002354:	6819      	ldr	r1, [r3, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	1809      	adds	r1, r1, r0
 800235a:	6021      	str	r1, [r4, #0]
 800235c:	e7ee      	b.n	800233c <_free_r+0x20>
 800235e:	001a      	movs	r2, r3
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <_free_r+0x4e>
 8002366:	42a3      	cmp	r3, r4
 8002368:	d9f9      	bls.n	800235e <_free_r+0x42>
 800236a:	6811      	ldr	r1, [r2, #0]
 800236c:	1850      	adds	r0, r2, r1
 800236e:	42a0      	cmp	r0, r4
 8002370:	d10b      	bne.n	800238a <_free_r+0x6e>
 8002372:	6820      	ldr	r0, [r4, #0]
 8002374:	1809      	adds	r1, r1, r0
 8002376:	1850      	adds	r0, r2, r1
 8002378:	6011      	str	r1, [r2, #0]
 800237a:	4283      	cmp	r3, r0
 800237c:	d1e0      	bne.n	8002340 <_free_r+0x24>
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	1841      	adds	r1, r0, r1
 8002384:	6011      	str	r1, [r2, #0]
 8002386:	6053      	str	r3, [r2, #4]
 8002388:	e7da      	b.n	8002340 <_free_r+0x24>
 800238a:	42a0      	cmp	r0, r4
 800238c:	d902      	bls.n	8002394 <_free_r+0x78>
 800238e:	230c      	movs	r3, #12
 8002390:	602b      	str	r3, [r5, #0]
 8002392:	e7d5      	b.n	8002340 <_free_r+0x24>
 8002394:	6820      	ldr	r0, [r4, #0]
 8002396:	1821      	adds	r1, r4, r0
 8002398:	428b      	cmp	r3, r1
 800239a:	d103      	bne.n	80023a4 <_free_r+0x88>
 800239c:	6819      	ldr	r1, [r3, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	1809      	adds	r1, r1, r0
 80023a2:	6021      	str	r1, [r4, #0]
 80023a4:	6063      	str	r3, [r4, #4]
 80023a6:	6054      	str	r4, [r2, #4]
 80023a8:	e7ca      	b.n	8002340 <_free_r+0x24>
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	200003f8 	.word	0x200003f8

080023b0 <sbrk_aligned>:
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	4e0f      	ldr	r6, [pc, #60]	; (80023f0 <sbrk_aligned+0x40>)
 80023b4:	000d      	movs	r5, r1
 80023b6:	6831      	ldr	r1, [r6, #0]
 80023b8:	0004      	movs	r4, r0
 80023ba:	2900      	cmp	r1, #0
 80023bc:	d102      	bne.n	80023c4 <sbrk_aligned+0x14>
 80023be:	f000 fba1 	bl	8002b04 <_sbrk_r>
 80023c2:	6030      	str	r0, [r6, #0]
 80023c4:	0029      	movs	r1, r5
 80023c6:	0020      	movs	r0, r4
 80023c8:	f000 fb9c 	bl	8002b04 <_sbrk_r>
 80023cc:	1c43      	adds	r3, r0, #1
 80023ce:	d00a      	beq.n	80023e6 <sbrk_aligned+0x36>
 80023d0:	2303      	movs	r3, #3
 80023d2:	1cc5      	adds	r5, r0, #3
 80023d4:	439d      	bics	r5, r3
 80023d6:	42a8      	cmp	r0, r5
 80023d8:	d007      	beq.n	80023ea <sbrk_aligned+0x3a>
 80023da:	1a29      	subs	r1, r5, r0
 80023dc:	0020      	movs	r0, r4
 80023de:	f000 fb91 	bl	8002b04 <_sbrk_r>
 80023e2:	3001      	adds	r0, #1
 80023e4:	d101      	bne.n	80023ea <sbrk_aligned+0x3a>
 80023e6:	2501      	movs	r5, #1
 80023e8:	426d      	negs	r5, r5
 80023ea:	0028      	movs	r0, r5
 80023ec:	bd70      	pop	{r4, r5, r6, pc}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	200003fc 	.word	0x200003fc

080023f4 <_malloc_r>:
 80023f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023f6:	2203      	movs	r2, #3
 80023f8:	1ccb      	adds	r3, r1, #3
 80023fa:	4393      	bics	r3, r2
 80023fc:	3308      	adds	r3, #8
 80023fe:	0006      	movs	r6, r0
 8002400:	001f      	movs	r7, r3
 8002402:	2b0c      	cmp	r3, #12
 8002404:	d238      	bcs.n	8002478 <_malloc_r+0x84>
 8002406:	270c      	movs	r7, #12
 8002408:	42b9      	cmp	r1, r7
 800240a:	d837      	bhi.n	800247c <_malloc_r+0x88>
 800240c:	0030      	movs	r0, r6
 800240e:	f000 f873 	bl	80024f8 <__malloc_lock>
 8002412:	4b38      	ldr	r3, [pc, #224]	; (80024f4 <_malloc_r+0x100>)
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	001c      	movs	r4, r3
 800241a:	2c00      	cmp	r4, #0
 800241c:	d133      	bne.n	8002486 <_malloc_r+0x92>
 800241e:	0039      	movs	r1, r7
 8002420:	0030      	movs	r0, r6
 8002422:	f7ff ffc5 	bl	80023b0 <sbrk_aligned>
 8002426:	0004      	movs	r4, r0
 8002428:	1c43      	adds	r3, r0, #1
 800242a:	d15e      	bne.n	80024ea <_malloc_r+0xf6>
 800242c:	9b00      	ldr	r3, [sp, #0]
 800242e:	681c      	ldr	r4, [r3, #0]
 8002430:	0025      	movs	r5, r4
 8002432:	2d00      	cmp	r5, #0
 8002434:	d14e      	bne.n	80024d4 <_malloc_r+0xe0>
 8002436:	2c00      	cmp	r4, #0
 8002438:	d051      	beq.n	80024de <_malloc_r+0xea>
 800243a:	6823      	ldr	r3, [r4, #0]
 800243c:	0029      	movs	r1, r5
 800243e:	18e3      	adds	r3, r4, r3
 8002440:	0030      	movs	r0, r6
 8002442:	9301      	str	r3, [sp, #4]
 8002444:	f000 fb5e 	bl	8002b04 <_sbrk_r>
 8002448:	9b01      	ldr	r3, [sp, #4]
 800244a:	4283      	cmp	r3, r0
 800244c:	d147      	bne.n	80024de <_malloc_r+0xea>
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	0030      	movs	r0, r6
 8002452:	1aff      	subs	r7, r7, r3
 8002454:	0039      	movs	r1, r7
 8002456:	f7ff ffab 	bl	80023b0 <sbrk_aligned>
 800245a:	3001      	adds	r0, #1
 800245c:	d03f      	beq.n	80024de <_malloc_r+0xea>
 800245e:	6823      	ldr	r3, [r4, #0]
 8002460:	19db      	adds	r3, r3, r7
 8002462:	6023      	str	r3, [r4, #0]
 8002464:	9b00      	ldr	r3, [sp, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d040      	beq.n	80024ee <_malloc_r+0xfa>
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	42a2      	cmp	r2, r4
 8002470:	d133      	bne.n	80024da <_malloc_r+0xe6>
 8002472:	2200      	movs	r2, #0
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	e014      	b.n	80024a2 <_malloc_r+0xae>
 8002478:	2b00      	cmp	r3, #0
 800247a:	dac5      	bge.n	8002408 <_malloc_r+0x14>
 800247c:	230c      	movs	r3, #12
 800247e:	2500      	movs	r5, #0
 8002480:	6033      	str	r3, [r6, #0]
 8002482:	0028      	movs	r0, r5
 8002484:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002486:	6821      	ldr	r1, [r4, #0]
 8002488:	1bc9      	subs	r1, r1, r7
 800248a:	d420      	bmi.n	80024ce <_malloc_r+0xda>
 800248c:	290b      	cmp	r1, #11
 800248e:	d918      	bls.n	80024c2 <_malloc_r+0xce>
 8002490:	19e2      	adds	r2, r4, r7
 8002492:	6027      	str	r7, [r4, #0]
 8002494:	42a3      	cmp	r3, r4
 8002496:	d112      	bne.n	80024be <_malloc_r+0xca>
 8002498:	9b00      	ldr	r3, [sp, #0]
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	6863      	ldr	r3, [r4, #4]
 800249e:	6011      	str	r1, [r2, #0]
 80024a0:	6053      	str	r3, [r2, #4]
 80024a2:	0030      	movs	r0, r6
 80024a4:	0025      	movs	r5, r4
 80024a6:	f000 f82f 	bl	8002508 <__malloc_unlock>
 80024aa:	2207      	movs	r2, #7
 80024ac:	350b      	adds	r5, #11
 80024ae:	1d23      	adds	r3, r4, #4
 80024b0:	4395      	bics	r5, r2
 80024b2:	1aea      	subs	r2, r5, r3
 80024b4:	429d      	cmp	r5, r3
 80024b6:	d0e4      	beq.n	8002482 <_malloc_r+0x8e>
 80024b8:	1b5b      	subs	r3, r3, r5
 80024ba:	50a3      	str	r3, [r4, r2]
 80024bc:	e7e1      	b.n	8002482 <_malloc_r+0x8e>
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	e7ec      	b.n	800249c <_malloc_r+0xa8>
 80024c2:	6862      	ldr	r2, [r4, #4]
 80024c4:	42a3      	cmp	r3, r4
 80024c6:	d1d5      	bne.n	8002474 <_malloc_r+0x80>
 80024c8:	9b00      	ldr	r3, [sp, #0]
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	e7e9      	b.n	80024a2 <_malloc_r+0xae>
 80024ce:	0023      	movs	r3, r4
 80024d0:	6864      	ldr	r4, [r4, #4]
 80024d2:	e7a2      	b.n	800241a <_malloc_r+0x26>
 80024d4:	002c      	movs	r4, r5
 80024d6:	686d      	ldr	r5, [r5, #4]
 80024d8:	e7ab      	b.n	8002432 <_malloc_r+0x3e>
 80024da:	0013      	movs	r3, r2
 80024dc:	e7c4      	b.n	8002468 <_malloc_r+0x74>
 80024de:	230c      	movs	r3, #12
 80024e0:	0030      	movs	r0, r6
 80024e2:	6033      	str	r3, [r6, #0]
 80024e4:	f000 f810 	bl	8002508 <__malloc_unlock>
 80024e8:	e7cb      	b.n	8002482 <_malloc_r+0x8e>
 80024ea:	6027      	str	r7, [r4, #0]
 80024ec:	e7d9      	b.n	80024a2 <_malloc_r+0xae>
 80024ee:	605b      	str	r3, [r3, #4]
 80024f0:	deff      	udf	#255	; 0xff
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	200003f8 	.word	0x200003f8

080024f8 <__malloc_lock>:
 80024f8:	b510      	push	{r4, lr}
 80024fa:	4802      	ldr	r0, [pc, #8]	; (8002504 <__malloc_lock+0xc>)
 80024fc:	f7ff ff0c 	bl	8002318 <__retarget_lock_acquire_recursive>
 8002500:	bd10      	pop	{r4, pc}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	200003f4 	.word	0x200003f4

08002508 <__malloc_unlock>:
 8002508:	b510      	push	{r4, lr}
 800250a:	4802      	ldr	r0, [pc, #8]	; (8002514 <__malloc_unlock+0xc>)
 800250c:	f7ff ff05 	bl	800231a <__retarget_lock_release_recursive>
 8002510:	bd10      	pop	{r4, pc}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	200003f4 	.word	0x200003f4

08002518 <__ssputs_r>:
 8002518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800251a:	b085      	sub	sp, #20
 800251c:	9301      	str	r3, [sp, #4]
 800251e:	9203      	str	r2, [sp, #12]
 8002520:	688e      	ldr	r6, [r1, #8]
 8002522:	9a01      	ldr	r2, [sp, #4]
 8002524:	0007      	movs	r7, r0
 8002526:	000c      	movs	r4, r1
 8002528:	680b      	ldr	r3, [r1, #0]
 800252a:	4296      	cmp	r6, r2
 800252c:	d831      	bhi.n	8002592 <__ssputs_r+0x7a>
 800252e:	898a      	ldrh	r2, [r1, #12]
 8002530:	2190      	movs	r1, #144	; 0x90
 8002532:	00c9      	lsls	r1, r1, #3
 8002534:	420a      	tst	r2, r1
 8002536:	d029      	beq.n	800258c <__ssputs_r+0x74>
 8002538:	2003      	movs	r0, #3
 800253a:	6921      	ldr	r1, [r4, #16]
 800253c:	1a5b      	subs	r3, r3, r1
 800253e:	9302      	str	r3, [sp, #8]
 8002540:	6963      	ldr	r3, [r4, #20]
 8002542:	4343      	muls	r3, r0
 8002544:	0fdd      	lsrs	r5, r3, #31
 8002546:	18ed      	adds	r5, r5, r3
 8002548:	9b01      	ldr	r3, [sp, #4]
 800254a:	9802      	ldr	r0, [sp, #8]
 800254c:	3301      	adds	r3, #1
 800254e:	181b      	adds	r3, r3, r0
 8002550:	106d      	asrs	r5, r5, #1
 8002552:	42ab      	cmp	r3, r5
 8002554:	d900      	bls.n	8002558 <__ssputs_r+0x40>
 8002556:	001d      	movs	r5, r3
 8002558:	0552      	lsls	r2, r2, #21
 800255a:	d529      	bpl.n	80025b0 <__ssputs_r+0x98>
 800255c:	0029      	movs	r1, r5
 800255e:	0038      	movs	r0, r7
 8002560:	f7ff ff48 	bl	80023f4 <_malloc_r>
 8002564:	1e06      	subs	r6, r0, #0
 8002566:	d02d      	beq.n	80025c4 <__ssputs_r+0xac>
 8002568:	9a02      	ldr	r2, [sp, #8]
 800256a:	6921      	ldr	r1, [r4, #16]
 800256c:	f000 fae7 	bl	8002b3e <memcpy>
 8002570:	89a2      	ldrh	r2, [r4, #12]
 8002572:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <__ssputs_r+0xc0>)
 8002574:	401a      	ands	r2, r3
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	4313      	orrs	r3, r2
 800257a:	81a3      	strh	r3, [r4, #12]
 800257c:	9b02      	ldr	r3, [sp, #8]
 800257e:	6126      	str	r6, [r4, #16]
 8002580:	18f6      	adds	r6, r6, r3
 8002582:	6026      	str	r6, [r4, #0]
 8002584:	6165      	str	r5, [r4, #20]
 8002586:	9e01      	ldr	r6, [sp, #4]
 8002588:	1aed      	subs	r5, r5, r3
 800258a:	60a5      	str	r5, [r4, #8]
 800258c:	9b01      	ldr	r3, [sp, #4]
 800258e:	429e      	cmp	r6, r3
 8002590:	d900      	bls.n	8002594 <__ssputs_r+0x7c>
 8002592:	9e01      	ldr	r6, [sp, #4]
 8002594:	0032      	movs	r2, r6
 8002596:	9903      	ldr	r1, [sp, #12]
 8002598:	6820      	ldr	r0, [r4, #0]
 800259a:	f000 fa9f 	bl	8002adc <memmove>
 800259e:	2000      	movs	r0, #0
 80025a0:	68a3      	ldr	r3, [r4, #8]
 80025a2:	1b9b      	subs	r3, r3, r6
 80025a4:	60a3      	str	r3, [r4, #8]
 80025a6:	6823      	ldr	r3, [r4, #0]
 80025a8:	199b      	adds	r3, r3, r6
 80025aa:	6023      	str	r3, [r4, #0]
 80025ac:	b005      	add	sp, #20
 80025ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025b0:	002a      	movs	r2, r5
 80025b2:	0038      	movs	r0, r7
 80025b4:	f000 facc 	bl	8002b50 <_realloc_r>
 80025b8:	1e06      	subs	r6, r0, #0
 80025ba:	d1df      	bne.n	800257c <__ssputs_r+0x64>
 80025bc:	0038      	movs	r0, r7
 80025be:	6921      	ldr	r1, [r4, #16]
 80025c0:	f7ff feac 	bl	800231c <_free_r>
 80025c4:	230c      	movs	r3, #12
 80025c6:	2001      	movs	r0, #1
 80025c8:	603b      	str	r3, [r7, #0]
 80025ca:	89a2      	ldrh	r2, [r4, #12]
 80025cc:	3334      	adds	r3, #52	; 0x34
 80025ce:	4313      	orrs	r3, r2
 80025d0:	81a3      	strh	r3, [r4, #12]
 80025d2:	4240      	negs	r0, r0
 80025d4:	e7ea      	b.n	80025ac <__ssputs_r+0x94>
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	fffffb7f 	.word	0xfffffb7f

080025dc <_svfiprintf_r>:
 80025dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025de:	b0a1      	sub	sp, #132	; 0x84
 80025e0:	9003      	str	r0, [sp, #12]
 80025e2:	001d      	movs	r5, r3
 80025e4:	898b      	ldrh	r3, [r1, #12]
 80025e6:	000f      	movs	r7, r1
 80025e8:	0016      	movs	r6, r2
 80025ea:	061b      	lsls	r3, r3, #24
 80025ec:	d511      	bpl.n	8002612 <_svfiprintf_r+0x36>
 80025ee:	690b      	ldr	r3, [r1, #16]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10e      	bne.n	8002612 <_svfiprintf_r+0x36>
 80025f4:	2140      	movs	r1, #64	; 0x40
 80025f6:	f7ff fefd 	bl	80023f4 <_malloc_r>
 80025fa:	6038      	str	r0, [r7, #0]
 80025fc:	6138      	str	r0, [r7, #16]
 80025fe:	2800      	cmp	r0, #0
 8002600:	d105      	bne.n	800260e <_svfiprintf_r+0x32>
 8002602:	230c      	movs	r3, #12
 8002604:	9a03      	ldr	r2, [sp, #12]
 8002606:	3801      	subs	r0, #1
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	b021      	add	sp, #132	; 0x84
 800260c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800260e:	2340      	movs	r3, #64	; 0x40
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	2300      	movs	r3, #0
 8002614:	ac08      	add	r4, sp, #32
 8002616:	6163      	str	r3, [r4, #20]
 8002618:	3320      	adds	r3, #32
 800261a:	7663      	strb	r3, [r4, #25]
 800261c:	3310      	adds	r3, #16
 800261e:	76a3      	strb	r3, [r4, #26]
 8002620:	9507      	str	r5, [sp, #28]
 8002622:	0035      	movs	r5, r6
 8002624:	782b      	ldrb	r3, [r5, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <_svfiprintf_r+0x52>
 800262a:	2b25      	cmp	r3, #37	; 0x25
 800262c:	d148      	bne.n	80026c0 <_svfiprintf_r+0xe4>
 800262e:	1bab      	subs	r3, r5, r6
 8002630:	9305      	str	r3, [sp, #20]
 8002632:	42b5      	cmp	r5, r6
 8002634:	d00b      	beq.n	800264e <_svfiprintf_r+0x72>
 8002636:	0032      	movs	r2, r6
 8002638:	0039      	movs	r1, r7
 800263a:	9803      	ldr	r0, [sp, #12]
 800263c:	f7ff ff6c 	bl	8002518 <__ssputs_r>
 8002640:	3001      	adds	r0, #1
 8002642:	d100      	bne.n	8002646 <_svfiprintf_r+0x6a>
 8002644:	e0af      	b.n	80027a6 <_svfiprintf_r+0x1ca>
 8002646:	6963      	ldr	r3, [r4, #20]
 8002648:	9a05      	ldr	r2, [sp, #20]
 800264a:	189b      	adds	r3, r3, r2
 800264c:	6163      	str	r3, [r4, #20]
 800264e:	782b      	ldrb	r3, [r5, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d100      	bne.n	8002656 <_svfiprintf_r+0x7a>
 8002654:	e0a7      	b.n	80027a6 <_svfiprintf_r+0x1ca>
 8002656:	2201      	movs	r2, #1
 8002658:	2300      	movs	r3, #0
 800265a:	4252      	negs	r2, r2
 800265c:	6062      	str	r2, [r4, #4]
 800265e:	a904      	add	r1, sp, #16
 8002660:	3254      	adds	r2, #84	; 0x54
 8002662:	1852      	adds	r2, r2, r1
 8002664:	1c6e      	adds	r6, r5, #1
 8002666:	6023      	str	r3, [r4, #0]
 8002668:	60e3      	str	r3, [r4, #12]
 800266a:	60a3      	str	r3, [r4, #8]
 800266c:	7013      	strb	r3, [r2, #0]
 800266e:	65a3      	str	r3, [r4, #88]	; 0x58
 8002670:	4b55      	ldr	r3, [pc, #340]	; (80027c8 <_svfiprintf_r+0x1ec>)
 8002672:	2205      	movs	r2, #5
 8002674:	0018      	movs	r0, r3
 8002676:	7831      	ldrb	r1, [r6, #0]
 8002678:	9305      	str	r3, [sp, #20]
 800267a:	f000 fa55 	bl	8002b28 <memchr>
 800267e:	1c75      	adds	r5, r6, #1
 8002680:	2800      	cmp	r0, #0
 8002682:	d11f      	bne.n	80026c4 <_svfiprintf_r+0xe8>
 8002684:	6822      	ldr	r2, [r4, #0]
 8002686:	06d3      	lsls	r3, r2, #27
 8002688:	d504      	bpl.n	8002694 <_svfiprintf_r+0xb8>
 800268a:	2353      	movs	r3, #83	; 0x53
 800268c:	a904      	add	r1, sp, #16
 800268e:	185b      	adds	r3, r3, r1
 8002690:	2120      	movs	r1, #32
 8002692:	7019      	strb	r1, [r3, #0]
 8002694:	0713      	lsls	r3, r2, #28
 8002696:	d504      	bpl.n	80026a2 <_svfiprintf_r+0xc6>
 8002698:	2353      	movs	r3, #83	; 0x53
 800269a:	a904      	add	r1, sp, #16
 800269c:	185b      	adds	r3, r3, r1
 800269e:	212b      	movs	r1, #43	; 0x2b
 80026a0:	7019      	strb	r1, [r3, #0]
 80026a2:	7833      	ldrb	r3, [r6, #0]
 80026a4:	2b2a      	cmp	r3, #42	; 0x2a
 80026a6:	d016      	beq.n	80026d6 <_svfiprintf_r+0xfa>
 80026a8:	0035      	movs	r5, r6
 80026aa:	2100      	movs	r1, #0
 80026ac:	200a      	movs	r0, #10
 80026ae:	68e3      	ldr	r3, [r4, #12]
 80026b0:	782a      	ldrb	r2, [r5, #0]
 80026b2:	1c6e      	adds	r6, r5, #1
 80026b4:	3a30      	subs	r2, #48	; 0x30
 80026b6:	2a09      	cmp	r2, #9
 80026b8:	d94e      	bls.n	8002758 <_svfiprintf_r+0x17c>
 80026ba:	2900      	cmp	r1, #0
 80026bc:	d111      	bne.n	80026e2 <_svfiprintf_r+0x106>
 80026be:	e017      	b.n	80026f0 <_svfiprintf_r+0x114>
 80026c0:	3501      	adds	r5, #1
 80026c2:	e7af      	b.n	8002624 <_svfiprintf_r+0x48>
 80026c4:	9b05      	ldr	r3, [sp, #20]
 80026c6:	6822      	ldr	r2, [r4, #0]
 80026c8:	1ac0      	subs	r0, r0, r3
 80026ca:	2301      	movs	r3, #1
 80026cc:	4083      	lsls	r3, r0
 80026ce:	4313      	orrs	r3, r2
 80026d0:	002e      	movs	r6, r5
 80026d2:	6023      	str	r3, [r4, #0]
 80026d4:	e7cc      	b.n	8002670 <_svfiprintf_r+0x94>
 80026d6:	9b07      	ldr	r3, [sp, #28]
 80026d8:	1d19      	adds	r1, r3, #4
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	9107      	str	r1, [sp, #28]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	db01      	blt.n	80026e6 <_svfiprintf_r+0x10a>
 80026e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80026e4:	e004      	b.n	80026f0 <_svfiprintf_r+0x114>
 80026e6:	425b      	negs	r3, r3
 80026e8:	60e3      	str	r3, [r4, #12]
 80026ea:	2302      	movs	r3, #2
 80026ec:	4313      	orrs	r3, r2
 80026ee:	6023      	str	r3, [r4, #0]
 80026f0:	782b      	ldrb	r3, [r5, #0]
 80026f2:	2b2e      	cmp	r3, #46	; 0x2e
 80026f4:	d10a      	bne.n	800270c <_svfiprintf_r+0x130>
 80026f6:	786b      	ldrb	r3, [r5, #1]
 80026f8:	2b2a      	cmp	r3, #42	; 0x2a
 80026fa:	d135      	bne.n	8002768 <_svfiprintf_r+0x18c>
 80026fc:	9b07      	ldr	r3, [sp, #28]
 80026fe:	3502      	adds	r5, #2
 8002700:	1d1a      	adds	r2, r3, #4
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	9207      	str	r2, [sp, #28]
 8002706:	2b00      	cmp	r3, #0
 8002708:	db2b      	blt.n	8002762 <_svfiprintf_r+0x186>
 800270a:	9309      	str	r3, [sp, #36]	; 0x24
 800270c:	4e2f      	ldr	r6, [pc, #188]	; (80027cc <_svfiprintf_r+0x1f0>)
 800270e:	2203      	movs	r2, #3
 8002710:	0030      	movs	r0, r6
 8002712:	7829      	ldrb	r1, [r5, #0]
 8002714:	f000 fa08 	bl	8002b28 <memchr>
 8002718:	2800      	cmp	r0, #0
 800271a:	d006      	beq.n	800272a <_svfiprintf_r+0x14e>
 800271c:	2340      	movs	r3, #64	; 0x40
 800271e:	1b80      	subs	r0, r0, r6
 8002720:	4083      	lsls	r3, r0
 8002722:	6822      	ldr	r2, [r4, #0]
 8002724:	3501      	adds	r5, #1
 8002726:	4313      	orrs	r3, r2
 8002728:	6023      	str	r3, [r4, #0]
 800272a:	7829      	ldrb	r1, [r5, #0]
 800272c:	2206      	movs	r2, #6
 800272e:	4828      	ldr	r0, [pc, #160]	; (80027d0 <_svfiprintf_r+0x1f4>)
 8002730:	1c6e      	adds	r6, r5, #1
 8002732:	7621      	strb	r1, [r4, #24]
 8002734:	f000 f9f8 	bl	8002b28 <memchr>
 8002738:	2800      	cmp	r0, #0
 800273a:	d03c      	beq.n	80027b6 <_svfiprintf_r+0x1da>
 800273c:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <_svfiprintf_r+0x1f8>)
 800273e:	2b00      	cmp	r3, #0
 8002740:	d125      	bne.n	800278e <_svfiprintf_r+0x1b2>
 8002742:	2207      	movs	r2, #7
 8002744:	9b07      	ldr	r3, [sp, #28]
 8002746:	3307      	adds	r3, #7
 8002748:	4393      	bics	r3, r2
 800274a:	3308      	adds	r3, #8
 800274c:	9307      	str	r3, [sp, #28]
 800274e:	6963      	ldr	r3, [r4, #20]
 8002750:	9a04      	ldr	r2, [sp, #16]
 8002752:	189b      	adds	r3, r3, r2
 8002754:	6163      	str	r3, [r4, #20]
 8002756:	e764      	b.n	8002622 <_svfiprintf_r+0x46>
 8002758:	4343      	muls	r3, r0
 800275a:	0035      	movs	r5, r6
 800275c:	2101      	movs	r1, #1
 800275e:	189b      	adds	r3, r3, r2
 8002760:	e7a6      	b.n	80026b0 <_svfiprintf_r+0xd4>
 8002762:	2301      	movs	r3, #1
 8002764:	425b      	negs	r3, r3
 8002766:	e7d0      	b.n	800270a <_svfiprintf_r+0x12e>
 8002768:	2300      	movs	r3, #0
 800276a:	200a      	movs	r0, #10
 800276c:	001a      	movs	r2, r3
 800276e:	3501      	adds	r5, #1
 8002770:	6063      	str	r3, [r4, #4]
 8002772:	7829      	ldrb	r1, [r5, #0]
 8002774:	1c6e      	adds	r6, r5, #1
 8002776:	3930      	subs	r1, #48	; 0x30
 8002778:	2909      	cmp	r1, #9
 800277a:	d903      	bls.n	8002784 <_svfiprintf_r+0x1a8>
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0c5      	beq.n	800270c <_svfiprintf_r+0x130>
 8002780:	9209      	str	r2, [sp, #36]	; 0x24
 8002782:	e7c3      	b.n	800270c <_svfiprintf_r+0x130>
 8002784:	4342      	muls	r2, r0
 8002786:	0035      	movs	r5, r6
 8002788:	2301      	movs	r3, #1
 800278a:	1852      	adds	r2, r2, r1
 800278c:	e7f1      	b.n	8002772 <_svfiprintf_r+0x196>
 800278e:	aa07      	add	r2, sp, #28
 8002790:	9200      	str	r2, [sp, #0]
 8002792:	0021      	movs	r1, r4
 8002794:	003a      	movs	r2, r7
 8002796:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <_svfiprintf_r+0x1fc>)
 8002798:	9803      	ldr	r0, [sp, #12]
 800279a:	e000      	b.n	800279e <_svfiprintf_r+0x1c2>
 800279c:	bf00      	nop
 800279e:	9004      	str	r0, [sp, #16]
 80027a0:	9b04      	ldr	r3, [sp, #16]
 80027a2:	3301      	adds	r3, #1
 80027a4:	d1d3      	bne.n	800274e <_svfiprintf_r+0x172>
 80027a6:	89bb      	ldrh	r3, [r7, #12]
 80027a8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80027aa:	065b      	lsls	r3, r3, #25
 80027ac:	d400      	bmi.n	80027b0 <_svfiprintf_r+0x1d4>
 80027ae:	e72c      	b.n	800260a <_svfiprintf_r+0x2e>
 80027b0:	2001      	movs	r0, #1
 80027b2:	4240      	negs	r0, r0
 80027b4:	e729      	b.n	800260a <_svfiprintf_r+0x2e>
 80027b6:	aa07      	add	r2, sp, #28
 80027b8:	9200      	str	r2, [sp, #0]
 80027ba:	0021      	movs	r1, r4
 80027bc:	003a      	movs	r2, r7
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <_svfiprintf_r+0x1fc>)
 80027c0:	9803      	ldr	r0, [sp, #12]
 80027c2:	f000 f87b 	bl	80028bc <_printf_i>
 80027c6:	e7ea      	b.n	800279e <_svfiprintf_r+0x1c2>
 80027c8:	08002cf7 	.word	0x08002cf7
 80027cc:	08002cfd 	.word	0x08002cfd
 80027d0:	08002d01 	.word	0x08002d01
 80027d4:	00000000 	.word	0x00000000
 80027d8:	08002519 	.word	0x08002519

080027dc <_printf_common>:
 80027dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027de:	0016      	movs	r6, r2
 80027e0:	9301      	str	r3, [sp, #4]
 80027e2:	688a      	ldr	r2, [r1, #8]
 80027e4:	690b      	ldr	r3, [r1, #16]
 80027e6:	000c      	movs	r4, r1
 80027e8:	9000      	str	r0, [sp, #0]
 80027ea:	4293      	cmp	r3, r2
 80027ec:	da00      	bge.n	80027f0 <_printf_common+0x14>
 80027ee:	0013      	movs	r3, r2
 80027f0:	0022      	movs	r2, r4
 80027f2:	6033      	str	r3, [r6, #0]
 80027f4:	3243      	adds	r2, #67	; 0x43
 80027f6:	7812      	ldrb	r2, [r2, #0]
 80027f8:	2a00      	cmp	r2, #0
 80027fa:	d001      	beq.n	8002800 <_printf_common+0x24>
 80027fc:	3301      	adds	r3, #1
 80027fe:	6033      	str	r3, [r6, #0]
 8002800:	6823      	ldr	r3, [r4, #0]
 8002802:	069b      	lsls	r3, r3, #26
 8002804:	d502      	bpl.n	800280c <_printf_common+0x30>
 8002806:	6833      	ldr	r3, [r6, #0]
 8002808:	3302      	adds	r3, #2
 800280a:	6033      	str	r3, [r6, #0]
 800280c:	6822      	ldr	r2, [r4, #0]
 800280e:	2306      	movs	r3, #6
 8002810:	0015      	movs	r5, r2
 8002812:	401d      	ands	r5, r3
 8002814:	421a      	tst	r2, r3
 8002816:	d027      	beq.n	8002868 <_printf_common+0x8c>
 8002818:	0023      	movs	r3, r4
 800281a:	3343      	adds	r3, #67	; 0x43
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	1e5a      	subs	r2, r3, #1
 8002820:	4193      	sbcs	r3, r2
 8002822:	6822      	ldr	r2, [r4, #0]
 8002824:	0692      	lsls	r2, r2, #26
 8002826:	d430      	bmi.n	800288a <_printf_common+0xae>
 8002828:	0022      	movs	r2, r4
 800282a:	9901      	ldr	r1, [sp, #4]
 800282c:	9800      	ldr	r0, [sp, #0]
 800282e:	9d08      	ldr	r5, [sp, #32]
 8002830:	3243      	adds	r2, #67	; 0x43
 8002832:	47a8      	blx	r5
 8002834:	3001      	adds	r0, #1
 8002836:	d025      	beq.n	8002884 <_printf_common+0xa8>
 8002838:	2206      	movs	r2, #6
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	2500      	movs	r5, #0
 800283e:	4013      	ands	r3, r2
 8002840:	2b04      	cmp	r3, #4
 8002842:	d105      	bne.n	8002850 <_printf_common+0x74>
 8002844:	6833      	ldr	r3, [r6, #0]
 8002846:	68e5      	ldr	r5, [r4, #12]
 8002848:	1aed      	subs	r5, r5, r3
 800284a:	43eb      	mvns	r3, r5
 800284c:	17db      	asrs	r3, r3, #31
 800284e:	401d      	ands	r5, r3
 8002850:	68a3      	ldr	r3, [r4, #8]
 8002852:	6922      	ldr	r2, [r4, #16]
 8002854:	4293      	cmp	r3, r2
 8002856:	dd01      	ble.n	800285c <_printf_common+0x80>
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	18ed      	adds	r5, r5, r3
 800285c:	2600      	movs	r6, #0
 800285e:	42b5      	cmp	r5, r6
 8002860:	d120      	bne.n	80028a4 <_printf_common+0xc8>
 8002862:	2000      	movs	r0, #0
 8002864:	e010      	b.n	8002888 <_printf_common+0xac>
 8002866:	3501      	adds	r5, #1
 8002868:	68e3      	ldr	r3, [r4, #12]
 800286a:	6832      	ldr	r2, [r6, #0]
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	42ab      	cmp	r3, r5
 8002870:	ddd2      	ble.n	8002818 <_printf_common+0x3c>
 8002872:	0022      	movs	r2, r4
 8002874:	2301      	movs	r3, #1
 8002876:	9901      	ldr	r1, [sp, #4]
 8002878:	9800      	ldr	r0, [sp, #0]
 800287a:	9f08      	ldr	r7, [sp, #32]
 800287c:	3219      	adds	r2, #25
 800287e:	47b8      	blx	r7
 8002880:	3001      	adds	r0, #1
 8002882:	d1f0      	bne.n	8002866 <_printf_common+0x8a>
 8002884:	2001      	movs	r0, #1
 8002886:	4240      	negs	r0, r0
 8002888:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800288a:	2030      	movs	r0, #48	; 0x30
 800288c:	18e1      	adds	r1, r4, r3
 800288e:	3143      	adds	r1, #67	; 0x43
 8002890:	7008      	strb	r0, [r1, #0]
 8002892:	0021      	movs	r1, r4
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	3145      	adds	r1, #69	; 0x45
 8002898:	7809      	ldrb	r1, [r1, #0]
 800289a:	18a2      	adds	r2, r4, r2
 800289c:	3243      	adds	r2, #67	; 0x43
 800289e:	3302      	adds	r3, #2
 80028a0:	7011      	strb	r1, [r2, #0]
 80028a2:	e7c1      	b.n	8002828 <_printf_common+0x4c>
 80028a4:	0022      	movs	r2, r4
 80028a6:	2301      	movs	r3, #1
 80028a8:	9901      	ldr	r1, [sp, #4]
 80028aa:	9800      	ldr	r0, [sp, #0]
 80028ac:	9f08      	ldr	r7, [sp, #32]
 80028ae:	321a      	adds	r2, #26
 80028b0:	47b8      	blx	r7
 80028b2:	3001      	adds	r0, #1
 80028b4:	d0e6      	beq.n	8002884 <_printf_common+0xa8>
 80028b6:	3601      	adds	r6, #1
 80028b8:	e7d1      	b.n	800285e <_printf_common+0x82>
	...

080028bc <_printf_i>:
 80028bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028be:	b08b      	sub	sp, #44	; 0x2c
 80028c0:	9206      	str	r2, [sp, #24]
 80028c2:	000a      	movs	r2, r1
 80028c4:	3243      	adds	r2, #67	; 0x43
 80028c6:	9307      	str	r3, [sp, #28]
 80028c8:	9005      	str	r0, [sp, #20]
 80028ca:	9204      	str	r2, [sp, #16]
 80028cc:	7e0a      	ldrb	r2, [r1, #24]
 80028ce:	000c      	movs	r4, r1
 80028d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80028d2:	2a78      	cmp	r2, #120	; 0x78
 80028d4:	d809      	bhi.n	80028ea <_printf_i+0x2e>
 80028d6:	2a62      	cmp	r2, #98	; 0x62
 80028d8:	d80b      	bhi.n	80028f2 <_printf_i+0x36>
 80028da:	2a00      	cmp	r2, #0
 80028dc:	d100      	bne.n	80028e0 <_printf_i+0x24>
 80028de:	e0be      	b.n	8002a5e <_printf_i+0x1a2>
 80028e0:	497c      	ldr	r1, [pc, #496]	; (8002ad4 <_printf_i+0x218>)
 80028e2:	9103      	str	r1, [sp, #12]
 80028e4:	2a58      	cmp	r2, #88	; 0x58
 80028e6:	d100      	bne.n	80028ea <_printf_i+0x2e>
 80028e8:	e093      	b.n	8002a12 <_printf_i+0x156>
 80028ea:	0026      	movs	r6, r4
 80028ec:	3642      	adds	r6, #66	; 0x42
 80028ee:	7032      	strb	r2, [r6, #0]
 80028f0:	e022      	b.n	8002938 <_printf_i+0x7c>
 80028f2:	0010      	movs	r0, r2
 80028f4:	3863      	subs	r0, #99	; 0x63
 80028f6:	2815      	cmp	r0, #21
 80028f8:	d8f7      	bhi.n	80028ea <_printf_i+0x2e>
 80028fa:	f7fd fc05 	bl	8000108 <__gnu_thumb1_case_shi>
 80028fe:	0016      	.short	0x0016
 8002900:	fff6001f 	.word	0xfff6001f
 8002904:	fff6fff6 	.word	0xfff6fff6
 8002908:	001ffff6 	.word	0x001ffff6
 800290c:	fff6fff6 	.word	0xfff6fff6
 8002910:	fff6fff6 	.word	0xfff6fff6
 8002914:	003600a3 	.word	0x003600a3
 8002918:	fff60083 	.word	0xfff60083
 800291c:	00b4fff6 	.word	0x00b4fff6
 8002920:	0036fff6 	.word	0x0036fff6
 8002924:	fff6fff6 	.word	0xfff6fff6
 8002928:	0087      	.short	0x0087
 800292a:	0026      	movs	r6, r4
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	3642      	adds	r6, #66	; 0x42
 8002930:	1d11      	adds	r1, r2, #4
 8002932:	6019      	str	r1, [r3, #0]
 8002934:	6813      	ldr	r3, [r2, #0]
 8002936:	7033      	strb	r3, [r6, #0]
 8002938:	2301      	movs	r3, #1
 800293a:	e0a2      	b.n	8002a82 <_printf_i+0x1c6>
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	6809      	ldr	r1, [r1, #0]
 8002940:	1d02      	adds	r2, r0, #4
 8002942:	060d      	lsls	r5, r1, #24
 8002944:	d50b      	bpl.n	800295e <_printf_i+0xa2>
 8002946:	6805      	ldr	r5, [r0, #0]
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	2d00      	cmp	r5, #0
 800294c:	da03      	bge.n	8002956 <_printf_i+0x9a>
 800294e:	232d      	movs	r3, #45	; 0x2d
 8002950:	9a04      	ldr	r2, [sp, #16]
 8002952:	426d      	negs	r5, r5
 8002954:	7013      	strb	r3, [r2, #0]
 8002956:	4b5f      	ldr	r3, [pc, #380]	; (8002ad4 <_printf_i+0x218>)
 8002958:	270a      	movs	r7, #10
 800295a:	9303      	str	r3, [sp, #12]
 800295c:	e01b      	b.n	8002996 <_printf_i+0xda>
 800295e:	6805      	ldr	r5, [r0, #0]
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	0649      	lsls	r1, r1, #25
 8002964:	d5f1      	bpl.n	800294a <_printf_i+0x8e>
 8002966:	b22d      	sxth	r5, r5
 8002968:	e7ef      	b.n	800294a <_printf_i+0x8e>
 800296a:	680d      	ldr	r5, [r1, #0]
 800296c:	6819      	ldr	r1, [r3, #0]
 800296e:	1d08      	adds	r0, r1, #4
 8002970:	6018      	str	r0, [r3, #0]
 8002972:	062e      	lsls	r6, r5, #24
 8002974:	d501      	bpl.n	800297a <_printf_i+0xbe>
 8002976:	680d      	ldr	r5, [r1, #0]
 8002978:	e003      	b.n	8002982 <_printf_i+0xc6>
 800297a:	066d      	lsls	r5, r5, #25
 800297c:	d5fb      	bpl.n	8002976 <_printf_i+0xba>
 800297e:	680d      	ldr	r5, [r1, #0]
 8002980:	b2ad      	uxth	r5, r5
 8002982:	4b54      	ldr	r3, [pc, #336]	; (8002ad4 <_printf_i+0x218>)
 8002984:	2708      	movs	r7, #8
 8002986:	9303      	str	r3, [sp, #12]
 8002988:	2a6f      	cmp	r2, #111	; 0x6f
 800298a:	d000      	beq.n	800298e <_printf_i+0xd2>
 800298c:	3702      	adds	r7, #2
 800298e:	0023      	movs	r3, r4
 8002990:	2200      	movs	r2, #0
 8002992:	3343      	adds	r3, #67	; 0x43
 8002994:	701a      	strb	r2, [r3, #0]
 8002996:	6863      	ldr	r3, [r4, #4]
 8002998:	60a3      	str	r3, [r4, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	db03      	blt.n	80029a6 <_printf_i+0xea>
 800299e:	2104      	movs	r1, #4
 80029a0:	6822      	ldr	r2, [r4, #0]
 80029a2:	438a      	bics	r2, r1
 80029a4:	6022      	str	r2, [r4, #0]
 80029a6:	2d00      	cmp	r5, #0
 80029a8:	d102      	bne.n	80029b0 <_printf_i+0xf4>
 80029aa:	9e04      	ldr	r6, [sp, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00c      	beq.n	80029ca <_printf_i+0x10e>
 80029b0:	9e04      	ldr	r6, [sp, #16]
 80029b2:	0028      	movs	r0, r5
 80029b4:	0039      	movs	r1, r7
 80029b6:	f7fd fc37 	bl	8000228 <__aeabi_uidivmod>
 80029ba:	9b03      	ldr	r3, [sp, #12]
 80029bc:	3e01      	subs	r6, #1
 80029be:	5c5b      	ldrb	r3, [r3, r1]
 80029c0:	7033      	strb	r3, [r6, #0]
 80029c2:	002b      	movs	r3, r5
 80029c4:	0005      	movs	r5, r0
 80029c6:	429f      	cmp	r7, r3
 80029c8:	d9f3      	bls.n	80029b2 <_printf_i+0xf6>
 80029ca:	2f08      	cmp	r7, #8
 80029cc:	d109      	bne.n	80029e2 <_printf_i+0x126>
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	07db      	lsls	r3, r3, #31
 80029d2:	d506      	bpl.n	80029e2 <_printf_i+0x126>
 80029d4:	6862      	ldr	r2, [r4, #4]
 80029d6:	6923      	ldr	r3, [r4, #16]
 80029d8:	429a      	cmp	r2, r3
 80029da:	dc02      	bgt.n	80029e2 <_printf_i+0x126>
 80029dc:	2330      	movs	r3, #48	; 0x30
 80029de:	3e01      	subs	r6, #1
 80029e0:	7033      	strb	r3, [r6, #0]
 80029e2:	9b04      	ldr	r3, [sp, #16]
 80029e4:	1b9b      	subs	r3, r3, r6
 80029e6:	6123      	str	r3, [r4, #16]
 80029e8:	9b07      	ldr	r3, [sp, #28]
 80029ea:	0021      	movs	r1, r4
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	9805      	ldr	r0, [sp, #20]
 80029f0:	9b06      	ldr	r3, [sp, #24]
 80029f2:	aa09      	add	r2, sp, #36	; 0x24
 80029f4:	f7ff fef2 	bl	80027dc <_printf_common>
 80029f8:	3001      	adds	r0, #1
 80029fa:	d147      	bne.n	8002a8c <_printf_i+0x1d0>
 80029fc:	2001      	movs	r0, #1
 80029fe:	4240      	negs	r0, r0
 8002a00:	b00b      	add	sp, #44	; 0x2c
 8002a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a04:	2220      	movs	r2, #32
 8002a06:	6809      	ldr	r1, [r1, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	6022      	str	r2, [r4, #0]
 8002a0c:	2278      	movs	r2, #120	; 0x78
 8002a0e:	4932      	ldr	r1, [pc, #200]	; (8002ad8 <_printf_i+0x21c>)
 8002a10:	9103      	str	r1, [sp, #12]
 8002a12:	0021      	movs	r1, r4
 8002a14:	3145      	adds	r1, #69	; 0x45
 8002a16:	700a      	strb	r2, [r1, #0]
 8002a18:	6819      	ldr	r1, [r3, #0]
 8002a1a:	6822      	ldr	r2, [r4, #0]
 8002a1c:	c920      	ldmia	r1!, {r5}
 8002a1e:	0610      	lsls	r0, r2, #24
 8002a20:	d402      	bmi.n	8002a28 <_printf_i+0x16c>
 8002a22:	0650      	lsls	r0, r2, #25
 8002a24:	d500      	bpl.n	8002a28 <_printf_i+0x16c>
 8002a26:	b2ad      	uxth	r5, r5
 8002a28:	6019      	str	r1, [r3, #0]
 8002a2a:	07d3      	lsls	r3, r2, #31
 8002a2c:	d502      	bpl.n	8002a34 <_printf_i+0x178>
 8002a2e:	2320      	movs	r3, #32
 8002a30:	4313      	orrs	r3, r2
 8002a32:	6023      	str	r3, [r4, #0]
 8002a34:	2710      	movs	r7, #16
 8002a36:	2d00      	cmp	r5, #0
 8002a38:	d1a9      	bne.n	800298e <_printf_i+0xd2>
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	4393      	bics	r3, r2
 8002a40:	6023      	str	r3, [r4, #0]
 8002a42:	e7a4      	b.n	800298e <_printf_i+0xd2>
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	680d      	ldr	r5, [r1, #0]
 8002a48:	1d10      	adds	r0, r2, #4
 8002a4a:	6949      	ldr	r1, [r1, #20]
 8002a4c:	6018      	str	r0, [r3, #0]
 8002a4e:	6813      	ldr	r3, [r2, #0]
 8002a50:	062e      	lsls	r6, r5, #24
 8002a52:	d501      	bpl.n	8002a58 <_printf_i+0x19c>
 8002a54:	6019      	str	r1, [r3, #0]
 8002a56:	e002      	b.n	8002a5e <_printf_i+0x1a2>
 8002a58:	066d      	lsls	r5, r5, #25
 8002a5a:	d5fb      	bpl.n	8002a54 <_printf_i+0x198>
 8002a5c:	8019      	strh	r1, [r3, #0]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	9e04      	ldr	r6, [sp, #16]
 8002a62:	6123      	str	r3, [r4, #16]
 8002a64:	e7c0      	b.n	80029e8 <_printf_i+0x12c>
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	1d11      	adds	r1, r2, #4
 8002a6a:	6019      	str	r1, [r3, #0]
 8002a6c:	6816      	ldr	r6, [r2, #0]
 8002a6e:	2100      	movs	r1, #0
 8002a70:	0030      	movs	r0, r6
 8002a72:	6862      	ldr	r2, [r4, #4]
 8002a74:	f000 f858 	bl	8002b28 <memchr>
 8002a78:	2800      	cmp	r0, #0
 8002a7a:	d001      	beq.n	8002a80 <_printf_i+0x1c4>
 8002a7c:	1b80      	subs	r0, r0, r6
 8002a7e:	6060      	str	r0, [r4, #4]
 8002a80:	6863      	ldr	r3, [r4, #4]
 8002a82:	6123      	str	r3, [r4, #16]
 8002a84:	2300      	movs	r3, #0
 8002a86:	9a04      	ldr	r2, [sp, #16]
 8002a88:	7013      	strb	r3, [r2, #0]
 8002a8a:	e7ad      	b.n	80029e8 <_printf_i+0x12c>
 8002a8c:	0032      	movs	r2, r6
 8002a8e:	6923      	ldr	r3, [r4, #16]
 8002a90:	9906      	ldr	r1, [sp, #24]
 8002a92:	9805      	ldr	r0, [sp, #20]
 8002a94:	9d07      	ldr	r5, [sp, #28]
 8002a96:	47a8      	blx	r5
 8002a98:	3001      	adds	r0, #1
 8002a9a:	d0af      	beq.n	80029fc <_printf_i+0x140>
 8002a9c:	6823      	ldr	r3, [r4, #0]
 8002a9e:	079b      	lsls	r3, r3, #30
 8002aa0:	d415      	bmi.n	8002ace <_printf_i+0x212>
 8002aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aa4:	68e0      	ldr	r0, [r4, #12]
 8002aa6:	4298      	cmp	r0, r3
 8002aa8:	daaa      	bge.n	8002a00 <_printf_i+0x144>
 8002aaa:	0018      	movs	r0, r3
 8002aac:	e7a8      	b.n	8002a00 <_printf_i+0x144>
 8002aae:	0022      	movs	r2, r4
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	9906      	ldr	r1, [sp, #24]
 8002ab4:	9805      	ldr	r0, [sp, #20]
 8002ab6:	9e07      	ldr	r6, [sp, #28]
 8002ab8:	3219      	adds	r2, #25
 8002aba:	47b0      	blx	r6
 8002abc:	3001      	adds	r0, #1
 8002abe:	d09d      	beq.n	80029fc <_printf_i+0x140>
 8002ac0:	3501      	adds	r5, #1
 8002ac2:	68e3      	ldr	r3, [r4, #12]
 8002ac4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ac6:	1a9b      	subs	r3, r3, r2
 8002ac8:	42ab      	cmp	r3, r5
 8002aca:	dcf0      	bgt.n	8002aae <_printf_i+0x1f2>
 8002acc:	e7e9      	b.n	8002aa2 <_printf_i+0x1e6>
 8002ace:	2500      	movs	r5, #0
 8002ad0:	e7f7      	b.n	8002ac2 <_printf_i+0x206>
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	08002d08 	.word	0x08002d08
 8002ad8:	08002d19 	.word	0x08002d19

08002adc <memmove>:
 8002adc:	b510      	push	{r4, lr}
 8002ade:	4288      	cmp	r0, r1
 8002ae0:	d902      	bls.n	8002ae8 <memmove+0xc>
 8002ae2:	188b      	adds	r3, r1, r2
 8002ae4:	4298      	cmp	r0, r3
 8002ae6:	d303      	bcc.n	8002af0 <memmove+0x14>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	e007      	b.n	8002afc <memmove+0x20>
 8002aec:	5c8b      	ldrb	r3, [r1, r2]
 8002aee:	5483      	strb	r3, [r0, r2]
 8002af0:	3a01      	subs	r2, #1
 8002af2:	d2fb      	bcs.n	8002aec <memmove+0x10>
 8002af4:	bd10      	pop	{r4, pc}
 8002af6:	5ccc      	ldrb	r4, [r1, r3]
 8002af8:	54c4      	strb	r4, [r0, r3]
 8002afa:	3301      	adds	r3, #1
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d1fa      	bne.n	8002af6 <memmove+0x1a>
 8002b00:	e7f8      	b.n	8002af4 <memmove+0x18>
	...

08002b04 <_sbrk_r>:
 8002b04:	2300      	movs	r3, #0
 8002b06:	b570      	push	{r4, r5, r6, lr}
 8002b08:	4d06      	ldr	r5, [pc, #24]	; (8002b24 <_sbrk_r+0x20>)
 8002b0a:	0004      	movs	r4, r0
 8002b0c:	0008      	movs	r0, r1
 8002b0e:	602b      	str	r3, [r5, #0]
 8002b10:	f7fe f9c2 	bl	8000e98 <_sbrk>
 8002b14:	1c43      	adds	r3, r0, #1
 8002b16:	d103      	bne.n	8002b20 <_sbrk_r+0x1c>
 8002b18:	682b      	ldr	r3, [r5, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d000      	beq.n	8002b20 <_sbrk_r+0x1c>
 8002b1e:	6023      	str	r3, [r4, #0]
 8002b20:	bd70      	pop	{r4, r5, r6, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	200003f0 	.word	0x200003f0

08002b28 <memchr>:
 8002b28:	b2c9      	uxtb	r1, r1
 8002b2a:	1882      	adds	r2, r0, r2
 8002b2c:	4290      	cmp	r0, r2
 8002b2e:	d101      	bne.n	8002b34 <memchr+0xc>
 8002b30:	2000      	movs	r0, #0
 8002b32:	4770      	bx	lr
 8002b34:	7803      	ldrb	r3, [r0, #0]
 8002b36:	428b      	cmp	r3, r1
 8002b38:	d0fb      	beq.n	8002b32 <memchr+0xa>
 8002b3a:	3001      	adds	r0, #1
 8002b3c:	e7f6      	b.n	8002b2c <memchr+0x4>

08002b3e <memcpy>:
 8002b3e:	2300      	movs	r3, #0
 8002b40:	b510      	push	{r4, lr}
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d100      	bne.n	8002b48 <memcpy+0xa>
 8002b46:	bd10      	pop	{r4, pc}
 8002b48:	5ccc      	ldrb	r4, [r1, r3]
 8002b4a:	54c4      	strb	r4, [r0, r3]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	e7f8      	b.n	8002b42 <memcpy+0x4>

08002b50 <_realloc_r>:
 8002b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b52:	0007      	movs	r7, r0
 8002b54:	000e      	movs	r6, r1
 8002b56:	0014      	movs	r4, r2
 8002b58:	2900      	cmp	r1, #0
 8002b5a:	d105      	bne.n	8002b68 <_realloc_r+0x18>
 8002b5c:	0011      	movs	r1, r2
 8002b5e:	f7ff fc49 	bl	80023f4 <_malloc_r>
 8002b62:	0005      	movs	r5, r0
 8002b64:	0028      	movs	r0, r5
 8002b66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002b68:	2a00      	cmp	r2, #0
 8002b6a:	d103      	bne.n	8002b74 <_realloc_r+0x24>
 8002b6c:	f7ff fbd6 	bl	800231c <_free_r>
 8002b70:	0025      	movs	r5, r4
 8002b72:	e7f7      	b.n	8002b64 <_realloc_r+0x14>
 8002b74:	f000 f81b 	bl	8002bae <_malloc_usable_size_r>
 8002b78:	9001      	str	r0, [sp, #4]
 8002b7a:	4284      	cmp	r4, r0
 8002b7c:	d803      	bhi.n	8002b86 <_realloc_r+0x36>
 8002b7e:	0035      	movs	r5, r6
 8002b80:	0843      	lsrs	r3, r0, #1
 8002b82:	42a3      	cmp	r3, r4
 8002b84:	d3ee      	bcc.n	8002b64 <_realloc_r+0x14>
 8002b86:	0021      	movs	r1, r4
 8002b88:	0038      	movs	r0, r7
 8002b8a:	f7ff fc33 	bl	80023f4 <_malloc_r>
 8002b8e:	1e05      	subs	r5, r0, #0
 8002b90:	d0e8      	beq.n	8002b64 <_realloc_r+0x14>
 8002b92:	9b01      	ldr	r3, [sp, #4]
 8002b94:	0022      	movs	r2, r4
 8002b96:	429c      	cmp	r4, r3
 8002b98:	d900      	bls.n	8002b9c <_realloc_r+0x4c>
 8002b9a:	001a      	movs	r2, r3
 8002b9c:	0031      	movs	r1, r6
 8002b9e:	0028      	movs	r0, r5
 8002ba0:	f7ff ffcd 	bl	8002b3e <memcpy>
 8002ba4:	0031      	movs	r1, r6
 8002ba6:	0038      	movs	r0, r7
 8002ba8:	f7ff fbb8 	bl	800231c <_free_r>
 8002bac:	e7da      	b.n	8002b64 <_realloc_r+0x14>

08002bae <_malloc_usable_size_r>:
 8002bae:	1f0b      	subs	r3, r1, #4
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	1f18      	subs	r0, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	da01      	bge.n	8002bbc <_malloc_usable_size_r+0xe>
 8002bb8:	580b      	ldr	r3, [r1, r0]
 8002bba:	18c0      	adds	r0, r0, r3
 8002bbc:	4770      	bx	lr
	...

08002bc0 <_init>:
 8002bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bc6:	bc08      	pop	{r3}
 8002bc8:	469e      	mov	lr, r3
 8002bca:	4770      	bx	lr

08002bcc <_fini>:
 8002bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bd2:	bc08      	pop	{r3}
 8002bd4:	469e      	mov	lr, r3
 8002bd6:	4770      	bx	lr
