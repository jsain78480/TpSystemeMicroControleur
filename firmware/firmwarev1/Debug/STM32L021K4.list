
STM32L021K4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c64  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002d24  08002d24  00012d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d58  08002d58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d58  08002d58  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d58  08002d58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d5c  08002d5c  00012d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  08002d6c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08002d6c  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ab76  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002774  00000000  00000000  0002abed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  0002d368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a97  00000000  00000000  0002e1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004f7c  00000000  00000000  0002ec3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f724  00000000  00000000  00033bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00078396  00000000  00000000  000432df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030dc  00000000  00000000  000bb678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  000be754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002d0c 	.word	0x08002d0c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002d0c 	.word	0x08002d0c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LL_ADC_SetCommonFrequencyMode>:
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_HIGH
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonFrequencyMode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonFrequencyMode)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a05      	ldr	r2, [pc, #20]	; (8000244 <LL_ADC_SetCommonFrequencyMode+0x24>)
 8000230:	401a      	ands	r2, r3
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	431a      	orrs	r2, r3
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	601a      	str	r2, [r3, #0]
}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	46bd      	mov	sp, r7
 800023e:	b002      	add	sp, #8
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	fdffffff 	.word	0xfdffffff

08000248 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	2207      	movs	r2, #7
 8000258:	4393      	bics	r3, r2
 800025a:	001a      	movs	r2, r3
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	431a      	orrs	r2, r3
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	615a      	str	r2, [r3, #20]
}
 8000264:	46c0      	nop			; (mov r8, r8)
 8000266:	46bd      	mov	sp, r7
 8000268:	b002      	add	sp, #8
 800026a:	bd80      	pop	{r7, pc}

0800026c <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	68db      	ldr	r3, [r3, #12]
 800027a:	2204      	movs	r2, #4
 800027c:	4393      	bics	r3, r2
 800027e:	001a      	movs	r2, r3
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	431a      	orrs	r2, r3
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	60da      	str	r2, [r3, #12]
}
 8000288:	46c0      	nop			; (mov r8, r8)
 800028a:	46bd      	mov	sp, r7
 800028c:	b002      	add	sp, #8
 800028e:	bd80      	pop	{r7, pc}

08000290 <LL_ADC_REG_SetSequencerChAdd>:
  *
  *         (1) On STM32L0, parameter not available on all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	035b      	lsls	r3, r3, #13
 80002a2:	0b5b      	lsrs	r3, r3, #13
 80002a4:	431a      	orrs	r2, r3
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	46bd      	mov	sp, r7
 80002ae:	b002      	add	sp, #8
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b082      	sub	sp, #8
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
 80002ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	691b      	ldr	r3, [r3, #16]
 80002c0:	2201      	movs	r2, #1
 80002c2:	4393      	bics	r3, r2
 80002c4:	001a      	movs	r2, r3
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	431a      	orrs	r2, r3
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	611a      	str	r2, [r3, #16]
}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	46bd      	mov	sp, r7
 80002d2:	b002      	add	sp, #8
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	4a05      	ldr	r2, [pc, #20]	; (80002fc <LL_ADC_EnableInternalRegulator+0x24>)
 80002e6:	4013      	ands	r3, r2
 80002e8:	2280      	movs	r2, #128	; 0x80
 80002ea:	0552      	lsls	r2, r2, #21
 80002ec:	431a      	orrs	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	46bd      	mov	sp, r7
 80002f6:	b002      	add	sp, #8
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	6fffffe8 	.word	0x6fffffe8

08000300 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	2204      	movs	r2, #4
 800030e:	4393      	bics	r3, r2
 8000310:	001a      	movs	r2, r3
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	605a      	str	r2, [r3, #4]
}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	46bd      	mov	sp, r7
 800031a:	b002      	add	sp, #8
 800031c:	bd80      	pop	{r7, pc}

0800031e <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSEQIE        LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 800031e:	b580      	push	{r7, lr}
 8000320:	b082      	sub	sp, #8
 8000322:	af00      	add	r7, sp, #0
 8000324:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	2208      	movs	r2, #8
 800032c:	4393      	bics	r3, r2
 800032e:	001a      	movs	r2, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	605a      	str	r2, [r3, #4]
}
 8000334:	46c0      	nop			; (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b002      	add	sp, #8
 800033a:	bd80      	pop	{r7, pc}

0800033c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <LL_APB2_GRP1_EnableClock+0x28>)
 8000346:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <LL_APB2_GRP1_EnableClock+0x28>)
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	430a      	orrs	r2, r1
 800034e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000350:	4b04      	ldr	r3, [pc, #16]	; (8000364 <LL_APB2_GRP1_EnableClock+0x28>)
 8000352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	4013      	ands	r3, r2
 8000358:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800035a:	68fb      	ldr	r3, [r7, #12]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b004      	add	sp, #16
 8000362:	bd80      	pop	{r7, pc}
 8000364:	40021000 	.word	0x40021000

08000368 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <LL_IOP_GRP1_EnableClock+0x28>)
 8000372:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <LL_IOP_GRP1_EnableClock+0x28>)
 8000376:	687a      	ldr	r2, [r7, #4]
 8000378:	430a      	orrs	r2, r1
 800037a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800037c:	4b04      	ldr	r3, [pc, #16]	; (8000390 <LL_IOP_GRP1_EnableClock+0x28>)
 800037e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	4013      	ands	r3, r2
 8000384:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000386:	68fb      	ldr	r3, [r7, #12]
}
 8000388:	46c0      	nop			; (mov r8, r8)
 800038a:	46bd      	mov	sp, r7
 800038c:	b004      	add	sp, #16
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40021000 	.word	0x40021000

08000394 <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 8000394:	b5b0      	push	{r4, r5, r7, lr}
 8000396:	b090      	sub	sp, #64	; 0x40
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800039a:	2428      	movs	r4, #40	; 0x28
 800039c:	193b      	adds	r3, r7, r4
 800039e:	0018      	movs	r0, r3
 80003a0:	2314      	movs	r3, #20
 80003a2:	001a      	movs	r2, r3
 80003a4:	2100      	movs	r1, #0
 80003a6:	f002 fc85 	bl	8002cb4 <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80003aa:	2518      	movs	r5, #24
 80003ac:	197b      	adds	r3, r7, r5
 80003ae:	0018      	movs	r0, r3
 80003b0:	2310      	movs	r3, #16
 80003b2:	001a      	movs	r2, r3
 80003b4:	2100      	movs	r1, #0
 80003b6:	f002 fc7d 	bl	8002cb4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	003b      	movs	r3, r7
 80003bc:	0018      	movs	r0, r3
 80003be:	2318      	movs	r3, #24
 80003c0:	001a      	movs	r2, r3
 80003c2:	2100      	movs	r1, #0
 80003c4:	f002 fc76 	bl	8002cb4 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80003c8:	2380      	movs	r3, #128	; 0x80
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	0018      	movs	r0, r3
 80003ce:	f7ff ffb5 	bl	800033c <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80003d2:	2001      	movs	r0, #1
 80003d4:	f7ff ffc8 	bl	8000368 <LL_IOP_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PA1   ------> ADC_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80003d8:	003b      	movs	r3, r7
 80003da:	2202      	movs	r2, #2
 80003dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80003de:	003b      	movs	r3, r7
 80003e0:	2203      	movs	r2, #3
 80003e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80003e4:	003b      	movs	r3, r7
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ea:	003a      	movs	r2, r7
 80003ec:	23a0      	movs	r3, #160	; 0xa0
 80003ee:	05db      	lsls	r3, r3, #23
 80003f0:	0011      	movs	r1, r2
 80003f2:	0018      	movs	r0, r3
 80003f4:	f001 fed3 	bl	800219e <LL_GPIO_Init>

  /* USER CODE END ADC_Init 1 */

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_1);
 80003f8:	4a36      	ldr	r2, [pc, #216]	; (80004d4 <MX_ADC_Init+0x140>)
 80003fa:	4b37      	ldr	r3, [pc, #220]	; (80004d8 <MX_ADC_Init+0x144>)
 80003fc:	0011      	movs	r1, r2
 80003fe:	0018      	movs	r0, r3
 8000400:	f7ff ff46 	bl	8000290 <LL_ADC_REG_SetSequencerChAdd>

  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000404:	0021      	movs	r1, r4
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800040c:	187b      	adds	r3, r7, r1
 800040e:	2200      	movs	r2, #0
 8000410:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000412:	187b      	adds	r3, r7, r1
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000418:	187b      	adds	r3, r7, r1
 800041a:	2200      	movs	r2, #0
 800041c:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 800041e:	187b      	adds	r3, r7, r1
 8000420:	2200      	movs	r2, #0
 8000422:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000424:	187b      	adds	r3, r7, r1
 8000426:	4a2c      	ldr	r2, [pc, #176]	; (80004d8 <MX_ADC_Init+0x144>)
 8000428:	0019      	movs	r1, r3
 800042a:	0010      	movs	r0, r2
 800042c:	f001 fdcc 	bl	8001fc8 <LL_ADC_REG_Init>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8000430:	4b29      	ldr	r3, [pc, #164]	; (80004d8 <MX_ADC_Init+0x144>)
 8000432:	2100      	movs	r1, #0
 8000434:	0018      	movs	r0, r3
 8000436:	f7ff ff07 	bl	8000248 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 800043a:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <MX_ADC_Init+0x144>)
 800043c:	2100      	movs	r1, #0
 800043e:	0018      	movs	r0, r3
 8000440:	f7ff ff37 	bl	80002b2 <LL_ADC_SetOverSamplingScope>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8000444:	4b24      	ldr	r3, [pc, #144]	; (80004d8 <MX_ADC_Init+0x144>)
 8000446:	2100      	movs	r1, #0
 8000448:	0018      	movs	r0, r3
 800044a:	f7ff ff0f 	bl	800026c <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_HIGH);
 800044e:	4b23      	ldr	r3, [pc, #140]	; (80004dc <MX_ADC_Init+0x148>)
 8000450:	2100      	movs	r1, #0
 8000452:	0018      	movs	r0, r3
 8000454:	f7ff fee4 	bl	8000220 <LL_ADC_SetCommonFrequencyMode>
  LL_ADC_DisableIT_EOC(ADC1);
 8000458:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <MX_ADC_Init+0x144>)
 800045a:	0018      	movs	r0, r3
 800045c:	f7ff ff50 	bl	8000300 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8000460:	4b1d      	ldr	r3, [pc, #116]	; (80004d8 <MX_ADC_Init+0x144>)
 8000462:	0018      	movs	r0, r3
 8000464:	f7ff ff5b 	bl	800031e <LL_ADC_DisableIT_EOS>
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV1;
 8000468:	197b      	adds	r3, r7, r5
 800046a:	22c0      	movs	r2, #192	; 0xc0
 800046c:	0612      	lsls	r2, r2, #24
 800046e:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000470:	197b      	adds	r3, r7, r5
 8000472:	2200      	movs	r2, #0
 8000474:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000476:	197b      	adds	r3, r7, r5
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800047c:	197b      	adds	r3, r7, r5
 800047e:	2200      	movs	r2, #0
 8000480:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000482:	197b      	adds	r3, r7, r5
 8000484:	4a14      	ldr	r2, [pc, #80]	; (80004d8 <MX_ADC_Init+0x144>)
 8000486:	0019      	movs	r1, r3
 8000488:	0010      	movs	r0, r2
 800048a:	f001 fd67 	bl	8001f5c <LL_ADC_Init>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 800048e:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <MX_ADC_Init+0x144>)
 8000490:	0018      	movs	r0, r3
 8000492:	f7ff ff21 	bl	80002d8 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000496:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <MX_ADC_Init+0x14c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4912      	ldr	r1, [pc, #72]	; (80004e4 <MX_ADC_Init+0x150>)
 800049c:	0018      	movs	r0, r3
 800049e:	f7ff fe33 	bl	8000108 <__udivsi3>
 80004a2:	0003      	movs	r3, r0
 80004a4:	001a      	movs	r2, r3
 80004a6:	0013      	movs	r3, r2
 80004a8:	009b      	lsls	r3, r3, #2
 80004aa:	189b      	adds	r3, r3, r2
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	210a      	movs	r1, #10
 80004b0:	0018      	movs	r0, r3
 80004b2:	f7ff fe29 	bl	8000108 <__udivsi3>
 80004b6:	0003      	movs	r3, r0
 80004b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 80004ba:	e002      	b.n	80004c2 <MX_ADC_Init+0x12e>
  {
    wait_loop_index--;
 80004bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004be:	3b01      	subs	r3, #1
 80004c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 80004c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d1f9      	bne.n	80004bc <MX_ADC_Init+0x128>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b010      	add	sp, #64	; 0x40
 80004d0:	bdb0      	pop	{r4, r5, r7, pc}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	04000002 	.word	0x04000002
 80004d8:	40012400 	.word	0x40012400
 80004dc:	40012708 	.word	0x40012708
 80004e0:	20000000 	.word	0x20000000
 80004e4:	00030d40 	.word	0x00030d40

080004e8 <LL_IOP_GRP1_EnableClock>:
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <LL_IOP_GRP1_EnableClock+0x28>)
 80004f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <LL_IOP_GRP1_EnableClock+0x28>)
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	430a      	orrs	r2, r1
 80004fa:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <LL_IOP_GRP1_EnableClock+0x28>)
 80004fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	4013      	ands	r3, r2
 8000504:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000506:	68fb      	ldr	r3, [r7, #12]
}
 8000508:	46c0      	nop			; (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	b004      	add	sp, #16
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40021000 	.word	0x40021000

08000514 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	003b      	movs	r3, r7
 800051c:	0018      	movs	r0, r3
 800051e:	2318      	movs	r3, #24
 8000520:	001a      	movs	r2, r3
 8000522:	2100      	movs	r1, #0
 8000524:	f002 fbc6 	bl	8002cb4 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000528:	2001      	movs	r0, #1
 800052a:	f7ff ffdd 	bl	80004e8 <LL_IOP_GRP1_EnableClock>

  /**/
  GPIO_InitStruct.Pin = DAC_nLDAC_Pin;
 800052e:	003b      	movs	r3, r7
 8000530:	2208      	movs	r2, #8
 8000532:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000534:	003b      	movs	r3, r7
 8000536:	2203      	movs	r2, #3
 8000538:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800053a:	003b      	movs	r3, r7
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DAC_nLDAC_GPIO_Port, &GPIO_InitStruct);
 8000540:	003a      	movs	r2, r7
 8000542:	23a0      	movs	r3, #160	; 0xa0
 8000544:	05db      	lsls	r3, r3, #23
 8000546:	0011      	movs	r1, r2
 8000548:	0018      	movs	r0, r3
 800054a:	f001 fe28 	bl	800219e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DAC_nCS_Pin;
 800054e:	003b      	movs	r3, r7
 8000550:	2210      	movs	r2, #16
 8000552:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000554:	003b      	movs	r3, r7
 8000556:	2203      	movs	r2, #3
 8000558:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800055a:	003b      	movs	r3, r7
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DAC_nCS_GPIO_Port, &GPIO_InitStruct);
 8000560:	003a      	movs	r2, r7
 8000562:	23a0      	movs	r3, #160	; 0xa0
 8000564:	05db      	lsls	r3, r3, #23
 8000566:	0011      	movs	r1, r2
 8000568:	0018      	movs	r0, r3
 800056a:	f001 fe18 	bl	800219e <LL_GPIO_Init>

}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b006      	add	sp, #24
 8000574:	bd80      	pop	{r7, pc}

08000576 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	b082      	sub	sp, #8
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2201      	movs	r2, #1
 8000584:	431a      	orrs	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	601a      	str	r2, [r3, #0]
}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	b002      	add	sp, #8
 8000590:	bd80      	pop	{r7, pc}

08000592 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	b082      	sub	sp, #8
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6a1a      	ldr	r2, [r3, #32]
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	431a      	orrs	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	621a      	str	r2, [r3, #32]
}
 80005a8:	46c0      	nop			; (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	b002      	add	sp, #8
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	635a      	str	r2, [r3, #52]	; 0x34
}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b002      	add	sp, #8
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <LedStart>:

// Initialisation des données de la structure
Led_t ledStatus = { 0 , 0 };

// Fonction pour démarrer le timer
void LedStart(void){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM2);
 80005cc:	2380      	movs	r3, #128	; 0x80
 80005ce:	05db      	lsls	r3, r3, #23
 80005d0:	0018      	movs	r0, r3
 80005d2:	f7ff ffd0 	bl	8000576 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 80005d6:	2380      	movs	r3, #128	; 0x80
 80005d8:	05db      	lsls	r3, r3, #23
 80005da:	2101      	movs	r1, #1
 80005dc:	0018      	movs	r0, r3
 80005de:	f7ff ffd8 	bl	8000592 <LL_TIM_CC_EnableChannel>
}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <LedSetValue>:

// Configure le rapport cyclique
void LedSetValue(uint8_t val){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	0002      	movs	r2, r0
 80005f0:	1dfb      	adds	r3, r7, #7
 80005f2:	701a      	strb	r2, [r3, #0]
	LL_TIM_OC_SetCompareCH1(TIM2, val);
 80005f4:	1dfb      	adds	r3, r7, #7
 80005f6:	781a      	ldrb	r2, [r3, #0]
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	05db      	lsls	r3, r3, #23
 80005fc:	0011      	movs	r1, r2
 80005fe:	0018      	movs	r0, r3
 8000600:	f7ff ffd6 	bl	80005b0 <LL_TIM_OC_SetCompareCH1>
}
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	b002      	add	sp, #8
 800060a:	bd80      	pop	{r7, pc}

0800060c <LedPulse>:

// Gere l'intensité
void LedPulse(void){
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	//augmentation d'intensité led
	if (ledStatus.updown == 0) {
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <LedPulse+0x54>)
 8000612:	785b      	ldrb	r3, [r3, #1]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d106      	bne.n	8000626 <LedPulse+0x1a>
		ledStatus.luminosite++;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <LedPulse+0x54>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	3301      	adds	r3, #1
 800061e:	b2da      	uxtb	r2, r3
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <LedPulse+0x54>)
 8000622:	701a      	strb	r2, [r3, #0]
 8000624:	e005      	b.n	8000632 <LedPulse+0x26>
	}
	// Diminution de l'intensité
	else {
		ledStatus.luminosite--;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <LedPulse+0x54>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	3b01      	subs	r3, #1
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <LedPulse+0x54>)
 8000630:	701a      	strb	r2, [r3, #0]
	}

	// En mode décrémente
	if (ledStatus.luminosite == 255){
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <LedPulse+0x54>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2bff      	cmp	r3, #255	; 0xff
 8000638:	d102      	bne.n	8000640 <LedPulse+0x34>
		ledStatus.updown = 1;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <LedPulse+0x54>)
 800063c:	2201      	movs	r2, #1
 800063e:	705a      	strb	r2, [r3, #1]
	}

	// En mode incrémente
	if (ledStatus.luminosite == 0){
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <LedPulse+0x54>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d102      	bne.n	800064e <LedPulse+0x42>
		ledStatus.updown = 0;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <LedPulse+0x54>)
 800064a:	2200      	movs	r2, #0
 800064c:	705a      	strb	r2, [r3, #1]
	}
	LedSetValue(ledStatus.luminosite);
 800064e:	4b04      	ldr	r3, [pc, #16]	; (8000660 <LedPulse+0x54>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	0018      	movs	r0, r3
 8000654:	f7ff ffc8 	bl	80005e8 <LedSetValue>
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	20000028 	.word	0x20000028

08000664 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <LL_RCC_HSI_Enable+0x18>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <LL_RCC_HSI_Enable+0x18>)
 800066e:	2101      	movs	r1, #1
 8000670:	430a      	orrs	r2, r1
 8000672:	601a      	str	r2, [r3, #0]
}
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	40021000 	.word	0x40021000

08000680 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <LL_RCC_HSI_IsReady+0x1c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2204      	movs	r2, #4
 800068a:	4013      	ands	r3, r2
 800068c:	2b04      	cmp	r3, #4
 800068e:	d101      	bne.n	8000694 <LL_RCC_HSI_IsReady+0x14>
 8000690:	2301      	movs	r3, #1
 8000692:	e000      	b.n	8000696 <LL_RCC_HSI_IsReady+0x16>
 8000694:	2300      	movs	r3, #0
}
 8000696:	0018      	movs	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40021000 	.word	0x40021000

080006a0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	4a06      	ldr	r2, [pc, #24]	; (80006c8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80006ae:	4013      	ands	r3, r2
 80006b0:	0019      	movs	r1, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	021a      	lsls	r2, r3, #8
 80006b6:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80006b8:	430a      	orrs	r2, r1
 80006ba:	605a      	str	r2, [r3, #4]
}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	b002      	add	sp, #8
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000
 80006c8:	ffffe0ff 	.word	0xffffe0ff

080006cc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <LL_RCC_SetSysClkSource+0x24>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	2203      	movs	r2, #3
 80006da:	4393      	bics	r3, r2
 80006dc:	0019      	movs	r1, r3
 80006de:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <LL_RCC_SetSysClkSource+0x24>)
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	430a      	orrs	r2, r1
 80006e4:	60da      	str	r2, [r3, #12]
}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b002      	add	sp, #8
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	40021000 	.word	0x40021000

080006f4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <LL_RCC_GetSysClkSource+0x14>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	220c      	movs	r2, #12
 80006fe:	4013      	ands	r3, r2
}
 8000700:	0018      	movs	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	40021000 	.word	0x40021000

0800070c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <LL_RCC_SetAHBPrescaler+0x24>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	22f0      	movs	r2, #240	; 0xf0
 800071a:	4393      	bics	r3, r2
 800071c:	0019      	movs	r1, r3
 800071e:	4b04      	ldr	r3, [pc, #16]	; (8000730 <LL_RCC_SetAHBPrescaler+0x24>)
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	430a      	orrs	r2, r1
 8000724:	60da      	str	r2, [r3, #12]
}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b002      	add	sp, #8
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	40021000 	.word	0x40021000

08000734 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <LL_RCC_SetAPB1Prescaler+0x24>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	4a06      	ldr	r2, [pc, #24]	; (800075c <LL_RCC_SetAPB1Prescaler+0x28>)
 8000742:	4013      	ands	r3, r2
 8000744:	0019      	movs	r1, r3
 8000746:	4b04      	ldr	r3, [pc, #16]	; (8000758 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	430a      	orrs	r2, r1
 800074c:	60da      	str	r2, [r3, #12]
}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	b002      	add	sp, #8
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	40021000 	.word	0x40021000
 800075c:	fffff8ff 	.word	0xfffff8ff

08000760 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <LL_RCC_SetAPB2Prescaler+0x24>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	4a06      	ldr	r2, [pc, #24]	; (8000788 <LL_RCC_SetAPB2Prescaler+0x28>)
 800076e:	4013      	ands	r3, r2
 8000770:	0019      	movs	r1, r3
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	430a      	orrs	r2, r1
 8000778:	60da      	str	r2, [r3, #12]
}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b002      	add	sp, #8
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	40021000 	.word	0x40021000
 8000788:	ffffc7ff 	.word	0xffffc7ff

0800078c <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	0c12      	lsrs	r2, r2, #16
 800079c:	43d2      	mvns	r2, r2
 800079e:	401a      	ands	r2, r3
 80007a0:	0011      	movs	r1, r2
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	041b      	lsls	r3, r3, #16
 80007a6:	0c1a      	lsrs	r2, r3, #16
 80007a8:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <LL_RCC_SetUSARTClockSource+0x2c>)
 80007aa:	430a      	orrs	r2, r1
 80007ac:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b002      	add	sp, #8
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	40021000 	.word	0x40021000

080007bc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <LL_FLASH_SetLatency+0x24>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2201      	movs	r2, #1
 80007ca:	4393      	bics	r3, r2
 80007cc:	0019      	movs	r1, r3
 80007ce:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <LL_FLASH_SetLatency+0x24>)
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	430a      	orrs	r2, r1
 80007d4:	601a      	str	r2, [r3, #0]
}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	b002      	add	sp, #8
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	40022000 	.word	0x40022000

080007e4 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80007e8:	4b03      	ldr	r3, [pc, #12]	; (80007f8 <LL_FLASH_GetLatency+0x14>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2201      	movs	r2, #1
 80007ee:	4013      	ands	r3, r2
}
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	40022000 	.word	0x40022000

080007fc <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a06      	ldr	r2, [pc, #24]	; (8000824 <LL_PWR_SetRegulVoltageScaling+0x28>)
 800080a:	4013      	ands	r3, r2
 800080c:	0019      	movs	r1, r3
 800080e:	4b04      	ldr	r3, [pc, #16]	; (8000820 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	430a      	orrs	r2, r1
 8000814:	601a      	str	r2, [r3, #0]
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	40007000 	.word	0x40007000
 8000824:	ffffe7ff 	.word	0xffffe7ff

08000828 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOSF       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <LL_PWR_IsActiveFlag_VOS+0x1c>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	2210      	movs	r2, #16
 8000832:	4013      	ands	r3, r2
 8000834:	3b10      	subs	r3, #16
 8000836:	425a      	negs	r2, r3
 8000838:	4153      	adcs	r3, r2
 800083a:	b2db      	uxtb	r3, r3
}
 800083c:	0018      	movs	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	40007000 	.word	0x40007000

08000848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084c:	f000 fc9c 	bl	8001188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000850:	f000 f814 	bl	800087c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000854:	f7ff fe5e 	bl	8000514 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000858:	f000 fbdc 	bl	8001014 <MX_USART2_UART_Init>
  MX_ADC_Init();
 800085c:	f7ff fd9a 	bl	8000394 <MX_ADC_Init>
  MX_TIM2_Init();
 8000860:	f000 fa27 	bl	8000cb2 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000864:	f000 f894 	bl	8000990 <MX_SPI1_Init>
  MX_TIM21_Init();
 8000868:	f000 faac 	bl	8000dc4 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */

  LedStart();
 800086c:	f7ff feac 	bl	80005c8 <LedStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // LED SIMPLE
	  LedPulse();
 8000870:	f7ff fecc 	bl	800060c <LedPulse>
	  LL_mDelay(1);
 8000874:	2001      	movs	r0, #1
 8000876:	f002 f9ed 	bl	8002c54 <LL_mDelay>
	  LedPulse();
 800087a:	e7f9      	b.n	8000870 <main+0x28>

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000880:	2000      	movs	r0, #0
 8000882:	f7ff ff9b 	bl	80007bc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	f7ff ffac 	bl	80007e4 <LL_FLASH_GetLatency>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d1fb      	bne.n	8000888 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000890:	2380      	movs	r3, #128	; 0x80
 8000892:	011b      	lsls	r3, r3, #4
 8000894:	0018      	movs	r0, r3
 8000896:	f7ff ffb1 	bl	80007fc <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	f7ff ffc4 	bl	8000828 <LL_PWR_IsActiveFlag_VOS>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d1fb      	bne.n	800089c <SystemClock_Config+0x20>
  {
  }
  LL_RCC_HSI_Enable();
 80008a4:	f7ff fede 	bl	8000664 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	f7ff fee9 	bl	8000680 <LL_RCC_HSI_IsReady>
 80008ae:	0003      	movs	r3, r0
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d1fa      	bne.n	80008aa <SystemClock_Config+0x2e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80008b4:	2010      	movs	r0, #16
 80008b6:	f7ff fef3 	bl	80006a0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff ff26 	bl	800070c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff ff37 	bl	8000734 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ff4a 	bl	8000760 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80008cc:	2001      	movs	r0, #1
 80008ce:	f7ff fefd 	bl	80006cc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	f7ff ff0e 	bl	80006f4 <LL_RCC_GetSysClkSource>
 80008d8:	0003      	movs	r3, r0
 80008da:	2b04      	cmp	r3, #4
 80008dc:	d1fa      	bne.n	80008d4 <SystemClock_Config+0x58>
  {

  }
  LL_SetSystemCoreClock(16000000);
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <SystemClock_Config+0x88>)
 80008e0:	0018      	movs	r0, r3
 80008e2:	f002 f9d9 	bl	8002c98 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80008e6:	2003      	movs	r0, #3
 80008e8:	f000 fc6e 	bl	80011c8 <HAL_InitTick>
 80008ec:	1e03      	subs	r3, r0, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80008f0:	f000 f80a 	bl	8000908 <Error_Handler>
  }
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80008f4:	23c0      	movs	r3, #192	; 0xc0
 80008f6:	031b      	lsls	r3, r3, #12
 80008f8:	0018      	movs	r0, r3
 80008fa:	f7ff ff47 	bl	800078c <LL_RCC_SetUSARTClockSource>
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	00f42400 	.word	0x00f42400

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	e7fe      	b.n	8000910 <Error_Handler+0x8>
	...

08000914 <LL_APB2_GRP1_EnableClock>:
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <LL_APB2_GRP1_EnableClock+0x28>)
 800091e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <LL_APB2_GRP1_EnableClock+0x28>)
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	430a      	orrs	r2, r1
 8000926:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <LL_APB2_GRP1_EnableClock+0x28>)
 800092a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	4013      	ands	r3, r2
 8000930:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000932:	68fb      	ldr	r3, [r7, #12]
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b004      	add	sp, #16
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000

08000940 <LL_IOP_GRP1_EnableClock>:
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <LL_IOP_GRP1_EnableClock+0x28>)
 800094a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <LL_IOP_GRP1_EnableClock+0x28>)
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	430a      	orrs	r2, r1
 8000952:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <LL_IOP_GRP1_EnableClock+0x28>)
 8000956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	4013      	ands	r3, r2
 800095c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800095e:	68fb      	ldr	r3, [r7, #12]
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	b004      	add	sp, #16
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40021000 	.word	0x40021000

0800096c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	2210      	movs	r2, #16
 800097c:	4393      	bics	r3, r2
 800097e:	001a      	movs	r2, r3
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	431a      	orrs	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	605a      	str	r2, [r3, #4]
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b002      	add	sp, #8
 800098e:	bd80      	pop	{r7, pc}

08000990 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b091      	sub	sp, #68	; 0x44
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000996:	2418      	movs	r4, #24
 8000998:	193b      	adds	r3, r7, r4
 800099a:	0018      	movs	r0, r3
 800099c:	2328      	movs	r3, #40	; 0x28
 800099e:	001a      	movs	r2, r3
 80009a0:	2100      	movs	r1, #0
 80009a2:	f002 f987 	bl	8002cb4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	003b      	movs	r3, r7
 80009a8:	0018      	movs	r0, r3
 80009aa:	2318      	movs	r3, #24
 80009ac:	001a      	movs	r2, r3
 80009ae:	2100      	movs	r1, #0
 80009b0:	f002 f980 	bl	8002cb4 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	015b      	lsls	r3, r3, #5
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff ffab 	bl	8000914 <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80009be:	2001      	movs	r0, #1
 80009c0:	f7ff ffbe 	bl	8000940 <LL_IOP_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80009c4:	003b      	movs	r3, r7
 80009c6:	2220      	movs	r2, #32
 80009c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009ca:	003b      	movs	r3, r7
 80009cc:	2202      	movs	r2, #2
 80009ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80009d0:	003b      	movs	r3, r7
 80009d2:	2203      	movs	r2, #3
 80009d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009d6:	003b      	movs	r3, r7
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009dc:	003b      	movs	r3, r7
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 80009e2:	003b      	movs	r3, r7
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	003a      	movs	r2, r7
 80009ea:	23a0      	movs	r3, #160	; 0xa0
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	0011      	movs	r1, r2
 80009f0:	0018      	movs	r0, r3
 80009f2:	f001 fbd4 	bl	800219e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80009f6:	003b      	movs	r3, r7
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009fc:	003b      	movs	r3, r7
 80009fe:	2202      	movs	r2, #2
 8000a00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	003b      	movs	r3, r7
 8000a04:	2203      	movs	r2, #3
 8000a06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a08:	003b      	movs	r3, r7
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a0e:	003b      	movs	r3, r7
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000a14:	003b      	movs	r3, r7
 8000a16:	2200      	movs	r2, #0
 8000a18:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	003a      	movs	r2, r7
 8000a1c:	23a0      	movs	r3, #160	; 0xa0
 8000a1e:	05db      	lsls	r3, r3, #23
 8000a20:	0011      	movs	r1, r2
 8000a22:	0018      	movs	r0, r3
 8000a24:	f001 fbbb 	bl	800219e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_HALF_DUPLEX_TX;
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	22c0      	movs	r2, #192	; 0xc0
 8000a2c:	0212      	lsls	r2, r2, #8
 8000a2e:	601a      	str	r2, [r3, #0]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	2282      	movs	r2, #130	; 0x82
 8000a34:	0052      	lsls	r2, r2, #1
 8000a36:	605a      	str	r2, [r3, #4]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000a38:	0021      	movs	r1, r4
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	0092      	lsls	r2, r2, #2
 8000a52:	615a      	str	r2, [r3, #20]
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	61da      	str	r2, [r3, #28]
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2200      	movs	r2, #0
 8000a64:	621a      	str	r2, [r3, #32]
  SPI_InitStruct.CRCPoly = 7;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2207      	movs	r2, #7
 8000a6a:	625a      	str	r2, [r3, #36]	; 0x24
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <MX_SPI1_Init+0xfc>)
 8000a70:	0019      	movs	r1, r3
 8000a72:	0010      	movs	r0, r2
 8000a74:	f001 fda8 	bl	80025c8 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <MX_SPI1_Init+0xfc>)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff ff75 	bl	800096c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b011      	add	sp, #68	; 0x44
 8000a88:	bd90      	pop	{r4, r7, pc}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	40013000 	.word	0x40013000

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a94:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <HAL_MspInit+0x24>)
 8000a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_MspInit+0x24>)
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <HAL_MspInit+0x24>)
 8000aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <HAL_MspInit+0x24>)
 8000aa6:	2180      	movs	r1, #128	; 0x80
 8000aa8:	0549      	lsls	r1, r1, #21
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000adc:	f000 fba8 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <LL_APB1_GRP1_EnableClock>:
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <LL_APB1_GRP1_EnableClock+0x28>)
 8000afa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <LL_APB1_GRP1_EnableClock+0x28>)
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	430a      	orrs	r2, r1
 8000b02:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <LL_APB1_GRP1_EnableClock+0x28>)
 8000b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b004      	add	sp, #16
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40021000 	.word	0x40021000

08000b1c <LL_IOP_GRP1_EnableClock>:
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <LL_IOP_GRP1_EnableClock+0x28>)
 8000b26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <LL_IOP_GRP1_EnableClock+0x28>)
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <LL_IOP_GRP1_EnableClock+0x28>)
 8000b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	4013      	ands	r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b004      	add	sp, #16
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40021000 	.word	0x40021000

08000b48 <LL_TIM_DisableARRPreload>:
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2280      	movs	r2, #128	; 0x80
 8000b56:	4393      	bics	r3, r2
 8000b58:	001a      	movs	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	601a      	str	r2, [r3, #0]
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b002      	add	sp, #8
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <LL_TIM_OC_DisableFast>:
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d00d      	beq.n	8000b94 <LL_TIM_OC_DisableFast+0x2c>
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	2b10      	cmp	r3, #16
 8000b7c:	d008      	beq.n	8000b90 <LL_TIM_OC_DisableFast+0x28>
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d101      	bne.n	8000b8c <LL_TIM_OC_DisableFast+0x24>
 8000b88:	2304      	movs	r3, #4
 8000b8a:	e004      	b.n	8000b96 <LL_TIM_OC_DisableFast+0x2e>
 8000b8c:	2306      	movs	r3, #6
 8000b8e:	e002      	b.n	8000b96 <LL_TIM_OC_DisableFast+0x2e>
 8000b90:	2302      	movs	r3, #2
 8000b92:	e000      	b.n	8000b96 <LL_TIM_OC_DisableFast+0x2e>
 8000b94:	2300      	movs	r3, #0
 8000b96:	200f      	movs	r0, #15
 8000b98:	183a      	adds	r2, r7, r0
 8000b9a:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3318      	adds	r3, #24
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	183b      	adds	r3, r7, r0
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <LL_TIM_OC_DisableFast+0x68>)
 8000ba8:	5cd3      	ldrb	r3, [r2, r3]
 8000baa:	18cb      	adds	r3, r1, r3
 8000bac:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	183a      	adds	r2, r7, r0
 8000bb4:	7812      	ldrb	r2, [r2, #0]
 8000bb6:	4907      	ldr	r1, [pc, #28]	; (8000bd4 <LL_TIM_OC_DisableFast+0x6c>)
 8000bb8:	5c8a      	ldrb	r2, [r1, r2]
 8000bba:	0011      	movs	r1, r2
 8000bbc:	2204      	movs	r2, #4
 8000bbe:	408a      	lsls	r2, r1
 8000bc0:	43d2      	mvns	r2, r2
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	601a      	str	r2, [r3, #0]
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b004      	add	sp, #16
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	08002d48 	.word	0x08002d48
 8000bd4:	08002d50 	.word	0x08002d50

08000bd8 <LL_TIM_OC_EnablePreload>:
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d00d      	beq.n	8000c04 <LL_TIM_OC_EnablePreload+0x2c>
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2b10      	cmp	r3, #16
 8000bec:	d008      	beq.n	8000c00 <LL_TIM_OC_EnablePreload+0x28>
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d101      	bne.n	8000bfc <LL_TIM_OC_EnablePreload+0x24>
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	e004      	b.n	8000c06 <LL_TIM_OC_EnablePreload+0x2e>
 8000bfc:	2306      	movs	r3, #6
 8000bfe:	e002      	b.n	8000c06 <LL_TIM_OC_EnablePreload+0x2e>
 8000c00:	2302      	movs	r3, #2
 8000c02:	e000      	b.n	8000c06 <LL_TIM_OC_EnablePreload+0x2e>
 8000c04:	2300      	movs	r3, #0
 8000c06:	200f      	movs	r0, #15
 8000c08:	183a      	adds	r2, r7, r0
 8000c0a:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3318      	adds	r3, #24
 8000c10:	0019      	movs	r1, r3
 8000c12:	183b      	adds	r3, r7, r0
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <LL_TIM_OC_EnablePreload+0x68>)
 8000c18:	5cd3      	ldrb	r3, [r2, r3]
 8000c1a:	18cb      	adds	r3, r1, r3
 8000c1c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	183b      	adds	r3, r7, r0
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	4907      	ldr	r1, [pc, #28]	; (8000c44 <LL_TIM_OC_EnablePreload+0x6c>)
 8000c28:	5ccb      	ldrb	r3, [r1, r3]
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	408b      	lsls	r3, r1
 8000c30:	431a      	orrs	r2, r3
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	601a      	str	r2, [r3, #0]
}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b004      	add	sp, #16
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	08002d48 	.word	0x08002d48
 8000c44:	08002d50 	.word	0x08002d50

08000c48 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <LL_TIM_SetClockSource+0x24>)
 8000c58:	401a      	ands	r2, r3
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	609a      	str	r2, [r3, #8]
}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	ffffbff8 	.word	0xffffbff8

08000c70 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	2270      	movs	r2, #112	; 0x70
 8000c80:	4393      	bics	r3, r2
 8000c82:	001a      	movs	r2, r3
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	431a      	orrs	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	605a      	str	r2, [r3, #4]
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b002      	add	sp, #8
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	2280      	movs	r2, #128	; 0x80
 8000ca2:	4393      	bics	r3, r2
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <MX_TIM2_Init>:

TIM_HandleTypeDef htim21;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cb2:	b5b0      	push	{r4, r5, r7, lr}
 8000cb4:	b08e      	sub	sp, #56	; 0x38
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000cb8:	2428      	movs	r4, #40	; 0x28
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	2310      	movs	r3, #16
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	f001 fff6 	bl	8002cb4 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000cc8:	2518      	movs	r5, #24
 8000cca:	197b      	adds	r3, r7, r5
 8000ccc:	0018      	movs	r0, r3
 8000cce:	2310      	movs	r3, #16
 8000cd0:	001a      	movs	r2, r3
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	f001 ffee 	bl	8002cb4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	003b      	movs	r3, r7
 8000cda:	0018      	movs	r0, r3
 8000cdc:	2318      	movs	r3, #24
 8000cde:	001a      	movs	r2, r3
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	f001 ffe7 	bl	8002cb4 <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff ff02 	bl	8000af0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 16000;
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	22fa      	movs	r2, #250	; 0xfa
 8000cf0:	0192      	lsls	r2, r2, #6
 8000cf2:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000cf4:	193b      	adds	r3, r7, r4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 255;
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	22ff      	movs	r2, #255	; 0xff
 8000cfe:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000d00:	193b      	adds	r3, r7, r4
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000d06:	193a      	adds	r2, r7, r4
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	05db      	lsls	r3, r3, #23
 8000d0c:	0011      	movs	r1, r2
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f001 fd06 	bl	8002720 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	05db      	lsls	r3, r3, #23
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f7ff ff15 	bl	8000b48 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	05db      	lsls	r3, r3, #23
 8000d22:	2100      	movs	r1, #0
 8000d24:	0018      	movs	r0, r3
 8000d26:	f7ff ff8f 	bl	8000c48 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8000d2a:	2380      	movs	r3, #128	; 0x80
 8000d2c:	05db      	lsls	r3, r3, #23
 8000d2e:	2101      	movs	r1, #1
 8000d30:	0018      	movs	r0, r3
 8000d32:	f7ff ff51 	bl	8000bd8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000d36:	0029      	movs	r1, r5
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2260      	movs	r2, #96	; 0x60
 8000d3c:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2200      	movs	r2, #0
 8000d42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.CompareValue = 0;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000d50:	187a      	adds	r2, r7, r1
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	05db      	lsls	r3, r3, #23
 8000d56:	2101      	movs	r1, #1
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f001 fd29 	bl	80027b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	05db      	lsls	r3, r3, #23
 8000d62:	2101      	movs	r1, #1
 8000d64:	0018      	movs	r0, r3
 8000d66:	f7ff feff 	bl	8000b68 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	05db      	lsls	r3, r3, #23
 8000d6e:	2100      	movs	r1, #0
 8000d70:	0018      	movs	r0, r3
 8000d72:	f7ff ff7d 	bl	8000c70 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000d76:	2380      	movs	r3, #128	; 0x80
 8000d78:	05db      	lsls	r3, r3, #23
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f7ff ff8a 	bl	8000c94 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000d80:	2001      	movs	r0, #1
 8000d82:	f7ff fecb 	bl	8000b1c <LL_IOP_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA8     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000d86:	003b      	movs	r3, r7
 8000d88:	2280      	movs	r2, #128	; 0x80
 8000d8a:	0052      	lsls	r2, r2, #1
 8000d8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d8e:	003b      	movs	r3, r7
 8000d90:	2202      	movs	r2, #2
 8000d92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d94:	003b      	movs	r3, r7
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d9a:	003b      	movs	r3, r7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000da0:	003b      	movs	r3, r7
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000da6:	003b      	movs	r3, r7
 8000da8:	2205      	movs	r2, #5
 8000daa:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	003a      	movs	r2, r7
 8000dae:	23a0      	movs	r3, #160	; 0xa0
 8000db0:	05db      	lsls	r3, r3, #23
 8000db2:	0011      	movs	r1, r2
 8000db4:	0018      	movs	r0, r3
 8000db6:	f001 f9f2 	bl	800219e <LL_GPIO_Init>

}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b00e      	add	sp, #56	; 0x38
 8000dc0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000dc4 <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dca:	2318      	movs	r3, #24
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	0018      	movs	r0, r3
 8000dd0:	2310      	movs	r3, #16
 8000dd2:	001a      	movs	r2, r3
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	f001 ff6d 	bl	8002cb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dda:	2310      	movs	r3, #16
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	0018      	movs	r0, r3
 8000de0:	2308      	movs	r3, #8
 8000de2:	001a      	movs	r2, r3
 8000de4:	2100      	movs	r1, #0
 8000de6:	f001 ff65 	bl	8002cb4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dea:	003b      	movs	r3, r7
 8000dec:	0018      	movs	r0, r3
 8000dee:	2310      	movs	r3, #16
 8000df0:	001a      	movs	r2, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	f001 ff5e 	bl	8002cb4 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000df8:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <MX_TIM21_Init+0xf4>)
 8000dfa:	4a30      	ldr	r2, [pc, #192]	; (8000ebc <MX_TIM21_Init+0xf8>)
 8000dfc:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 15999;
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <MX_TIM21_Init+0xf4>)
 8000e00:	4a2f      	ldr	r2, [pc, #188]	; (8000ec0 <MX_TIM21_Init+0xfc>)
 8000e02:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e04:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <MX_TIM21_Init+0xf4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 1;
 8000e0a:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <MX_TIM21_Init+0xf4>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e10:	4b29      	ldr	r3, [pc, #164]	; (8000eb8 <MX_TIM21_Init+0xf4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <MX_TIM21_Init+0xf4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000e1c:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <MX_TIM21_Init+0xf4>)
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f000 fc32 	bl	8001688 <HAL_TIM_Base_Init>
 8000e24:	1e03      	subs	r3, r0, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 8000e28:	f7ff fd6e 	bl	8000908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2c:	2118      	movs	r1, #24
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	2280      	movs	r2, #128	; 0x80
 8000e32:	0152      	lsls	r2, r2, #5
 8000e34:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000e36:	187a      	adds	r2, r7, r1
 8000e38:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <MX_TIM21_Init+0xf4>)
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f000 fd71 	bl	8001924 <HAL_TIM_ConfigClockSource>
 8000e42:	1e03      	subs	r3, r0, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM21_Init+0x86>
  {
    Error_Handler();
 8000e46:	f7ff fd5f 	bl	8000908 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_TIM21_Init+0xf4>)
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f000 fc5b 	bl	8001708 <HAL_TIM_PWM_Init>
 8000e52:	1e03      	subs	r3, r0, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8000e56:	f7ff fd57 	bl	8000908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2200      	movs	r2, #0
 8000e66:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000e68:	187a      	adds	r2, r7, r1
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <MX_TIM21_Init+0xf4>)
 8000e6c:	0011      	movs	r1, r2
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f001 f814 	bl	8001e9c <HAL_TIMEx_MasterConfigSynchronization>
 8000e74:	1e03      	subs	r3, r0, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM21_Init+0xb8>
  {
    Error_Handler();
 8000e78:	f7ff fd46 	bl	8000908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7c:	003b      	movs	r3, r7
 8000e7e:	2260      	movs	r2, #96	; 0x60
 8000e80:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e82:	003b      	movs	r3, r7
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e88:	003b      	movs	r3, r7
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8e:	003b      	movs	r3, r7
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e94:	0039      	movs	r1, r7
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <MX_TIM21_Init+0xf4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f000 fc7c 	bl	8001798 <HAL_TIM_PWM_ConfigChannel>
 8000ea0:	1e03      	subs	r3, r0, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM21_Init+0xe4>
  {
    Error_Handler();
 8000ea4:	f7ff fd30 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */
  HAL_TIM_MspPostInit(&htim21);
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <MX_TIM21_Init+0xf4>)
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f000 f822 	bl	8000ef4 <HAL_TIM_MspPostInit>

}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b00a      	add	sp, #40	; 0x28
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2000002c 	.word	0x2000002c
 8000ebc:	40010800 	.word	0x40010800
 8000ec0:	00003e7f 	.word	0x00003e7f

08000ec4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM21)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <HAL_TIM_Base_MspInit+0x28>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d105      	bne.n	8000ee2 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* TIM21 clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_TIM_Base_MspInit+0x2c>)
 8000ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <HAL_TIM_Base_MspInit+0x2c>)
 8000edc:	2104      	movs	r1, #4
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b002      	add	sp, #8
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	40010800 	.word	0x40010800
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	240c      	movs	r4, #12
 8000efe:	193b      	adds	r3, r7, r4
 8000f00:	0018      	movs	r0, r3
 8000f02:	2314      	movs	r3, #20
 8000f04:	001a      	movs	r2, r3
 8000f06:	2100      	movs	r1, #0
 8000f08:	f001 fed4 	bl	8002cb4 <memset>
  if(timHandle->Instance==TIM21)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a15      	ldr	r2, [pc, #84]	; (8000f68 <HAL_TIM_MspPostInit+0x74>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d123      	bne.n	8000f5e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM21_MspPostInit 0 */

  /* USER CODE END TIM21_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_TIM_MspPostInit+0x78>)
 8000f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_TIM_MspPostInit+0x78>)
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_TIM_MspPostInit+0x78>)
 8000f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f26:	2201      	movs	r2, #1
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM21 GPIO Configuration
    PA10     ------> TIM21_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f2e:	193b      	adds	r3, r7, r4
 8000f30:	2280      	movs	r2, #128	; 0x80
 8000f32:	00d2      	lsls	r2, r2, #3
 8000f34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	0021      	movs	r1, r4
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	187b      	adds	r3, r7, r1
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM21;
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	187a      	adds	r2, r7, r1
 8000f52:	23a0      	movs	r3, #160	; 0xa0
 8000f54:	05db      	lsls	r3, r3, #23
 8000f56:	0011      	movs	r1, r2
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f000 fa2f 	bl	80013bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM21_MspPostInit 1 */

  /* USER CODE END TIM21_MspPostInit 1 */
  }

}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b009      	add	sp, #36	; 0x24
 8000f64:	bd90      	pop	{r4, r7, pc}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	40010800 	.word	0x40010800
 8000f6c:	40021000 	.word	0x40021000

08000f70 <LL_APB1_GRP1_EnableClock>:
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <LL_APB1_GRP1_EnableClock+0x28>)
 8000f7a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <LL_APB1_GRP1_EnableClock+0x28>)
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	430a      	orrs	r2, r1
 8000f82:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <LL_APB1_GRP1_EnableClock+0x28>)
 8000f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b004      	add	sp, #16
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40021000 	.word	0x40021000

08000f9c <LL_IOP_GRP1_EnableClock>:
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <LL_IOP_GRP1_EnableClock+0x28>)
 8000fa6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <LL_IOP_GRP1_EnableClock+0x28>)
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <LL_IOP_GRP1_EnableClock+0x28>)
 8000fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fba:	68fb      	ldr	r3, [r7, #12]
}
 8000fbc:	46c0      	nop			; (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b004      	add	sp, #16
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	601a      	str	r2, [r3, #0]
}
 8000fdc:	46c0      	nop			; (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b002      	add	sp, #8
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	4a07      	ldr	r2, [pc, #28]	; (8001010 <LL_USART_ConfigAsyncMode+0x2c>)
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	222a      	movs	r2, #42	; 0x2a
 8000ffe:	4393      	bics	r3, r2
 8001000:	001a      	movs	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	609a      	str	r2, [r3, #8]
}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	b002      	add	sp, #8
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	ffffb7ff 	.word	0xffffb7ff

08001014 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b08f      	sub	sp, #60	; 0x3c
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800101a:	241c      	movs	r4, #28
 800101c:	193b      	adds	r3, r7, r4
 800101e:	0018      	movs	r0, r3
 8001020:	231c      	movs	r3, #28
 8001022:	001a      	movs	r2, r3
 8001024:	2100      	movs	r1, #0
 8001026:	f001 fe45 	bl	8002cb4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	0018      	movs	r0, r3
 800102e:	2318      	movs	r3, #24
 8001030:	001a      	movs	r2, r3
 8001032:	2100      	movs	r1, #0
 8001034:	f001 fe3e 	bl	8002cb4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	029b      	lsls	r3, r3, #10
 800103c:	0018      	movs	r0, r3
 800103e:	f7ff ff97 	bl	8000f70 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001042:	2001      	movs	r0, #1
 8001044:	f7ff ffaa 	bl	8000f9c <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA0-CK_IN   ------> USART2_RX
  PA2   ------> USART2_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2201      	movs	r2, #1
 800104c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2202      	movs	r2, #2
 8001052:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2203      	movs	r2, #3
 8001058:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2200      	movs	r2, #0
 800106a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	1d3a      	adds	r2, r7, #4
 800106e:	23a0      	movs	r3, #160	; 0xa0
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	0011      	movs	r1, r2
 8001074:	0018      	movs	r0, r3
 8001076:	f001 f892 	bl	800219e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2204      	movs	r2, #4
 800107e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2202      	movs	r2, #2
 8001084:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2203      	movs	r2, #3
 800108a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2204      	movs	r2, #4
 800109c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	1d3a      	adds	r2, r7, #4
 80010a0:	23a0      	movs	r3, #160	; 0xa0
 80010a2:	05db      	lsls	r3, r3, #23
 80010a4:	0011      	movs	r1, r2
 80010a6:	0018      	movs	r0, r3
 80010a8:	f001 f879 	bl	800219e <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80010ac:	193b      	adds	r3, r7, r4
 80010ae:	22e1      	movs	r2, #225	; 0xe1
 80010b0:	0252      	lsls	r2, r2, #9
 80010b2:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80010b4:	0021      	movs	r1, r4
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2200      	movs	r2, #0
 80010ba:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	220c      	movs	r2, #12
 80010cc:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	4a08      	ldr	r2, [pc, #32]	; (8001100 <MX_USART2_UART_Init+0xec>)
 80010de:	0019      	movs	r1, r3
 80010e0:	0010      	movs	r0, r2
 80010e2:	f001 fd5f 	bl	8002ba4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_USART2_UART_Init+0xec>)
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff ff7b 	bl	8000fe4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <MX_USART2_UART_Init+0xec>)
 80010f0:	0018      	movs	r0, r3
 80010f2:	f7ff ff69 	bl	8000fc8 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b00f      	add	sp, #60	; 0x3c
 80010fc:	bd90      	pop	{r4, r7, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	40004400 	.word	0x40004400

08001104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001104:	4813      	ldr	r0, [pc, #76]	; (8001154 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001106:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001108:	f7ff fced 	bl	8000ae6 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 800110c:	4812      	ldr	r0, [pc, #72]	; (8001158 <LoopForever+0x6>)
    LDR R1, [R0]
 800110e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001110:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001112:	4a12      	ldr	r2, [pc, #72]	; (800115c <LoopForever+0xa>)
    CMP R1, R2
 8001114:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001116:	d105      	bne.n	8001124 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001118:	4811      	ldr	r0, [pc, #68]	; (8001160 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800111a:	4912      	ldr	r1, [pc, #72]	; (8001164 <LoopForever+0x12>)
    STR R1, [R0]
 800111c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800111e:	4812      	ldr	r0, [pc, #72]	; (8001168 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001120:	4912      	ldr	r1, [pc, #72]	; (800116c <LoopForever+0x1a>)
    STR R1, [R0]
 8001122:	6001      	str	r1, [r0, #0]

08001124 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001124:	4812      	ldr	r0, [pc, #72]	; (8001170 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001126:	4913      	ldr	r1, [pc, #76]	; (8001174 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001128:	4a13      	ldr	r2, [pc, #76]	; (8001178 <LoopForever+0x26>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a10      	ldr	r2, [pc, #64]	; (800117c <LoopForever+0x2a>)
  ldr r4, =_ebss
 800113c:	4c10      	ldr	r4, [pc, #64]	; (8001180 <LoopForever+0x2e>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114a:	f001 fdbb 	bl	8002cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114e:	f7ff fb7b 	bl	8000848 <main>

08001152 <LoopForever>:

LoopForever:
    b LoopForever
 8001152:	e7fe      	b.n	8001152 <LoopForever>
   ldr   r0, =_estack
 8001154:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8001158:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800115c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8001160:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8001164:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001168:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800116c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001174:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001178:	08002d60 	.word	0x08002d60
  ldr r2, =_sbss
 800117c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001180:	20000070 	.word	0x20000070

08001184 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC1_COMP_IRQHandler>
	...

08001188 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_Init+0x3c>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_Init+0x3c>)
 800119a:	2140      	movs	r1, #64	; 0x40
 800119c:	430a      	orrs	r2, r1
 800119e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011a0:	2003      	movs	r0, #3
 80011a2:	f000 f811 	bl	80011c8 <HAL_InitTick>
 80011a6:	1e03      	subs	r3, r0, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80011aa:	1dfb      	adds	r3, r7, #7
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
 80011b0:	e001      	b.n	80011b6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011b2:	f7ff fc6d 	bl	8000a90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	781b      	ldrb	r3, [r3, #0]
}
 80011ba:	0018      	movs	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	b002      	add	sp, #8
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	40022000 	.word	0x40022000

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_InitTick+0x5c>)
 80011d2:	681c      	ldr	r4, [r3, #0]
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <HAL_InitTick+0x60>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	0019      	movs	r1, r3
 80011da:	23fa      	movs	r3, #250	; 0xfa
 80011dc:	0098      	lsls	r0, r3, #2
 80011de:	f7fe ff93 	bl	8000108 <__udivsi3>
 80011e2:	0003      	movs	r3, r0
 80011e4:	0019      	movs	r1, r3
 80011e6:	0020      	movs	r0, r4
 80011e8:	f7fe ff8e 	bl	8000108 <__udivsi3>
 80011ec:	0003      	movs	r3, r0
 80011ee:	0018      	movs	r0, r3
 80011f0:	f000 f8d7 	bl	80013a2 <HAL_SYSTICK_Config>
 80011f4:	1e03      	subs	r3, r0, #0
 80011f6:	d001      	beq.n	80011fc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e00f      	b.n	800121c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d80b      	bhi.n	800121a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	2301      	movs	r3, #1
 8001206:	425b      	negs	r3, r3
 8001208:	2200      	movs	r2, #0
 800120a:	0018      	movs	r0, r3
 800120c:	f000 f8b4 	bl	8001378 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_InitTick+0x64>)
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	e000      	b.n	800121c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
}
 800121c:	0018      	movs	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	b003      	add	sp, #12
 8001222:	bd90      	pop	{r4, r7, pc}
 8001224:	20000000 	.word	0x20000000
 8001228:	20000008 	.word	0x20000008
 800122c:	20000004 	.word	0x20000004

08001230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <HAL_IncTick+0x1c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	001a      	movs	r2, r3
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_IncTick+0x20>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	18d2      	adds	r2, r2, r3
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <HAL_IncTick+0x20>)
 8001242:	601a      	str	r2, [r3, #0]
}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	20000008 	.word	0x20000008
 8001250:	2000006c 	.word	0x2000006c

08001254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	0002      	movs	r2, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b7f      	cmp	r3, #127	; 0x7f
 8001268:	d828      	bhi.n	80012bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800126a:	4a2f      	ldr	r2, [pc, #188]	; (8001328 <__NVIC_SetPriority+0xd4>)
 800126c:	1dfb      	adds	r3, r7, #7
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b25b      	sxtb	r3, r3
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	33c0      	adds	r3, #192	; 0xc0
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	589b      	ldr	r3, [r3, r2]
 800127a:	1dfa      	adds	r2, r7, #7
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	0011      	movs	r1, r2
 8001280:	2203      	movs	r2, #3
 8001282:	400a      	ands	r2, r1
 8001284:	00d2      	lsls	r2, r2, #3
 8001286:	21ff      	movs	r1, #255	; 0xff
 8001288:	4091      	lsls	r1, r2
 800128a:	000a      	movs	r2, r1
 800128c:	43d2      	mvns	r2, r2
 800128e:	401a      	ands	r2, r3
 8001290:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	019b      	lsls	r3, r3, #6
 8001296:	22ff      	movs	r2, #255	; 0xff
 8001298:	401a      	ands	r2, r3
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	0018      	movs	r0, r3
 80012a0:	2303      	movs	r3, #3
 80012a2:	4003      	ands	r3, r0
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a8:	481f      	ldr	r0, [pc, #124]	; (8001328 <__NVIC_SetPriority+0xd4>)
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	430a      	orrs	r2, r1
 80012b4:	33c0      	adds	r3, #192	; 0xc0
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012ba:	e031      	b.n	8001320 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012bc:	4a1b      	ldr	r2, [pc, #108]	; (800132c <__NVIC_SetPriority+0xd8>)
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	0019      	movs	r1, r3
 80012c4:	230f      	movs	r3, #15
 80012c6:	400b      	ands	r3, r1
 80012c8:	3b08      	subs	r3, #8
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3306      	adds	r3, #6
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	18d3      	adds	r3, r2, r3
 80012d2:	3304      	adds	r3, #4
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	1dfa      	adds	r2, r7, #7
 80012d8:	7812      	ldrb	r2, [r2, #0]
 80012da:	0011      	movs	r1, r2
 80012dc:	2203      	movs	r2, #3
 80012de:	400a      	ands	r2, r1
 80012e0:	00d2      	lsls	r2, r2, #3
 80012e2:	21ff      	movs	r1, #255	; 0xff
 80012e4:	4091      	lsls	r1, r2
 80012e6:	000a      	movs	r2, r1
 80012e8:	43d2      	mvns	r2, r2
 80012ea:	401a      	ands	r2, r3
 80012ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	019b      	lsls	r3, r3, #6
 80012f2:	22ff      	movs	r2, #255	; 0xff
 80012f4:	401a      	ands	r2, r3
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	0018      	movs	r0, r3
 80012fc:	2303      	movs	r3, #3
 80012fe:	4003      	ands	r3, r0
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001304:	4809      	ldr	r0, [pc, #36]	; (800132c <__NVIC_SetPriority+0xd8>)
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	001c      	movs	r4, r3
 800130c:	230f      	movs	r3, #15
 800130e:	4023      	ands	r3, r4
 8001310:	3b08      	subs	r3, #8
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	430a      	orrs	r2, r1
 8001316:	3306      	adds	r3, #6
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	18c3      	adds	r3, r0, r3
 800131c:	3304      	adds	r3, #4
 800131e:	601a      	str	r2, [r3, #0]
}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	b003      	add	sp, #12
 8001326:	bd90      	pop	{r4, r7, pc}
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	1e5a      	subs	r2, r3, #1
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	045b      	lsls	r3, r3, #17
 8001340:	429a      	cmp	r2, r3
 8001342:	d301      	bcc.n	8001348 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001344:	2301      	movs	r3, #1
 8001346:	e010      	b.n	800136a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <SysTick_Config+0x44>)
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	3a01      	subs	r2, #1
 800134e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001350:	2301      	movs	r3, #1
 8001352:	425b      	negs	r3, r3
 8001354:	2103      	movs	r1, #3
 8001356:	0018      	movs	r0, r3
 8001358:	f7ff ff7c 	bl	8001254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <SysTick_Config+0x44>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <SysTick_Config+0x44>)
 8001364:	2207      	movs	r2, #7
 8001366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001368:	2300      	movs	r3, #0
}
 800136a:	0018      	movs	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	b002      	add	sp, #8
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	e000e010 	.word	0xe000e010

08001378 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	210f      	movs	r1, #15
 8001384:	187b      	adds	r3, r7, r1
 8001386:	1c02      	adds	r2, r0, #0
 8001388:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	187b      	adds	r3, r7, r1
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b25b      	sxtb	r3, r3
 8001392:	0011      	movs	r1, r2
 8001394:	0018      	movs	r0, r3
 8001396:	f7ff ff5d 	bl	8001254 <__NVIC_SetPriority>
}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	46bd      	mov	sp, r7
 800139e:	b004      	add	sp, #16
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	0018      	movs	r0, r3
 80013ae:	f7ff ffbf 	bl	8001330 <SysTick_Config>
 80013b2:	0003      	movs	r3, r0
}
 80013b4:	0018      	movs	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b002      	add	sp, #8
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80013d2:	e143      	b.n	800165c <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2101      	movs	r1, #1
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	4091      	lsls	r1, r2
 80013de:	000a      	movs	r2, r1
 80013e0:	4013      	ands	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d100      	bne.n	80013ec <HAL_GPIO_Init+0x30>
 80013ea:	e134      	b.n	8001656 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2203      	movs	r2, #3
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d005      	beq.n	8001404 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2203      	movs	r2, #3
 80013fe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001400:	2b02      	cmp	r3, #2
 8001402:	d130      	bne.n	8001466 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	409a      	lsls	r2, r3
 8001412:	0013      	movs	r3, r2
 8001414:	43da      	mvns	r2, r3
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68da      	ldr	r2, [r3, #12]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	409a      	lsls	r2, r3
 8001426:	0013      	movs	r3, r2
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800143a:	2201      	movs	r2, #1
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
 8001440:	0013      	movs	r3, r2
 8001442:	43da      	mvns	r2, r3
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	091b      	lsrs	r3, r3, #4
 8001450:	2201      	movs	r2, #1
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
 8001458:	0013      	movs	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2203      	movs	r2, #3
 800146c:	4013      	ands	r3, r2
 800146e:	2b03      	cmp	r3, #3
 8001470:	d017      	beq.n	80014a2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	2203      	movs	r2, #3
 800147e:	409a      	lsls	r2, r3
 8001480:	0013      	movs	r3, r2
 8001482:	43da      	mvns	r2, r3
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	409a      	lsls	r2, r3
 8001494:	0013      	movs	r3, r2
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2203      	movs	r2, #3
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d123      	bne.n	80014f6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	08da      	lsrs	r2, r3, #3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3208      	adds	r2, #8
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	58d3      	ldr	r3, [r2, r3]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2207      	movs	r2, #7
 80014c0:	4013      	ands	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	220f      	movs	r2, #15
 80014c6:	409a      	lsls	r2, r3
 80014c8:	0013      	movs	r3, r2
 80014ca:	43da      	mvns	r2, r3
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	691a      	ldr	r2, [r3, #16]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	2107      	movs	r1, #7
 80014da:	400b      	ands	r3, r1
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	409a      	lsls	r2, r3
 80014e0:	0013      	movs	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	08da      	lsrs	r2, r3, #3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3208      	adds	r2, #8
 80014f0:	0092      	lsls	r2, r2, #2
 80014f2:	6939      	ldr	r1, [r7, #16]
 80014f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	2203      	movs	r2, #3
 8001502:	409a      	lsls	r2, r3
 8001504:	0013      	movs	r3, r2
 8001506:	43da      	mvns	r2, r3
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2203      	movs	r2, #3
 8001514:	401a      	ands	r2, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	409a      	lsls	r2, r3
 800151c:	0013      	movs	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	23c0      	movs	r3, #192	; 0xc0
 8001530:	029b      	lsls	r3, r3, #10
 8001532:	4013      	ands	r3, r2
 8001534:	d100      	bne.n	8001538 <HAL_GPIO_Init+0x17c>
 8001536:	e08e      	b.n	8001656 <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001538:	4b4e      	ldr	r3, [pc, #312]	; (8001674 <HAL_GPIO_Init+0x2b8>)
 800153a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800153c:	4b4d      	ldr	r3, [pc, #308]	; (8001674 <HAL_GPIO_Init+0x2b8>)
 800153e:	2101      	movs	r1, #1
 8001540:	430a      	orrs	r2, r1
 8001542:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001544:	4a4c      	ldr	r2, [pc, #304]	; (8001678 <HAL_GPIO_Init+0x2bc>)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3302      	adds	r3, #2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	589b      	ldr	r3, [r3, r2]
 8001550:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	2203      	movs	r2, #3
 8001556:	4013      	ands	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	220f      	movs	r2, #15
 800155c:	409a      	lsls	r2, r3
 800155e:	0013      	movs	r3, r2
 8001560:	43da      	mvns	r2, r3
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	23a0      	movs	r3, #160	; 0xa0
 800156c:	05db      	lsls	r3, r3, #23
 800156e:	429a      	cmp	r2, r3
 8001570:	d00d      	beq.n	800158e <HAL_GPIO_Init+0x1d2>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a41      	ldr	r2, [pc, #260]	; (800167c <HAL_GPIO_Init+0x2c0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_Init+0x1ce>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a40      	ldr	r2, [pc, #256]	; (8001680 <HAL_GPIO_Init+0x2c4>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_GPIO_Init+0x1ca>
 8001582:	2302      	movs	r3, #2
 8001584:	e004      	b.n	8001590 <HAL_GPIO_Init+0x1d4>
 8001586:	2306      	movs	r3, #6
 8001588:	e002      	b.n	8001590 <HAL_GPIO_Init+0x1d4>
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <HAL_GPIO_Init+0x1d4>
 800158e:	2300      	movs	r3, #0
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	2103      	movs	r1, #3
 8001594:	400a      	ands	r2, r1
 8001596:	0092      	lsls	r2, r2, #2
 8001598:	4093      	lsls	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a0:	4935      	ldr	r1, [pc, #212]	; (8001678 <HAL_GPIO_Init+0x2bc>)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	3302      	adds	r3, #2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ae:	4b35      	ldr	r3, [pc, #212]	; (8001684 <HAL_GPIO_Init+0x2c8>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	43da      	mvns	r2, r3
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4013      	ands	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	035b      	lsls	r3, r3, #13
 80015c6:	4013      	ands	r3, r2
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015d2:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <HAL_GPIO_Init+0x2c8>)
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80015d8:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <HAL_GPIO_Init+0x2c8>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	43da      	mvns	r2, r3
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	039b      	lsls	r3, r3, #14
 80015f0:	4013      	ands	r3, r2
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015fc:	4b21      	ldr	r3, [pc, #132]	; (8001684 <HAL_GPIO_Init+0x2c8>)
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <HAL_GPIO_Init+0x2c8>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	43da      	mvns	r2, r3
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	029b      	lsls	r3, r3, #10
 800161a:	4013      	ands	r3, r2
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <HAL_GPIO_Init+0x2c8>)
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_GPIO_Init+0x2c8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	43da      	mvns	r2, r3
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	025b      	lsls	r3, r3, #9
 8001644:	4013      	ands	r3, r2
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_GPIO_Init+0x2c8>)
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3301      	adds	r3, #1
 800165a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	40da      	lsrs	r2, r3
 8001664:	1e13      	subs	r3, r2, #0
 8001666:	d000      	beq.n	800166a <HAL_GPIO_Init+0x2ae>
 8001668:	e6b4      	b.n	80013d4 <HAL_GPIO_Init+0x18>
  }
}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	46c0      	nop			; (mov r8, r8)
 800166e:	46bd      	mov	sp, r7
 8001670:	b006      	add	sp, #24
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40021000 	.word	0x40021000
 8001678:	40010000 	.word	0x40010000
 800167c:	50000400 	.word	0x50000400
 8001680:	50000800 	.word	0x50000800
 8001684:	40010400 	.word	0x40010400

08001688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e032      	b.n	8001700 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2239      	movs	r2, #57	; 0x39
 800169e:	5c9b      	ldrb	r3, [r3, r2]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d107      	bne.n	80016b6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2238      	movs	r2, #56	; 0x38
 80016aa:	2100      	movs	r1, #0
 80016ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	0018      	movs	r0, r3
 80016b2:	f7ff fc07 	bl	8000ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2239      	movs	r2, #57	; 0x39
 80016ba:	2102      	movs	r1, #2
 80016bc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3304      	adds	r3, #4
 80016c6:	0019      	movs	r1, r3
 80016c8:	0010      	movs	r0, r2
 80016ca:	f000 f9ff 	bl	8001acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	223e      	movs	r2, #62	; 0x3e
 80016d2:	2101      	movs	r1, #1
 80016d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	223a      	movs	r2, #58	; 0x3a
 80016da:	2101      	movs	r1, #1
 80016dc:	5499      	strb	r1, [r3, r2]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	223b      	movs	r2, #59	; 0x3b
 80016e2:	2101      	movs	r1, #1
 80016e4:	5499      	strb	r1, [r3, r2]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	223c      	movs	r2, #60	; 0x3c
 80016ea:	2101      	movs	r1, #1
 80016ec:	5499      	strb	r1, [r3, r2]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	223d      	movs	r2, #61	; 0x3d
 80016f2:	2101      	movs	r1, #1
 80016f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2239      	movs	r2, #57	; 0x39
 80016fa:	2101      	movs	r1, #1
 80016fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	0018      	movs	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	b002      	add	sp, #8
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e032      	b.n	8001780 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2239      	movs	r2, #57	; 0x39
 800171e:	5c9b      	ldrb	r3, [r3, r2]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d107      	bne.n	8001736 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2238      	movs	r2, #56	; 0x38
 800172a:	2100      	movs	r1, #0
 800172c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	0018      	movs	r0, r3
 8001732:	f000 f829 	bl	8001788 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2239      	movs	r2, #57	; 0x39
 800173a:	2102      	movs	r1, #2
 800173c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3304      	adds	r3, #4
 8001746:	0019      	movs	r1, r3
 8001748:	0010      	movs	r0, r2
 800174a:	f000 f9bf 	bl	8001acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	223e      	movs	r2, #62	; 0x3e
 8001752:	2101      	movs	r1, #1
 8001754:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	223a      	movs	r2, #58	; 0x3a
 800175a:	2101      	movs	r1, #1
 800175c:	5499      	strb	r1, [r3, r2]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	223b      	movs	r2, #59	; 0x3b
 8001762:	2101      	movs	r1, #1
 8001764:	5499      	strb	r1, [r3, r2]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	223c      	movs	r2, #60	; 0x3c
 800176a:	2101      	movs	r1, #1
 800176c:	5499      	strb	r1, [r3, r2]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	223d      	movs	r2, #61	; 0x3d
 8001772:	2101      	movs	r1, #1
 8001774:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2239      	movs	r2, #57	; 0x39
 800177a:	2101      	movs	r1, #1
 800177c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	0018      	movs	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	b002      	add	sp, #8
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	b002      	add	sp, #8
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a4:	2317      	movs	r3, #23
 80017a6:	18fb      	adds	r3, r7, r3
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2238      	movs	r2, #56	; 0x38
 80017b0:	5c9b      	ldrb	r3, [r3, r2]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <HAL_TIM_PWM_ConfigChannel+0x22>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e0ad      	b.n	8001916 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2238      	movs	r2, #56	; 0x38
 80017be:	2101      	movs	r1, #1
 80017c0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b0c      	cmp	r3, #12
 80017c6:	d100      	bne.n	80017ca <HAL_TIM_PWM_ConfigChannel+0x32>
 80017c8:	e076      	b.n	80018b8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b0c      	cmp	r3, #12
 80017ce:	d900      	bls.n	80017d2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80017d0:	e095      	b.n	80018fe <HAL_TIM_PWM_ConfigChannel+0x166>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d04e      	beq.n	8001876 <HAL_TIM_PWM_ConfigChannel+0xde>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d900      	bls.n	80017e0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80017de:	e08e      	b.n	80018fe <HAL_TIM_PWM_ConfigChannel+0x166>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_TIM_PWM_ConfigChannel+0x56>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d021      	beq.n	8001830 <HAL_TIM_PWM_ConfigChannel+0x98>
 80017ec:	e087      	b.n	80018fe <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	0011      	movs	r1, r2
 80017f6:	0018      	movs	r0, r3
 80017f8:	f000 f9b2 	bl	8001b60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	699a      	ldr	r2, [r3, #24]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2108      	movs	r1, #8
 8001808:	430a      	orrs	r2, r1
 800180a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	699a      	ldr	r2, [r3, #24]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2104      	movs	r1, #4
 8001818:	438a      	bics	r2, r1
 800181a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6999      	ldr	r1, [r3, #24]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	430a      	orrs	r2, r1
 800182c:	619a      	str	r2, [r3, #24]
      break;
 800182e:	e06b      	b.n	8001908 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	0011      	movs	r1, r2
 8001838:	0018      	movs	r0, r3
 800183a:	f000 f9cd 	bl	8001bd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	699a      	ldr	r2, [r3, #24]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2180      	movs	r1, #128	; 0x80
 800184a:	0109      	lsls	r1, r1, #4
 800184c:	430a      	orrs	r2, r1
 800184e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	699a      	ldr	r2, [r3, #24]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4931      	ldr	r1, [pc, #196]	; (8001920 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800185c:	400a      	ands	r2, r1
 800185e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6999      	ldr	r1, [r3, #24]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	021a      	lsls	r2, r3, #8
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	619a      	str	r2, [r3, #24]
      break;
 8001874:	e048      	b.n	8001908 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	0011      	movs	r1, r2
 800187e:	0018      	movs	r0, r3
 8001880:	f000 f9ec 	bl	8001c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	69da      	ldr	r2, [r3, #28]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2108      	movs	r1, #8
 8001890:	430a      	orrs	r2, r1
 8001892:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	69da      	ldr	r2, [r3, #28]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2104      	movs	r1, #4
 80018a0:	438a      	bics	r2, r1
 80018a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	69d9      	ldr	r1, [r3, #28]
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	61da      	str	r2, [r3, #28]
      break;
 80018b6:	e027      	b.n	8001908 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	0011      	movs	r1, r2
 80018c0:	0018      	movs	r0, r3
 80018c2:	f000 fa0b 	bl	8001cdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	69da      	ldr	r2, [r3, #28]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2180      	movs	r1, #128	; 0x80
 80018d2:	0109      	lsls	r1, r1, #4
 80018d4:	430a      	orrs	r2, r1
 80018d6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	69da      	ldr	r2, [r3, #28]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	490f      	ldr	r1, [pc, #60]	; (8001920 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80018e4:	400a      	ands	r2, r1
 80018e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	69d9      	ldr	r1, [r3, #28]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	021a      	lsls	r2, r3, #8
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	61da      	str	r2, [r3, #28]
      break;
 80018fc:	e004      	b.n	8001908 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80018fe:	2317      	movs	r3, #23
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
      break;
 8001906:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2238      	movs	r2, #56	; 0x38
 800190c:	2100      	movs	r1, #0
 800190e:	5499      	strb	r1, [r3, r2]

  return status;
 8001910:	2317      	movs	r3, #23
 8001912:	18fb      	adds	r3, r7, r3
 8001914:	781b      	ldrb	r3, [r3, #0]
}
 8001916:	0018      	movs	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	b006      	add	sp, #24
 800191c:	bd80      	pop	{r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	fffffbff 	.word	0xfffffbff

08001924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800192e:	230f      	movs	r3, #15
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2238      	movs	r2, #56	; 0x38
 800193a:	5c9b      	ldrb	r3, [r3, r2]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_TIM_ConfigClockSource+0x20>
 8001940:	2302      	movs	r3, #2
 8001942:	e0bc      	b.n	8001abe <HAL_TIM_ConfigClockSource+0x19a>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2238      	movs	r2, #56	; 0x38
 8001948:	2101      	movs	r1, #1
 800194a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2239      	movs	r2, #57	; 0x39
 8001950:	2102      	movs	r1, #2
 8001952:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	2277      	movs	r2, #119	; 0x77
 8001960:	4393      	bics	r3, r2
 8001962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4a58      	ldr	r2, [pc, #352]	; (8001ac8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001968:	4013      	ands	r3, r2
 800196a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2280      	movs	r2, #128	; 0x80
 800197a:	0192      	lsls	r2, r2, #6
 800197c:	4293      	cmp	r3, r2
 800197e:	d040      	beq.n	8001a02 <HAL_TIM_ConfigClockSource+0xde>
 8001980:	2280      	movs	r2, #128	; 0x80
 8001982:	0192      	lsls	r2, r2, #6
 8001984:	4293      	cmp	r3, r2
 8001986:	d900      	bls.n	800198a <HAL_TIM_ConfigClockSource+0x66>
 8001988:	e088      	b.n	8001a9c <HAL_TIM_ConfigClockSource+0x178>
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	0152      	lsls	r2, r2, #5
 800198e:	4293      	cmp	r3, r2
 8001990:	d100      	bne.n	8001994 <HAL_TIM_ConfigClockSource+0x70>
 8001992:	e088      	b.n	8001aa6 <HAL_TIM_ConfigClockSource+0x182>
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	0152      	lsls	r2, r2, #5
 8001998:	4293      	cmp	r3, r2
 800199a:	d900      	bls.n	800199e <HAL_TIM_ConfigClockSource+0x7a>
 800199c:	e07e      	b.n	8001a9c <HAL_TIM_ConfigClockSource+0x178>
 800199e:	2b70      	cmp	r3, #112	; 0x70
 80019a0:	d018      	beq.n	80019d4 <HAL_TIM_ConfigClockSource+0xb0>
 80019a2:	d900      	bls.n	80019a6 <HAL_TIM_ConfigClockSource+0x82>
 80019a4:	e07a      	b.n	8001a9c <HAL_TIM_ConfigClockSource+0x178>
 80019a6:	2b60      	cmp	r3, #96	; 0x60
 80019a8:	d04f      	beq.n	8001a4a <HAL_TIM_ConfigClockSource+0x126>
 80019aa:	d900      	bls.n	80019ae <HAL_TIM_ConfigClockSource+0x8a>
 80019ac:	e076      	b.n	8001a9c <HAL_TIM_ConfigClockSource+0x178>
 80019ae:	2b50      	cmp	r3, #80	; 0x50
 80019b0:	d03b      	beq.n	8001a2a <HAL_TIM_ConfigClockSource+0x106>
 80019b2:	d900      	bls.n	80019b6 <HAL_TIM_ConfigClockSource+0x92>
 80019b4:	e072      	b.n	8001a9c <HAL_TIM_ConfigClockSource+0x178>
 80019b6:	2b40      	cmp	r3, #64	; 0x40
 80019b8:	d057      	beq.n	8001a6a <HAL_TIM_ConfigClockSource+0x146>
 80019ba:	d900      	bls.n	80019be <HAL_TIM_ConfigClockSource+0x9a>
 80019bc:	e06e      	b.n	8001a9c <HAL_TIM_ConfigClockSource+0x178>
 80019be:	2b30      	cmp	r3, #48	; 0x30
 80019c0:	d063      	beq.n	8001a8a <HAL_TIM_ConfigClockSource+0x166>
 80019c2:	d86b      	bhi.n	8001a9c <HAL_TIM_ConfigClockSource+0x178>
 80019c4:	2b20      	cmp	r3, #32
 80019c6:	d060      	beq.n	8001a8a <HAL_TIM_ConfigClockSource+0x166>
 80019c8:	d868      	bhi.n	8001a9c <HAL_TIM_ConfigClockSource+0x178>
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d05d      	beq.n	8001a8a <HAL_TIM_ConfigClockSource+0x166>
 80019ce:	2b10      	cmp	r3, #16
 80019d0:	d05b      	beq.n	8001a8a <HAL_TIM_ConfigClockSource+0x166>
 80019d2:	e063      	b.n	8001a9c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80019e4:	f000 fa3a 	bl	8001e5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2277      	movs	r2, #119	; 0x77
 80019f4:	4313      	orrs	r3, r2
 80019f6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	609a      	str	r2, [r3, #8]
      break;
 8001a00:	e052      	b.n	8001aa8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a12:	f000 fa23 	bl	8001e5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2180      	movs	r1, #128	; 0x80
 8001a22:	01c9      	lsls	r1, r1, #7
 8001a24:	430a      	orrs	r2, r1
 8001a26:	609a      	str	r2, [r3, #8]
      break;
 8001a28:	e03e      	b.n	8001aa8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a36:	001a      	movs	r2, r3
 8001a38:	f000 f996 	bl	8001d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2150      	movs	r1, #80	; 0x50
 8001a42:	0018      	movs	r0, r3
 8001a44:	f000 f9f0 	bl	8001e28 <TIM_ITRx_SetConfig>
      break;
 8001a48:	e02e      	b.n	8001aa8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a56:	001a      	movs	r2, r3
 8001a58:	f000 f9b4 	bl	8001dc4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2160      	movs	r1, #96	; 0x60
 8001a62:	0018      	movs	r0, r3
 8001a64:	f000 f9e0 	bl	8001e28 <TIM_ITRx_SetConfig>
      break;
 8001a68:	e01e      	b.n	8001aa8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a76:	001a      	movs	r2, r3
 8001a78:	f000 f976 	bl	8001d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2140      	movs	r1, #64	; 0x40
 8001a82:	0018      	movs	r0, r3
 8001a84:	f000 f9d0 	bl	8001e28 <TIM_ITRx_SetConfig>
      break;
 8001a88:	e00e      	b.n	8001aa8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	0019      	movs	r1, r3
 8001a94:	0010      	movs	r0, r2
 8001a96:	f000 f9c7 	bl	8001e28 <TIM_ITRx_SetConfig>
      break;
 8001a9a:	e005      	b.n	8001aa8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001a9c:	230f      	movs	r3, #15
 8001a9e:	18fb      	adds	r3, r7, r3
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	701a      	strb	r2, [r3, #0]
      break;
 8001aa4:	e000      	b.n	8001aa8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001aa6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2239      	movs	r2, #57	; 0x39
 8001aac:	2101      	movs	r1, #1
 8001aae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2238      	movs	r2, #56	; 0x38
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	5499      	strb	r1, [r3, r2]

  return status;
 8001ab8:	230f      	movs	r3, #15
 8001aba:	18fb      	adds	r3, r7, r3
 8001abc:	781b      	ldrb	r3, [r3, #0]
}
 8001abe:	0018      	movs	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	b004      	add	sp, #16
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	ffff00ff 	.word	0xffff00ff

08001acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	05db      	lsls	r3, r3, #23
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d003      	beq.n	8001aee <TIM_Base_SetConfig+0x22>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a1b      	ldr	r2, [pc, #108]	; (8001b58 <TIM_Base_SetConfig+0x8c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d108      	bne.n	8001b00 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2270      	movs	r2, #112	; 0x70
 8001af2:	4393      	bics	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	05db      	lsls	r3, r3, #23
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d003      	beq.n	8001b12 <TIM_Base_SetConfig+0x46>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <TIM_Base_SetConfig+0x8c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d108      	bne.n	8001b24 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4a11      	ldr	r2, [pc, #68]	; (8001b5c <TIM_Base_SetConfig+0x90>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2280      	movs	r2, #128	; 0x80
 8001b28:	4393      	bics	r3, r2
 8001b2a:	001a      	movs	r2, r3
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	615a      	str	r2, [r3, #20]
}
 8001b50:	46c0      	nop			; (mov r8, r8)
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b004      	add	sp, #16
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40010800 	.word	0x40010800
 8001b5c:	fffffcff 	.word	0xfffffcff

08001b60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	4393      	bics	r3, r2
 8001b72:	001a      	movs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2270      	movs	r2, #112	; 0x70
 8001b8e:	4393      	bics	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2203      	movs	r2, #3
 8001b96:	4393      	bics	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	4393      	bics	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	621a      	str	r2, [r3, #32]
}
 8001bd0:	46c0      	nop			; (mov r8, r8)
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b006      	add	sp, #24
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	2210      	movs	r2, #16
 8001be8:	4393      	bics	r3, r2
 8001bea:	001a      	movs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4a13      	ldr	r2, [pc, #76]	; (8001c54 <TIM_OC2_SetConfig+0x7c>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <TIM_OC2_SetConfig+0x80>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	021b      	lsls	r3, r3, #8
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2220      	movs	r2, #32
 8001c22:	4393      	bics	r3, r2
 8001c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	621a      	str	r2, [r3, #32]
}
 8001c4c:	46c0      	nop			; (mov r8, r8)
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b006      	add	sp, #24
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	ffff8fff 	.word	0xffff8fff
 8001c58:	fffffcff 	.word	0xfffffcff

08001c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	4a1a      	ldr	r2, [pc, #104]	; (8001cd4 <TIM_OC3_SetConfig+0x78>)
 8001c6c:	401a      	ands	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2270      	movs	r2, #112	; 0x70
 8001c88:	4393      	bics	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2203      	movs	r2, #3
 8001c90:	4393      	bics	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	4a0d      	ldr	r2, [pc, #52]	; (8001cd8 <TIM_OC3_SetConfig+0x7c>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	621a      	str	r2, [r3, #32]
}
 8001ccc:	46c0      	nop			; (mov r8, r8)
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b006      	add	sp, #24
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	fffffeff 	.word	0xfffffeff
 8001cd8:	fffffdff 	.word	0xfffffdff

08001cdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	4a1b      	ldr	r2, [pc, #108]	; (8001d58 <TIM_OC4_SetConfig+0x7c>)
 8001cec:	401a      	ands	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4a15      	ldr	r2, [pc, #84]	; (8001d5c <TIM_OC4_SetConfig+0x80>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <TIM_OC4_SetConfig+0x84>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <TIM_OC4_SetConfig+0x88>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	031b      	lsls	r3, r3, #12
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	621a      	str	r2, [r3, #32]
}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	46bd      	mov	sp, r7
 8001d52:	b006      	add	sp, #24
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	ffffefff 	.word	0xffffefff
 8001d5c:	ffff8fff 	.word	0xffff8fff
 8001d60:	fffffcff 	.word	0xfffffcff
 8001d64:	ffffdfff 	.word	0xffffdfff

08001d68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4393      	bics	r3, r2
 8001d82:	001a      	movs	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	22f0      	movs	r2, #240	; 0xf0
 8001d92:	4393      	bics	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	220a      	movs	r2, #10
 8001da4:	4393      	bics	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	621a      	str	r2, [r3, #32]
}
 8001dbc:	46c0      	nop			; (mov r8, r8)
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b006      	add	sp, #24
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	2210      	movs	r2, #16
 8001dd6:	4393      	bics	r3, r2
 8001dd8:	001a      	movs	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <TIM_TI2_ConfigInputStage+0x60>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	031b      	lsls	r3, r3, #12
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	22a0      	movs	r2, #160	; 0xa0
 8001e00:	4393      	bics	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	621a      	str	r2, [r3, #32]
}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	b006      	add	sp, #24
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	ffff0fff 	.word	0xffff0fff

08001e28 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2270      	movs	r2, #112	; 0x70
 8001e3c:	4393      	bics	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	2207      	movs	r2, #7
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	609a      	str	r2, [r3, #8]
}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b004      	add	sp, #16
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	4a09      	ldr	r2, [pc, #36]	; (8001e98 <TIM_ETR_SetConfig+0x3c>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	021a      	lsls	r2, r3, #8
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	609a      	str	r2, [r3, #8]
}
 8001e90:	46c0      	nop			; (mov r8, r8)
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b006      	add	sp, #24
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	ffff00ff 	.word	0xffff00ff

08001e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2238      	movs	r2, #56	; 0x38
 8001eaa:	5c9b      	ldrb	r3, [r3, r2]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e03d      	b.n	8001f30 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2238      	movs	r2, #56	; 0x38
 8001eb8:	2101      	movs	r1, #1
 8001eba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2239      	movs	r2, #57	; 0x39
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2270      	movs	r2, #112	; 0x70
 8001ed8:	4393      	bics	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	05db      	lsls	r3, r3, #23
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d004      	beq.n	8001f04 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d10c      	bne.n	8001f1e <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2280      	movs	r2, #128	; 0x80
 8001f08:	4393      	bics	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2239      	movs	r2, #57	; 0x39
 8001f22:	2101      	movs	r1, #1
 8001f24:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2238      	movs	r2, #56	; 0x38
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	0018      	movs	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	b004      	add	sp, #16
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40010800 	.word	0x40010800

08001f3c <LL_ADC_IsEnabled>:
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	425a      	negs	r2, r3
 8001f50:	4153      	adcs	r3, r2
 8001f52:	b2db      	uxtb	r3, r3
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b002      	add	sp, #8
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001f66:	230f      	movs	r3, #15
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0U)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	0018      	movs	r0, r3
 8001f72:	f7ff ffe3 	bl	8001f3c <LL_ADC_IsEnabled>
 8001f76:	1e03      	subs	r3, r0, #0
 8001f78:	d118      	bne.n	8001fac <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	4a11      	ldr	r2, [pc, #68]	; (8001fc4 <LL_ADC_Init+0x68>)
 8001f80:	401a      	ands	r2, r3
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	6859      	ldr	r1, [r3, #4]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	4319      	orrs	r1, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	430b      	orrs	r3, r1
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	60da      	str	r2, [r3, #12]
               ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	089a      	lsrs	r2, r3, #2
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	611a      	str	r2, [r3, #16]
 8001faa:	e003      	b.n	8001fb4 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001fac:	230f      	movs	r3, #15
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001fb4:	230f      	movs	r3, #15
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	781b      	ldrb	r3, [r3, #0]
}
 8001fba:	0018      	movs	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b004      	add	sp, #16
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	ffff3fc7 	.word	0xffff3fc7

08001fc8 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001fd2:	230f      	movs	r3, #15
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0U)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f7ff ffad 	bl	8001f3c <LL_ADC_IsEnabled>
 8001fe2:	1e03      	subs	r3, r0, #0
 8001fe4:	d115      	bne.n	8002012 <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	4a0f      	ldr	r2, [pc, #60]	; (8002028 <LL_ADC_REG_Init+0x60>)
 8001fec:	401a      	ands	r2, r3
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6819      	ldr	r1, [r3, #0]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4319      	orrs	r1, r3
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	4319      	orrs	r1, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	4319      	orrs	r1, r3
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	430b      	orrs	r3, r1
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	60da      	str	r2, [r3, #12]
 8002010:	e003      	b.n	800201a <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002012:	230f      	movs	r3, #15
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	2201      	movs	r2, #1
 8002018:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800201a:	230f      	movs	r3, #15
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	781b      	ldrb	r3, [r3, #0]
}
 8002020:	0018      	movs	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	b004      	add	sp, #16
 8002026:	bd80      	pop	{r7, pc}
 8002028:	fffec23c 	.word	0xfffec23c

0800202c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6819      	ldr	r1, [r3, #0]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	435b      	muls	r3, r3
 8002040:	001a      	movs	r2, r3
 8002042:	0013      	movs	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	189b      	adds	r3, r3, r2
 8002048:	43db      	mvns	r3, r3
 800204a:	400b      	ands	r3, r1
 800204c:	001a      	movs	r2, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	435b      	muls	r3, r3
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	434b      	muls	r3, r1
 8002056:	431a      	orrs	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	601a      	str	r2, [r3, #0]
}
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	b004      	add	sp, #16
 8002062:	bd80      	pop	{r7, pc}

08002064 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	43d2      	mvns	r2, r2
 8002078:	401a      	ands	r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	434b      	muls	r3, r1
 8002080:	431a      	orrs	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	605a      	str	r2, [r3, #4]
}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	46bd      	mov	sp, r7
 800208a:	b004      	add	sp, #16
 800208c:	bd80      	pop	{r7, pc}

0800208e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b084      	sub	sp, #16
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6899      	ldr	r1, [r3, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	435b      	muls	r3, r3
 80020a2:	001a      	movs	r2, r3
 80020a4:	0013      	movs	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	189b      	adds	r3, r3, r2
 80020aa:	43db      	mvns	r3, r3
 80020ac:	400b      	ands	r3, r1
 80020ae:	001a      	movs	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	435b      	muls	r3, r3
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	434b      	muls	r3, r1
 80020b8:	431a      	orrs	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	609a      	str	r2, [r3, #8]
}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b004      	add	sp, #16
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	68d9      	ldr	r1, [r3, #12]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	435b      	muls	r3, r3
 80020da:	001a      	movs	r2, r3
 80020dc:	0013      	movs	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	189b      	adds	r3, r3, r2
 80020e2:	43db      	mvns	r3, r3
 80020e4:	400b      	ands	r3, r1
 80020e6:	001a      	movs	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	435b      	muls	r3, r3
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	434b      	muls	r3, r1
 80020f0:	431a      	orrs	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	60da      	str	r2, [r3, #12]
}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b004      	add	sp, #16
 80020fc:	bd80      	pop	{r7, pc}

080020fe <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6a19      	ldr	r1, [r3, #32]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	435b      	muls	r3, r3
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	4353      	muls	r3, r2
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	435a      	muls	r2, r3
 800211a:	0013      	movs	r3, r2
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	1a9b      	subs	r3, r3, r2
 8002120:	43db      	mvns	r3, r3
 8002122:	400b      	ands	r3, r1
 8002124:	001a      	movs	r2, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	435b      	muls	r3, r3
 800212a:	68b9      	ldr	r1, [r7, #8]
 800212c:	434b      	muls	r3, r1
 800212e:	68b9      	ldr	r1, [r7, #8]
 8002130:	434b      	muls	r3, r1
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	434b      	muls	r3, r1
 8002136:	431a      	orrs	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	b004      	add	sp, #16
 8002142:	bd80      	pop	{r7, pc}

08002144 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	0a1b      	lsrs	r3, r3, #8
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	0a12      	lsrs	r2, r2, #8
 800215c:	4353      	muls	r3, r2
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	0a12      	lsrs	r2, r2, #8
 8002162:	4353      	muls	r3, r2
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	0a12      	lsrs	r2, r2, #8
 8002168:	435a      	muls	r2, r3
 800216a:	0013      	movs	r3, r2
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	43db      	mvns	r3, r3
 8002172:	400b      	ands	r3, r1
 8002174:	001a      	movs	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	0a1b      	lsrs	r3, r3, #8
 800217a:	68b9      	ldr	r1, [r7, #8]
 800217c:	0a09      	lsrs	r1, r1, #8
 800217e:	434b      	muls	r3, r1
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	0a09      	lsrs	r1, r1, #8
 8002184:	434b      	muls	r3, r1
 8002186:	68b9      	ldr	r1, [r7, #8]
 8002188:	0a09      	lsrs	r1, r1, #8
 800218a:	434b      	muls	r3, r1
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	434b      	muls	r3, r1
 8002190:	431a      	orrs	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	46bd      	mov	sp, r7
 800219a:	b004      	add	sp, #16
 800219c:	bd80      	pop	{r7, pc}

0800219e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80021b0:	e048      	b.n	8002244 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2101      	movs	r1, #1
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4091      	lsls	r1, r2
 80021bc:	000a      	movs	r2, r1
 80021be:	4013      	ands	r3, r2
 80021c0:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d03a      	beq.n	800223e <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d003      	beq.n	80021d8 <LL_GPIO_Init+0x3a>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d10e      	bne.n	80021f6 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	0018      	movs	r0, r3
 80021e2:	f7ff ff54 	bl	800208e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	6819      	ldr	r1, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	0018      	movs	r0, r3
 80021f2:	f7ff ff37 	bl	8002064 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	691a      	ldr	r2, [r3, #16]
 80021fa:	68b9      	ldr	r1, [r7, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	0018      	movs	r0, r3
 8002200:	f7ff ff61 	bl	80020c6 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d111      	bne.n	8002230 <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2bff      	cmp	r3, #255	; 0xff
 8002210:	d807      	bhi.n	8002222 <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	0018      	movs	r0, r3
 800221c:	f7ff ff6f 	bl	80020fe <LL_GPIO_SetAFPin_0_7>
 8002220:	e006      	b.n	8002230 <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	68b9      	ldr	r1, [r7, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	0018      	movs	r0, r3
 800222c:	f7ff ff8a 	bl	8002144 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	0018      	movs	r0, r3
 800223a:	f7ff fef7 	bl	800202c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3301      	adds	r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	40da      	lsrs	r2, r3
 800224c:	1e13      	subs	r3, r2, #0
 800224e:	d1b0      	bne.n	80021b2 <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 8002250:	2300      	movs	r3, #0
}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	b004      	add	sp, #16
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <LL_RCC_HSI_IsReady>:
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <LL_RCC_HSI_IsReady+0x1c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2204      	movs	r2, #4
 8002266:	4013      	ands	r3, r2
 8002268:	2b04      	cmp	r3, #4
 800226a:	d101      	bne.n	8002270 <LL_RCC_HSI_IsReady+0x14>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <LL_RCC_HSI_IsReady+0x16>
 8002270:	2300      	movs	r3, #0
}
 8002272:	0018      	movs	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000

0800227c <LL_RCC_LSE_IsReady>:
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8002280:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <LL_RCC_LSE_IsReady+0x24>)
 8002282:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	401a      	ands	r2, r3
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	429a      	cmp	r2, r3
 8002290:	d101      	bne.n	8002296 <LL_RCC_LSE_IsReady+0x1a>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <LL_RCC_LSE_IsReady+0x1c>
 8002296:	2300      	movs	r3, #0
}
 8002298:	0018      	movs	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	40021000 	.word	0x40021000

080022a4 <LL_RCC_MSI_GetRange>:
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 80022a8:	4b03      	ldr	r3, [pc, #12]	; (80022b8 <LL_RCC_MSI_GetRange+0x14>)
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	23e0      	movs	r3, #224	; 0xe0
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	4013      	ands	r3, r2
}
 80022b2:	0018      	movs	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000

080022bc <LL_RCC_GetSysClkSource>:
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80022c0:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <LL_RCC_GetSysClkSource+0x14>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	220c      	movs	r2, #12
 80022c6:	4013      	ands	r3, r2
}
 80022c8:	0018      	movs	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	40021000 	.word	0x40021000

080022d4 <LL_RCC_GetAHBPrescaler>:
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <LL_RCC_GetAHBPrescaler+0x14>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	22f0      	movs	r2, #240	; 0xf0
 80022de:	4013      	ands	r3, r2
}
 80022e0:	0018      	movs	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	40021000 	.word	0x40021000

080022ec <LL_RCC_GetAPB1Prescaler>:
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <LL_RCC_GetAPB1Prescaler+0x14>)
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	23e0      	movs	r3, #224	; 0xe0
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4013      	ands	r3, r2
}
 80022fa:	0018      	movs	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40021000 	.word	0x40021000

08002304 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <LL_RCC_GetUSARTClockSource+0x20>)
 800230e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	401a      	ands	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	041b      	lsls	r3, r3, #16
 8002318:	4313      	orrs	r3, r2
}
 800231a:	0018      	movs	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	b002      	add	sp, #8
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	40021000 	.word	0x40021000

08002328 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <LL_RCC_PLL_GetMainSource+0x14>)
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	025b      	lsls	r3, r3, #9
 8002334:	4013      	ands	r3, r2
}
 8002336:	0018      	movs	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000

08002340 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	23f0      	movs	r3, #240	; 0xf0
 800234a:	039b      	lsls	r3, r3, #14
 800234c:	4013      	ands	r3, r2
}
 800234e:	0018      	movs	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000

08002358 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <LL_RCC_PLL_GetDivider+0x14>)
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	23c0      	movs	r3, #192	; 0xc0
 8002362:	041b      	lsls	r3, r3, #16
 8002364:	4013      	ands	r3, r2
}
 8002366:	0018      	movs	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000

08002370 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2210      	movs	r2, #16
 800237a:	4013      	ands	r3, r2
 800237c:	2b10      	cmp	r3, #16
 800237e:	d101      	bne.n	8002384 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 8002384:	2300      	movs	r3, #0
}
 8002386:	0018      	movs	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40021000 	.word	0x40021000

08002390 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
    }
  }
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b0c      	cmp	r3, #12
 80023a0:	d13c      	bne.n	800241c <LL_RCC_GetUSARTClockFreq+0x8c>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	0018      	movs	r0, r3
 80023a6:	f7ff ffad 	bl	8002304 <LL_RCC_GetUSARTClockSource>
 80023aa:	0003      	movs	r3, r0
 80023ac:	4a1e      	ldr	r2, [pc, #120]	; (8002428 <LL_RCC_GetUSARTClockFreq+0x98>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d01c      	beq.n	80023ec <LL_RCC_GetUSARTClockFreq+0x5c>
 80023b2:	4a1d      	ldr	r2, [pc, #116]	; (8002428 <LL_RCC_GetUSARTClockFreq+0x98>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d821      	bhi.n	80023fc <LL_RCC_GetUSARTClockFreq+0x6c>
 80023b8:	4a1c      	ldr	r2, [pc, #112]	; (800242c <LL_RCC_GetUSARTClockFreq+0x9c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d003      	beq.n	80023c6 <LL_RCC_GetUSARTClockFreq+0x36>
 80023be:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d005      	beq.n	80023d0 <LL_RCC_GetUSARTClockFreq+0x40>
 80023c4:	e01a      	b.n	80023fc <LL_RCC_GetUSARTClockFreq+0x6c>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80023c6:	f000 f839 	bl	800243c <RCC_GetSystemClockFreq>
 80023ca:	0003      	movs	r3, r0
 80023cc:	60fb      	str	r3, [r7, #12]
        break;
 80023ce:	e025      	b.n	800241c <LL_RCC_GetUSARTClockFreq+0x8c>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80023d0:	f7ff ff44 	bl	800225c <LL_RCC_HSI_IsReady>
 80023d4:	1e03      	subs	r3, r0, #0
 80023d6:	d01e      	beq.n	8002416 <LL_RCC_GetUSARTClockFreq+0x86>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80023d8:	f7ff ffca 	bl	8002370 <LL_RCC_IsActiveFlag_HSIDIV>
 80023dc:	1e03      	subs	r3, r0, #0
 80023de:	d002      	beq.n	80023e6 <LL_RCC_GetUSARTClockFreq+0x56>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 80023e0:	4b14      	ldr	r3, [pc, #80]	; (8002434 <LL_RCC_GetUSARTClockFreq+0xa4>)
 80023e2:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 80023e4:	e017      	b.n	8002416 <LL_RCC_GetUSARTClockFreq+0x86>
            usart_frequency = HSI_VALUE;
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <LL_RCC_GetUSARTClockFreq+0xa8>)
 80023e8:	60fb      	str	r3, [r7, #12]
        break;
 80023ea:	e014      	b.n	8002416 <LL_RCC_GetUSARTClockFreq+0x86>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80023ec:	f7ff ff46 	bl	800227c <LL_RCC_LSE_IsReady>
 80023f0:	1e03      	subs	r3, r0, #0
 80023f2:	d012      	beq.n	800241a <LL_RCC_GetUSARTClockFreq+0x8a>
        {
          usart_frequency = LSE_VALUE;
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80023fa:	e00e      	b.n	800241a <LL_RCC_GetUSARTClockFreq+0x8a>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80023fc:	f000 f81e 	bl	800243c <RCC_GetSystemClockFreq>
 8002400:	0003      	movs	r3, r0
 8002402:	0018      	movs	r0, r3
 8002404:	f000 f85e 	bl	80024c4 <RCC_GetHCLKClockFreq>
 8002408:	0003      	movs	r3, r0
 800240a:	0018      	movs	r0, r3
 800240c:	f000 f870 	bl	80024f0 <RCC_GetPCLK1ClockFreq>
 8002410:	0003      	movs	r3, r0
 8002412:	60fb      	str	r3, [r7, #12]
        break;
 8002414:	e002      	b.n	800241c <LL_RCC_GetUSARTClockFreq+0x8c>
        break;
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	e000      	b.n	800241c <LL_RCC_GetUSARTClockFreq+0x8c>
        break;
 800241a:	46c0      	nop			; (mov r8, r8)
    }
  }
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 800241c:	68fb      	ldr	r3, [r7, #12]
}
 800241e:	0018      	movs	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	b004      	add	sp, #16
 8002424:	bd80      	pop	{r7, pc}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	000c000c 	.word	0x000c000c
 800242c:	000c0004 	.word	0x000c0004
 8002430:	000c0008 	.word	0x000c0008
 8002434:	003d0900 	.word	0x003d0900
 8002438:	00f42400 	.word	0x00f42400

0800243c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002442:	f7ff ff3b 	bl	80022bc <LL_RCC_GetSysClkSource>
 8002446:	0003      	movs	r3, r0
 8002448:	2b0c      	cmp	r3, #12
 800244a:	d020      	beq.n	800248e <RCC_GetSystemClockFreq+0x52>
 800244c:	d824      	bhi.n	8002498 <RCC_GetSystemClockFreq+0x5c>
 800244e:	2b08      	cmp	r3, #8
 8002450:	d01a      	beq.n	8002488 <RCC_GetSystemClockFreq+0x4c>
 8002452:	d821      	bhi.n	8002498 <RCC_GetSystemClockFreq+0x5c>
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <RCC_GetSystemClockFreq+0x22>
 8002458:	2b04      	cmp	r3, #4
 800245a:	d00b      	beq.n	8002474 <RCC_GetSystemClockFreq+0x38>
 800245c:	e01c      	b.n	8002498 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800245e:	f7ff ff21 	bl	80022a4 <LL_RCC_MSI_GetRange>
 8002462:	0003      	movs	r3, r0
 8002464:	0b5b      	lsrs	r3, r3, #13
 8002466:	3301      	adds	r3, #1
 8002468:	2280      	movs	r2, #128	; 0x80
 800246a:	0212      	lsls	r2, r2, #8
 800246c:	409a      	lsls	r2, r3
 800246e:	0013      	movs	r3, r2
 8002470:	607b      	str	r3, [r7, #4]
      break;
 8002472:	e01c      	b.n	80024ae <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8002474:	f7ff ff7c 	bl	8002370 <LL_RCC_IsActiveFlag_HSIDIV>
 8002478:	1e03      	subs	r3, r0, #0
 800247a:	d002      	beq.n	8002482 <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <RCC_GetSystemClockFreq+0x7c>)
 800247e:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8002480:	e015      	b.n	80024ae <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 8002482:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <RCC_GetSystemClockFreq+0x80>)
 8002484:	607b      	str	r3, [r7, #4]
      break;
 8002486:	e012      	b.n	80024ae <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8002488:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <RCC_GetSystemClockFreq+0x84>)
 800248a:	607b      	str	r3, [r7, #4]
      break;
 800248c:	e00f      	b.n	80024ae <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800248e:	f000 f843 	bl	8002518 <RCC_PLL_GetFreqDomain_SYS>
 8002492:	0003      	movs	r3, r0
 8002494:	607b      	str	r3, [r7, #4]
      break;
 8002496:	e00a      	b.n	80024ae <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002498:	f7ff ff04 	bl	80022a4 <LL_RCC_MSI_GetRange>
 800249c:	0003      	movs	r3, r0
 800249e:	0b5b      	lsrs	r3, r3, #13
 80024a0:	3301      	adds	r3, #1
 80024a2:	2280      	movs	r2, #128	; 0x80
 80024a4:	0212      	lsls	r2, r2, #8
 80024a6:	409a      	lsls	r2, r3
 80024a8:	0013      	movs	r3, r2
 80024aa:	607b      	str	r3, [r7, #4]
      break;
 80024ac:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 80024ae:	687b      	ldr	r3, [r7, #4]
}
 80024b0:	0018      	movs	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b002      	add	sp, #8
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	003d0900 	.word	0x003d0900
 80024bc:	00f42400 	.word	0x00f42400
 80024c0:	007a1200 	.word	0x007a1200

080024c4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80024cc:	f7ff ff02 	bl	80022d4 <LL_RCC_GetAHBPrescaler>
 80024d0:	0003      	movs	r3, r0
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	220f      	movs	r2, #15
 80024d6:	4013      	ands	r3, r2
 80024d8:	4a04      	ldr	r2, [pc, #16]	; (80024ec <RCC_GetHCLKClockFreq+0x28>)
 80024da:	5cd3      	ldrb	r3, [r2, r3]
 80024dc:	001a      	movs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	40d3      	lsrs	r3, r2
}
 80024e2:	0018      	movs	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b002      	add	sp, #8
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	08002d24 	.word	0x08002d24

080024f0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80024f8:	f7ff fef8 	bl	80022ec <LL_RCC_GetAPB1Prescaler>
 80024fc:	0003      	movs	r3, r0
 80024fe:	0a1b      	lsrs	r3, r3, #8
 8002500:	4a04      	ldr	r2, [pc, #16]	; (8002514 <RCC_GetPCLK1ClockFreq+0x24>)
 8002502:	5cd3      	ldrb	r3, [r2, r3]
 8002504:	001a      	movs	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	40d3      	lsrs	r3, r2
}
 800250a:	0018      	movs	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	b002      	add	sp, #8
 8002510:	bd80      	pop	{r7, pc}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	08002d34 	.word	0x08002d34

08002518 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800251e:	f7ff ff03 	bl	8002328 <LL_RCC_PLL_GetMainSource>
 8002522:	0003      	movs	r3, r0
 8002524:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d109      	bne.n	8002540 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 800252c:	f7ff ff20 	bl	8002370 <LL_RCC_IsActiveFlag_HSIDIV>
 8002530:	1e03      	subs	r3, r0, #0
 8002532:	d002      	beq.n	800253a <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8002534:	4b10      	ldr	r3, [pc, #64]	; (8002578 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8002536:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8002538:	e005      	b.n	8002546 <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800253c:	607b      	str	r3, [r7, #4]
      break;
 800253e:	e002      	b.n	8002546 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002540:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8002542:	607b      	str	r3, [r7, #4]
      break;
 8002544:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8002546:	f7ff fefb 	bl	8002340 <LL_RCC_PLL_GetMultiplicator>
 800254a:	0003      	movs	r3, r0
 800254c:	0c9b      	lsrs	r3, r3, #18
 800254e:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8002550:	5cd3      	ldrb	r3, [r2, r3]
 8002552:	001a      	movs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4353      	muls	r3, r2
 8002558:	001c      	movs	r4, r3
 800255a:	f7ff fefd 	bl	8002358 <LL_RCC_PLL_GetDivider>
 800255e:	0003      	movs	r3, r0
 8002560:	0d9b      	lsrs	r3, r3, #22
 8002562:	3301      	adds	r3, #1
 8002564:	0019      	movs	r1, r3
 8002566:	0020      	movs	r0, r4
 8002568:	f7fd fdce 	bl	8000108 <__udivsi3>
 800256c:	0003      	movs	r3, r0
}
 800256e:	0018      	movs	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	b003      	add	sp, #12
 8002574:	bd90      	pop	{r4, r7, pc}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	003d0900 	.word	0x003d0900
 800257c:	00f42400 	.word	0x00f42400
 8002580:	007a1200 	.word	0x007a1200
 8002584:	08002d3c 	.word	0x08002d3c

08002588 <LL_SPI_IsEnabled>:
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2240      	movs	r2, #64	; 0x40
 8002596:	4013      	ands	r3, r2
 8002598:	2b40      	cmp	r3, #64	; 0x40
 800259a:	d101      	bne.n	80025a0 <LL_SPI_IsEnabled+0x18>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <LL_SPI_IsEnabled+0x1a>
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	0018      	movs	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b002      	add	sp, #8
 80025a8:	bd80      	pop	{r7, pc}

080025aa <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	001a      	movs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	611a      	str	r2, [r3, #16]
}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b002      	add	sp, #8
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80025d2:	230f      	movs	r3, #15
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	0018      	movs	r0, r3
 80025de:	f7ff ffd3 	bl	8002588 <LL_SPI_IsEnabled>
 80025e2:	1e03      	subs	r3, r0, #0
 80025e4:	d13c      	bne.n	8002660 <LL_SPI_Init+0x98>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a21      	ldr	r2, [pc, #132]	; (8002670 <LL_SPI_Init+0xa8>)
 80025ec:	401a      	ands	r2, r3
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6819      	ldr	r1, [r3, #0]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4319      	orrs	r1, r3
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4319      	orrs	r1, r3
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	4319      	orrs	r1, r3
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	4319      	orrs	r1, r3
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	4319      	orrs	r1, r3
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	4319      	orrs	r1, r3
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	4319      	orrs	r1, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	430b      	orrs	r3, r1
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2204      	movs	r2, #4
 800262e:	4393      	bics	r3, r2
 8002630:	001a      	movs	r2, r3
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	0c1b      	lsrs	r3, r3, #16
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6a1a      	ldr	r2, [r3, #32]
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	019b      	lsls	r3, r3, #6
 8002646:	429a      	cmp	r2, r3
 8002648:	d106      	bne.n	8002658 <LL_SPI_Init+0x90>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	0011      	movs	r1, r2
 8002652:	0018      	movs	r0, r3
 8002654:	f7ff ffa9 	bl	80025aa <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002658:	230f      	movs	r3, #15
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8002660:	230f      	movs	r3, #15
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	781b      	ldrb	r3, [r3, #0]
}
 8002666:	0018      	movs	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	b004      	add	sp, #16
 800266c:	bd80      	pop	{r7, pc}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	ffff0040 	.word	0xffff0040

08002674 <LL_TIM_SetPrescaler>:
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002684:	46c0      	nop			; (mov r8, r8)
 8002686:	46bd      	mov	sp, r7
 8002688:	b002      	add	sp, #8
 800268a:	bd80      	pop	{r7, pc}

0800268c <LL_TIM_SetAutoReload>:
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800269c:	46c0      	nop			; (mov r8, r8)
 800269e:	46bd      	mov	sp, r7
 80026a0:	b002      	add	sp, #8
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <LL_TIM_OC_SetCompareCH1>:
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80026b4:	46c0      	nop			; (mov r8, r8)
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b002      	add	sp, #8
 80026ba:	bd80      	pop	{r7, pc}

080026bc <LL_TIM_OC_SetCompareCH2>:
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	639a      	str	r2, [r3, #56]	; 0x38
}
 80026cc:	46c0      	nop			; (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b002      	add	sp, #8
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <LL_TIM_OC_SetCompareCH3>:
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80026e4:	46c0      	nop			; (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b002      	add	sp, #8
 80026ea:	bd80      	pop	{r7, pc}

080026ec <LL_TIM_OC_SetCompareCH4>:
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80026fc:	46c0      	nop			; (mov r8, r8)
 80026fe:	46bd      	mov	sp, r7
 8002700:	b002      	add	sp, #8
 8002702:	bd80      	pop	{r7, pc}

08002704 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	2201      	movs	r2, #1
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	615a      	str	r2, [r3, #20]
}
 8002718:	46c0      	nop			; (mov r8, r8)
 800271a:	46bd      	mov	sp, r7
 800271c:	b002      	add	sp, #8
 800271e:	bd80      	pop	{r7, pc}

08002720 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	05db      	lsls	r3, r3, #23
 8002736:	429a      	cmp	r2, r3
 8002738:	d003      	beq.n	8002742 <LL_TIM_Init+0x22>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a1a      	ldr	r2, [pc, #104]	; (80027a8 <LL_TIM_Init+0x88>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d107      	bne.n	8002752 <LL_TIM_Init+0x32>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2270      	movs	r2, #112	; 0x70
 8002746:	4393      	bics	r3, r2
 8002748:	001a      	movs	r2, r3
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	05db      	lsls	r3, r3, #23
 8002758:	429a      	cmp	r2, r3
 800275a:	d003      	beq.n	8002764 <LL_TIM_Init+0x44>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <LL_TIM_Init+0x88>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d106      	bne.n	8002772 <LL_TIM_Init+0x52>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4a11      	ldr	r2, [pc, #68]	; (80027ac <LL_TIM_Init+0x8c>)
 8002768:	401a      	ands	r2, r3
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	0011      	movs	r1, r2
 8002780:	0018      	movs	r0, r3
 8002782:	f7ff ff83 	bl	800268c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	001a      	movs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	0011      	movs	r1, r2
 8002790:	0018      	movs	r0, r3
 8002792:	f7ff ff6f 	bl	8002674 <LL_TIM_SetPrescaler>
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	0018      	movs	r0, r3
 800279a:	f7ff ffb3 	bl	8002704 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b004      	add	sp, #16
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40010800 	.word	0x40010800
 80027ac:	fffffcff 	.word	0xfffffcff

080027b0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80027b0:	b590      	push	{r4, r7, lr}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80027bc:	2317      	movs	r3, #23
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	015b      	lsls	r3, r3, #5
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d036      	beq.n	800283c <LL_TIM_OC_Init+0x8c>
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	015b      	lsls	r3, r3, #5
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d83c      	bhi.n	8002852 <LL_TIM_OC_Init+0xa2>
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	429a      	cmp	r2, r3
 80027e0:	d021      	beq.n	8002826 <LL_TIM_OC_Init+0x76>
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d832      	bhi.n	8002852 <LL_TIM_OC_Init+0xa2>
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d003      	beq.n	80027fa <LL_TIM_OC_Init+0x4a>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b10      	cmp	r3, #16
 80027f6:	d00b      	beq.n	8002810 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80027f8:	e02b      	b.n	8002852 <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80027fa:	2317      	movs	r3, #23
 80027fc:	18fc      	adds	r4, r7, r3
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	0011      	movs	r1, r2
 8002804:	0018      	movs	r0, r3
 8002806:	f000 f82c 	bl	8002862 <OC1Config>
 800280a:	0003      	movs	r3, r0
 800280c:	7023      	strb	r3, [r4, #0]
      break;
 800280e:	e021      	b.n	8002854 <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002810:	2317      	movs	r3, #23
 8002812:	18fc      	adds	r4, r7, r3
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	0011      	movs	r1, r2
 800281a:	0018      	movs	r0, r3
 800281c:	f000 f868 	bl	80028f0 <OC2Config>
 8002820:	0003      	movs	r3, r0
 8002822:	7023      	strb	r3, [r4, #0]
      break;
 8002824:	e016      	b.n	8002854 <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002826:	2317      	movs	r3, #23
 8002828:	18fc      	adds	r4, r7, r3
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	0011      	movs	r1, r2
 8002830:	0018      	movs	r0, r3
 8002832:	f000 f8a9 	bl	8002988 <OC3Config>
 8002836:	0003      	movs	r3, r0
 8002838:	7023      	strb	r3, [r4, #0]
      break;
 800283a:	e00b      	b.n	8002854 <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800283c:	2317      	movs	r3, #23
 800283e:	18fc      	adds	r4, r7, r3
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	0011      	movs	r1, r2
 8002846:	0018      	movs	r0, r3
 8002848:	f000 f8e8 	bl	8002a1c <OC4Config>
 800284c:	0003      	movs	r3, r0
 800284e:	7023      	strb	r3, [r4, #0]
      break;
 8002850:	e000      	b.n	8002854 <LL_TIM_OC_Init+0xa4>
      break;
 8002852:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 8002854:	2317      	movs	r3, #23
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	781b      	ldrb	r3, [r3, #0]
}
 800285a:	0018      	movs	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	b007      	add	sp, #28
 8002860:	bd90      	pop	{r4, r7, pc}

08002862 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b086      	sub	sp, #24
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	2201      	movs	r2, #1
 8002872:	4393      	bics	r3, r2
 8002874:	001a      	movs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2203      	movs	r2, #3
 8002890:	4393      	bics	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2270      	movs	r2, #112	; 0x70
 8002898:	4393      	bics	r3, r2
 800289a:	001a      	movs	r2, r3
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2202      	movs	r2, #2
 80028a8:	4393      	bics	r3, r2
 80028aa:	001a      	movs	r2, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2201      	movs	r2, #1
 80028b8:	4393      	bics	r3, r2
 80028ba:	001a      	movs	r2, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	0011      	movs	r1, r2
 80028d8:	0018      	movs	r0, r3
 80028da:	f7ff fee3 	bl	80026a4 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	0018      	movs	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b006      	add	sp, #24
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	2210      	movs	r2, #16
 8002900:	4393      	bics	r3, r2
 8002902:	001a      	movs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4a18      	ldr	r2, [pc, #96]	; (8002980 <OC2Config+0x90>)
 800291e:	4013      	ands	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4a17      	ldr	r2, [pc, #92]	; (8002984 <OC2Config+0x94>)
 8002926:	401a      	ands	r2, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2220      	movs	r2, #32
 8002936:	4393      	bics	r3, r2
 8002938:	001a      	movs	r2, r3
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	4313      	orrs	r3, r2
 8002942:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	2210      	movs	r2, #16
 8002948:	4393      	bics	r3, r2
 800294a:	001a      	movs	r2, r3
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	4313      	orrs	r3, r2
 8002954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	0011      	movs	r1, r2
 800296a:	0018      	movs	r0, r3
 800296c:	f7ff fea6 	bl	80026bc <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002976:	2300      	movs	r3, #0
}
 8002978:	0018      	movs	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	b006      	add	sp, #24
 800297e:	bd80      	pop	{r7, pc}
 8002980:	fffffcff 	.word	0xfffffcff
 8002984:	ffff8fff 	.word	0xffff8fff

08002988 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	4a1f      	ldr	r2, [pc, #124]	; (8002a14 <OC3Config+0x8c>)
 8002998:	401a      	ands	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2203      	movs	r2, #3
 80029b4:	4393      	bics	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2270      	movs	r2, #112	; 0x70
 80029bc:	4393      	bics	r3, r2
 80029be:	001a      	movs	r2, r3
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	4a13      	ldr	r2, [pc, #76]	; (8002a18 <OC3Config+0x90>)
 80029cc:	401a      	ands	r2, r3
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	4a0e      	ldr	r2, [pc, #56]	; (8002a14 <OC3Config+0x8c>)
 80029dc:	401a      	ands	r2, r3
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	0011      	movs	r1, r2
 80029fc:	0018      	movs	r0, r3
 80029fe:	f7ff fe69 	bl	80026d4 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b006      	add	sp, #24
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	fffffeff 	.word	0xfffffeff
 8002a18:	fffffdff 	.word	0xfffffdff

08002a1c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	4a1f      	ldr	r2, [pc, #124]	; (8002aa8 <OC4Config+0x8c>)
 8002a2c:	401a      	ands	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4a19      	ldr	r2, [pc, #100]	; (8002aac <OC4Config+0x90>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4a18      	ldr	r2, [pc, #96]	; (8002ab0 <OC4Config+0x94>)
 8002a50:	401a      	ands	r2, r3
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <OC4Config+0x98>)
 8002a60:	401a      	ands	r2, r3
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	031b      	lsls	r3, r3, #12
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	4a0e      	ldr	r2, [pc, #56]	; (8002aa8 <OC4Config+0x8c>)
 8002a70:	401a      	ands	r2, r3
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	031b      	lsls	r3, r3, #12
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	0011      	movs	r1, r2
 8002a90:	0018      	movs	r0, r3
 8002a92:	f7ff fe2b 	bl	80026ec <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	b006      	add	sp, #24
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	ffffefff 	.word	0xffffefff
 8002aac:	fffffcff 	.word	0xfffffcff
 8002ab0:	ffff8fff 	.word	0xffff8fff
 8002ab4:	ffffdfff 	.word	0xffffdfff

08002ab8 <LL_USART_IsEnabled>:
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <LL_USART_IsEnabled+0x18>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <LL_USART_IsEnabled+0x1a>
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b002      	add	sp, #8
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <LL_USART_SetStopBitsLength>:
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4a05      	ldr	r2, [pc, #20]	; (8002b00 <LL_USART_SetStopBitsLength+0x24>)
 8002aec:	401a      	ands	r2, r3
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	605a      	str	r2, [r3, #4]
}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b002      	add	sp, #8
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	ffffcfff 	.word	0xffffcfff

08002b04 <LL_USART_SetHWFlowCtrl>:
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	4a05      	ldr	r2, [pc, #20]	; (8002b28 <LL_USART_SetHWFlowCtrl+0x24>)
 8002b14:	401a      	ands	r2, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	609a      	str	r2, [r3, #8]
}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b002      	add	sp, #8
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	fffffcff 	.word	0xfffffcff

08002b2c <LL_USART_SetBaudRate>:
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	021b      	lsls	r3, r3, #8
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d11c      	bne.n	8002b7e <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	005a      	lsls	r2, r3, #1
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	085b      	lsrs	r3, r3, #1
 8002b4c:	18d3      	adds	r3, r2, r3
 8002b4e:	6839      	ldr	r1, [r7, #0]
 8002b50:	0018      	movs	r0, r3
 8002b52:	f7fd fad9 	bl	8000108 <__udivsi3>
 8002b56:	0003      	movs	r3, r0
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	4a10      	ldr	r2, [pc, #64]	; (8002ba0 <LL_USART_SetBaudRate+0x74>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	085b      	lsrs	r3, r3, #1
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	001a      	movs	r2, r3
 8002b6c:	2307      	movs	r3, #7
 8002b6e:	4013      	ands	r3, r2
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	60da      	str	r2, [r3, #12]
}
 8002b7c:	e00c      	b.n	8002b98 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	085a      	lsrs	r2, r3, #1
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	18d3      	adds	r3, r2, r3
 8002b86:	6839      	ldr	r1, [r7, #0]
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f7fd fabd 	bl	8000108 <__udivsi3>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	001a      	movs	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	60da      	str	r2, [r3, #12]
}
 8002b98:	46c0      	nop			; (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b006      	add	sp, #24
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	0000fff0 	.word	0x0000fff0

08002ba4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002bae:	230f      	movs	r3, #15
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f7ff ff7b 	bl	8002ab8 <LL_USART_IsEnabled>
 8002bc2:	1e03      	subs	r3, r0, #0
 8002bc4:	d13b      	bne.n	8002c3e <LL_USART_Init+0x9a>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a20      	ldr	r2, [pc, #128]	; (8002c4c <LL_USART_Init+0xa8>)
 8002bcc:	401a      	ands	r2, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6859      	ldr	r1, [r3, #4]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	4319      	orrs	r1, r3
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	4319      	orrs	r1, r3
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	430b      	orrs	r3, r1
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	0011      	movs	r1, r2
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f7ff ff72 	bl	8002adc <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	695a      	ldr	r2, [r3, #20]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	0011      	movs	r1, r2
 8002c00:	0018      	movs	r0, r3
 8002c02:	f7ff ff7f 	bl	8002b04 <LL_USART_SetHWFlowCtrl>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
#else
    if (USARTx == USART2)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a11      	ldr	r2, [pc, #68]	; (8002c50 <LL_USART_Init+0xac>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d104      	bne.n	8002c18 <LL_USART_Init+0x74>
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002c0e:	200c      	movs	r0, #12
 8002c10:	f7ff fbbe 	bl	8002390 <LL_RCC_GetUSARTClockFreq>
 8002c14:	0003      	movs	r3, r0
 8002c16:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00f      	beq.n	8002c3e <LL_USART_Init+0x9a>
        && (USART_InitStruct->BaudRate != 0U))
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00b      	beq.n	8002c3e <LL_USART_Init+0x9a>
    {
      status = SUCCESS;
 8002c26:	230f      	movs	r3, #15
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002c36:	68b9      	ldr	r1, [r7, #8]
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff ff77 	bl	8002b2c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002c3e:	230f      	movs	r3, #15
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	781b      	ldrb	r3, [r3, #0]
}
 8002c44:	0018      	movs	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b004      	add	sp, #16
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	efff69f3 	.word	0xefff69f3
 8002c50:	40004400 	.word	0x40004400

08002c54 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002c5c:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <LL_mDelay+0x40>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002c62:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3301      	adds	r3, #1
 8002c68:	d00c      	beq.n	8002c84 <LL_mDelay+0x30>
  {
    Delay++;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	607b      	str	r3, [r7, #4]
 8002c70:	e008      	b.n	8002c84 <LL_mDelay+0x30>
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002c72:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <LL_mDelay+0x40>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	025b      	lsls	r3, r3, #9
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d002      	beq.n	8002c84 <LL_mDelay+0x30>
    {
      Delay--;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f3      	bne.n	8002c72 <LL_mDelay+0x1e>
    }
  }
}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	46c0      	nop			; (mov r8, r8)
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b004      	add	sp, #16
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	e000e010 	.word	0xe000e010

08002c98 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <LL_SetSystemCoreClock+0x18>)
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	601a      	str	r2, [r3, #0]
}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b002      	add	sp, #8
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	20000000 	.word	0x20000000

08002cb4 <memset>:
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	1882      	adds	r2, r0, r2
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d100      	bne.n	8002cbe <memset+0xa>
 8002cbc:	4770      	bx	lr
 8002cbe:	7019      	strb	r1, [r3, #0]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	e7f9      	b.n	8002cb8 <memset+0x4>

08002cc4 <__libc_init_array>:
 8002cc4:	b570      	push	{r4, r5, r6, lr}
 8002cc6:	2600      	movs	r6, #0
 8002cc8:	4c0c      	ldr	r4, [pc, #48]	; (8002cfc <__libc_init_array+0x38>)
 8002cca:	4d0d      	ldr	r5, [pc, #52]	; (8002d00 <__libc_init_array+0x3c>)
 8002ccc:	1b64      	subs	r4, r4, r5
 8002cce:	10a4      	asrs	r4, r4, #2
 8002cd0:	42a6      	cmp	r6, r4
 8002cd2:	d109      	bne.n	8002ce8 <__libc_init_array+0x24>
 8002cd4:	2600      	movs	r6, #0
 8002cd6:	f000 f819 	bl	8002d0c <_init>
 8002cda:	4c0a      	ldr	r4, [pc, #40]	; (8002d04 <__libc_init_array+0x40>)
 8002cdc:	4d0a      	ldr	r5, [pc, #40]	; (8002d08 <__libc_init_array+0x44>)
 8002cde:	1b64      	subs	r4, r4, r5
 8002ce0:	10a4      	asrs	r4, r4, #2
 8002ce2:	42a6      	cmp	r6, r4
 8002ce4:	d105      	bne.n	8002cf2 <__libc_init_array+0x2e>
 8002ce6:	bd70      	pop	{r4, r5, r6, pc}
 8002ce8:	00b3      	lsls	r3, r6, #2
 8002cea:	58eb      	ldr	r3, [r5, r3]
 8002cec:	4798      	blx	r3
 8002cee:	3601      	adds	r6, #1
 8002cf0:	e7ee      	b.n	8002cd0 <__libc_init_array+0xc>
 8002cf2:	00b3      	lsls	r3, r6, #2
 8002cf4:	58eb      	ldr	r3, [r5, r3]
 8002cf6:	4798      	blx	r3
 8002cf8:	3601      	adds	r6, #1
 8002cfa:	e7f2      	b.n	8002ce2 <__libc_init_array+0x1e>
 8002cfc:	08002d58 	.word	0x08002d58
 8002d00:	08002d58 	.word	0x08002d58
 8002d04:	08002d5c 	.word	0x08002d5c
 8002d08:	08002d58 	.word	0x08002d58

08002d0c <_init>:
 8002d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d12:	bc08      	pop	{r3}
 8002d14:	469e      	mov	lr, r3
 8002d16:	4770      	bx	lr

08002d18 <_fini>:
 8002d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1e:	bc08      	pop	{r3}
 8002d20:	469e      	mov	lr, r3
 8002d22:	4770      	bx	lr
